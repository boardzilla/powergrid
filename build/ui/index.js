(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../boardzilla-core/node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../boardzilla-core/node_modules/react/cjs/react.development.js"(exports2, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          __name(getIteratorFn, "getIteratorFn");
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          __name(setExtraStackFrame, "setExtraStackFrame");
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          __name(warn, "warn");
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          __name(error, "error");
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          __name(printWarning, "printWarning");
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          __name(warnNoop, "warnNoop");
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component6(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          __name(Component6, "Component");
          Component6.prototype.isReactComponent = {};
          Component6.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component6.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = /* @__PURE__ */ __name(function(methodName, info) {
              Object.defineProperty(Component6.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            }, "defineDeprecationWarning");
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          __name(ComponentDummy, "ComponentDummy");
          ComponentDummy.prototype = Component6.prototype;
          function PureComponent6(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          __name(PureComponent6, "PureComponent");
          var pureComponentPrototype = PureComponent6.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent6;
          assign(pureComponentPrototype, Component6.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          __name(createRef, "createRef");
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          __name(isArray2, "isArray");
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          __name(typeName, "typeName");
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          __name(willCoercionThrow, "willCoercionThrow");
          function testStringCoercion(value) {
            return "" + value;
          }
          __name(testStringCoercion, "testStringCoercion");
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          __name(checkKeyStringCoercion, "checkKeyStringCoercion");
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          __name(getWrappedName, "getWrappedName");
          function getContextName(type) {
            return type.displayName || "Context";
          }
          __name(getContextName, "getContextName");
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          __name(getComponentNameFromType, "getComponentNameFromType");
          var hasOwnProperty13 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty13.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          __name(hasValidRef, "hasValidRef");
          function hasValidKey(config) {
            {
              if (hasOwnProperty13.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          __name(hasValidKey, "hasValidKey");
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = /* @__PURE__ */ __name(function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            }, "warnAboutAccessingKey");
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          __name(defineKeyPropWarningGetter, "defineKeyPropWarningGetter");
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = /* @__PURE__ */ __name(function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            }, "warnAboutAccessingRef");
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          __name(defineRefPropWarningGetter, "defineRefPropWarningGetter");
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          __name(warnIfStringRefCannotBeAutoConverted, "warnIfStringRefCannotBeAutoConverted");
          var ReactElement = /* @__PURE__ */ __name(function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          }, "ReactElement");
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty13.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          __name(createElement, "createElement");
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          __name(cloneAndReplaceKey, "cloneAndReplaceKey");
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty13.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          __name(cloneElement, "cloneElement");
          function isValidElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          __name(isValidElement2, "isValidElement");
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          __name(escape, "escape");
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          __name(escapeUserProvidedKey, "escapeUserProvidedKey");
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          __name(getElementKey, "getElementKey");
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement2(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          __name(mapIntoArray, "mapIntoArray");
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          __name(mapChildren, "mapChildren");
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          __name(countChildren, "countChildren");
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          __name(forEachChildren, "forEachChildren");
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          __name(toArray, "toArray");
          function onlyChild(children) {
            if (!isValidElement2(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          __name(onlyChild, "onlyChild");
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          __name(createContext, "createContext");
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          __name(lazyInitializer, "lazyInitializer");
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          __name(lazy, "lazy");
          function forwardRef(render3) {
            {
              if (render3 != null && render3.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render3 !== "function") {
                error("forwardRef requires a render function but was given %s.", render3 === null ? "null" : typeof render3);
              } else {
                if (render3.length !== 0 && render3.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render3.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render3 != null) {
                if (render3.defaultProps != null || render3.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render3
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render3.name && !render3.displayName) {
                    render3.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          __name(forwardRef, "forwardRef");
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          __name(isValidElementType, "isValidElementType");
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          __name(memo, "memo");
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          __name(resolveDispatcher, "resolveDispatcher");
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          __name(useContext, "useContext");
          function useState5(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          __name(useState5, "useState");
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          __name(useReducer, "useReducer");
          function useRef3(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          __name(useRef3, "useRef");
          function useEffect4(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          __name(useEffect4, "useEffect");
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          __name(useInsertionEffect, "useInsertionEffect");
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          __name(useLayoutEffect, "useLayoutEffect");
          function useCallback4(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          __name(useCallback4, "useCallback");
          function useMemo3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          __name(useMemo3, "useMemo");
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          __name(useImperativeHandle, "useImperativeHandle");
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          __name(useDebugValue2, "useDebugValue");
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          __name(useTransition, "useTransition");
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          __name(useDeferredValue, "useDeferredValue");
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          __name(useId, "useId");
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          __name(useSyncExternalStore, "useSyncExternalStore");
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          __name(disabledLog, "disabledLog");
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          __name(disableLogs, "disableLogs");
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          __name(reenableLogs, "reenableLogs");
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          __name(describeBuiltInComponentFrame, "describeBuiltInComponentFrame");
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = /* @__PURE__ */ __name(function() {
                  throw Error();
                }, "Fake");
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          __name(describeNativeComponentFrame, "describeNativeComponentFrame");
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          __name(describeFunctionComponentFrame, "describeFunctionComponentFrame");
          function shouldConstruct(Component7) {
            var prototype = Component7.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          __name(shouldConstruct, "shouldConstruct");
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          __name(describeUnknownElementTypeFrameInDEV, "describeUnknownElementTypeFrameInDEV");
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement, "setCurrentlyValidatingElement");
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty13);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          __name(checkPropTypes, "checkPropTypes");
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement$1, "setCurrentlyValidatingElement$1");
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          __name(getDeclarationErrorAddendum, "getDeclarationErrorAddendum");
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          __name(getSourceInfoErrorAddendum, "getSourceInfoErrorAddendum");
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          __name(getSourceInfoErrorAddendumForProps, "getSourceInfoErrorAddendumForProps");
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          __name(getCurrentComponentErrorInfo, "getCurrentComponentErrorInfo");
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          __name(validateExplicitKey, "validateExplicitKey");
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray2(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement2(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement2(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement2(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          __name(validateChildKeys, "validateChildKeys");
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          __name(validatePropTypes, "validatePropTypes");
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          __name(validateFragmentProps, "validateFragmentProps");
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          __name(createElementWithValidation, "createElementWithValidation");
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          __name(createFactoryWithValidation, "createFactoryWithValidation");
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          __name(cloneElementWithValidation, "cloneElementWithValidation");
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          __name(startTransition, "startTransition");
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = /* @__PURE__ */ __name(function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                }, "enqueueTaskImpl");
              }
            }
            return enqueueTaskImpl(task);
          }
          __name(enqueueTask, "enqueueTask");
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve2, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve2, reject);
                      } else {
                        resolve2(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve2, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve2, reject);
                      } else {
                        resolve2(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve2, reject) {
                      resolve2(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          __name(act, "act");
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          __name(popActScope, "popActScope");
          function recursivelyFlushAsyncActWork(returnValue, resolve2, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve2(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve2, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve2(returnValue);
              }
            }
          }
          __name(recursivelyFlushAsyncActWork, "recursivelyFlushAsyncActWork");
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          __name(flushActQueue, "flushActQueue");
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports2.Children = Children;
          exports2.Component = Component6;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.Profiler = REACT_PROFILER_TYPE;
          exports2.PureComponent = PureComponent6;
          exports2.StrictMode = REACT_STRICT_MODE_TYPE;
          exports2.Suspense = REACT_SUSPENSE_TYPE;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef;
          exports2.forwardRef = forwardRef;
          exports2.isValidElement = isValidElement2;
          exports2.lazy = lazy;
          exports2.memo = memo;
          exports2.startTransition = startTransition;
          exports2.unstable_act = act;
          exports2.useCallback = useCallback4;
          exports2.useContext = useContext;
          exports2.useDebugValue = useDebugValue2;
          exports2.useDeferredValue = useDeferredValue;
          exports2.useEffect = useEffect4;
          exports2.useId = useId;
          exports2.useImperativeHandle = useImperativeHandle;
          exports2.useInsertionEffect = useInsertionEffect;
          exports2.useLayoutEffect = useLayoutEffect;
          exports2.useMemo = useMemo3;
          exports2.useReducer = useReducer;
          exports2.useRef = useRef3;
          exports2.useState = useState5;
          exports2.useSyncExternalStore = useSyncExternalStore;
          exports2.useTransition = useTransition;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../boardzilla-core/node_modules/react/index.js
  var require_react = __commonJS({
    "../boardzilla-core/node_modules/react/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // ../boardzilla-core/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "../boardzilla-core/node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          __name(push, "push");
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          __name(peek, "peek");
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          __name(pop, "pop");
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          __name(siftUp, "siftUp");
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          __name(siftDown, "siftDown");
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          __name(compare, "compare");
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          __name(markTaskErrored, "markTaskErrored");
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports2.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports2.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          __name(advanceTimers, "advanceTimers");
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          __name(handleTimeout, "handleTimeout");
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports2.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          __name(flushWork, "flushWork");
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          __name(workLoop, "workLoop");
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          __name(unstable_runWithPriority, "unstable_runWithPriority");
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          __name(unstable_next, "unstable_next");
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          __name(unstable_wrapCallback, "unstable_wrapCallback");
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports2.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          __name(unstable_scheduleCallback, "unstable_scheduleCallback");
          function unstable_pauseExecution() {
          }
          __name(unstable_pauseExecution, "unstable_pauseExecution");
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          __name(unstable_continueExecution, "unstable_continueExecution");
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          __name(unstable_getFirstCallbackNode, "unstable_getFirstCallbackNode");
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          __name(unstable_cancelCallback, "unstable_cancelCallback");
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          __name(unstable_getCurrentPriorityLevel, "unstable_getCurrentPriorityLevel");
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports2.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          __name(shouldYieldToHost, "shouldYieldToHost");
          function requestPaint() {
          }
          __name(requestPaint, "requestPaint");
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          __name(forceFrameRate, "forceFrameRate");
          var performWorkUntilDeadline = /* @__PURE__ */ __name(function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          }, "performWorkUntilDeadline");
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = /* @__PURE__ */ __name(function() {
              localSetImmediate(performWorkUntilDeadline);
            }, "schedulePerformWorkUntilDeadline");
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = /* @__PURE__ */ __name(function() {
              port.postMessage(null);
            }, "schedulePerformWorkUntilDeadline");
          } else {
            schedulePerformWorkUntilDeadline = /* @__PURE__ */ __name(function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            }, "schedulePerformWorkUntilDeadline");
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          __name(requestHostCallback, "requestHostCallback");
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports2.unstable_now());
            }, ms);
          }
          __name(requestHostTimeout, "requestHostTimeout");
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          __name(cancelHostTimeout, "cancelHostTimeout");
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_forceFrameRate = forceFrameRate;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_shouldYield = shouldYieldToHost;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../boardzilla-core/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../boardzilla-core/node_modules/scheduler/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // ../boardzilla-core/node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "../boardzilla-core/node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React64 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React64.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          __name(setSuppressWarning, "setSuppressWarning");
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          __name(warn, "warn");
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          __name(error, "error");
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          __name(printWarning, "printWarning");
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          __name(registerTwoPhaseEvent, "registerTwoPhaseEvent");
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          __name(registerDirectEvent, "registerDirectEvent");
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty13 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          __name(typeName, "typeName");
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          __name(willCoercionThrow, "willCoercionThrow");
          function testStringCoercion(value) {
            return "" + value;
          }
          __name(testStringCoercion, "testStringCoercion");
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          __name(checkAttributeStringCoercion, "checkAttributeStringCoercion");
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          __name(checkKeyStringCoercion, "checkKeyStringCoercion");
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          __name(checkPropStringCoercion, "checkPropStringCoercion");
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          __name(checkCSSPropertyStringCoercion, "checkCSSPropertyStringCoercion");
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          __name(checkHtmlStringCoercion, "checkHtmlStringCoercion");
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          __name(checkFormFieldValueStringCoercion, "checkFormFieldValueStringCoercion");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty13.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty13.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          __name(isAttributeNameSafe, "isAttributeNameSafe");
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          __name(shouldIgnoreAttribute, "shouldIgnoreAttribute");
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          __name(shouldRemoveAttributeWithWarning, "shouldRemoveAttributeWithWarning");
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          __name(shouldRemoveAttribute, "shouldRemoveAttribute");
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          __name(getPropertyInfo, "getPropertyInfo");
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          __name(PropertyInfoRecord, "PropertyInfoRecord");
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = /* @__PURE__ */ __name(function(token) {
            return token[1].toUpperCase();
          }, "capitalize");
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          __name(sanitizeURL, "sanitizeURL");
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          __name(getValueForProperty, "getValueForProperty");
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          __name(getValueForAttribute, "getValueForAttribute");
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          __name(setValueForProperty, "setValueForProperty");
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          __name(getIteratorFn, "getIteratorFn");
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          __name(disabledLog, "disabledLog");
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          __name(disableLogs, "disableLogs");
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          __name(reenableLogs, "reenableLogs");
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          __name(describeBuiltInComponentFrame, "describeBuiltInComponentFrame");
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = /* @__PURE__ */ __name(function() {
                  throw Error();
                }, "Fake");
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          __name(describeNativeComponentFrame, "describeNativeComponentFrame");
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          __name(describeClassComponentFrame, "describeClassComponentFrame");
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          __name(describeFunctionComponentFrame, "describeFunctionComponentFrame");
          function shouldConstruct(Component6) {
            var prototype = Component6.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          __name(shouldConstruct, "shouldConstruct");
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          __name(describeUnknownElementTypeFrameInDEV, "describeUnknownElementTypeFrameInDEV");
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          __name(describeFiber, "describeFiber");
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          __name(getStackByFiberInDevAndProd, "getStackByFiberInDevAndProd");
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          __name(getWrappedName, "getWrappedName");
          function getContextName(type) {
            return type.displayName || "Context";
          }
          __name(getContextName, "getContextName");
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          __name(getComponentNameFromType, "getComponentNameFromType");
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          __name(getWrappedName$1, "getWrappedName$1");
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          __name(getContextName$1, "getContextName$1");
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          __name(getComponentNameFromFiber, "getComponentNameFromFiber");
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          __name(getCurrentFiberOwnerNameInDevOrNull, "getCurrentFiberOwnerNameInDevOrNull");
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          __name(getCurrentFiberStackInDev, "getCurrentFiberStackInDev");
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          __name(resetCurrentFiber, "resetCurrentFiber");
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          __name(setCurrentFiber, "setCurrentFiber");
          function getCurrentFiber() {
            {
              return current;
            }
          }
          __name(getCurrentFiber, "getCurrentFiber");
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          __name(setIsRendering, "setIsRendering");
          function toString3(value) {
            return "" + value;
          }
          __name(toString3, "toString");
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          __name(getToStringValue, "getToStringValue");
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          __name(checkControlledValueProps, "checkControlledValueProps");
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          __name(isCheckable, "isCheckable");
          function getTracker(node) {
            return node._valueTracker;
          }
          __name(getTracker, "getTracker");
          function detachTracker(node) {
            node._valueTracker = null;
          }
          __name(detachTracker, "detachTracker");
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          __name(getValueFromNode, "getValueFromNode");
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get5 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get5.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          __name(trackValueOnNode, "trackValueOnNode");
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          __name(track, "track");
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          __name(updateValueIfChanged, "updateValueIfChanged");
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          __name(getActiveElement, "getActiveElement");
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          __name(isControlled, "isControlled");
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          __name(getHostProps, "getHostProps");
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          __name(initWrapperState, "initWrapperState");
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          __name(updateChecked, "updateChecked");
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString3(value);
                }
              } else if (node.value !== toString3(value)) {
                node.value = toString3(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          __name(updateWrapper, "updateWrapper");
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString3(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          __name(postMountWrapper, "postMountWrapper");
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          __name(restoreControlledState, "restoreControlledState");
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          __name(updateNamedCousins, "updateNamedCousins");
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString3(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString3(value)) {
                node.defaultValue = toString3(value);
              }
            }
          }
          __name(setDefaultValue, "setDefaultValue");
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React64.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          __name(validateProps, "validateProps");
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString3(getToStringValue(props.value)));
            }
          }
          __name(postMountWrapper$1, "postMountWrapper$1");
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          __name(isArray2, "isArray");
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          __name(getDeclarationErrorAddendum, "getDeclarationErrorAddendum");
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          __name(checkSelectPropTypes, "checkSelectPropTypes");
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString3(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          __name(updateOptions, "updateOptions");
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          __name(getHostProps$1, "getHostProps$1");
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          __name(initWrapperState$1, "initWrapperState$1");
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          __name(postMountWrapper$2, "postMountWrapper$2");
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          __name(postUpdateWrapper, "postUpdateWrapper");
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          __name(restoreControlledState$1, "restoreControlledState$1");
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString3(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          __name(getHostProps$2, "getHostProps$2");
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          __name(initWrapperState$2, "initWrapperState$2");
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString3(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString3(defaultValue);
            }
          }
          __name(updateWrapper$1, "updateWrapper$1");
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          __name(postMountWrapper$3, "postMountWrapper$3");
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          __name(restoreControlledState$2, "restoreControlledState$2");
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          __name(getIntrinsicNamespace, "getIntrinsicNamespace");
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          __name(getChildNamespace, "getChildNamespace");
          var createMicrosoftUnsafeLocalFunction = /* @__PURE__ */ __name(function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          }, "createMicrosoftUnsafeLocalFunction");
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = /* @__PURE__ */ __name(function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          }, "setTextContent");
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          __name(prefixKey, "prefixKey");
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          __name(dangerousStyleValue, "dangerousStyleValue");
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          __name(hyphenateStyleName, "hyphenateStyleName");
          var warnValidStyle = /* @__PURE__ */ __name(function() {
          }, "warnValidStyle");
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = /* @__PURE__ */ __name(function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            }, "camelize");
            var warnHyphenatedStyleName = /* @__PURE__ */ __name(function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            }, "warnHyphenatedStyleName");
            var warnBadVendoredStyleName = /* @__PURE__ */ __name(function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            }, "warnBadVendoredStyleName");
            var warnStyleValueWithSemicolon = /* @__PURE__ */ __name(function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            }, "warnStyleValueWithSemicolon");
            var warnStyleValueIsNaN = /* @__PURE__ */ __name(function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            }, "warnStyleValueIsNaN");
            var warnStyleValueIsInfinity = /* @__PURE__ */ __name(function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            }, "warnStyleValueIsInfinity");
            warnValidStyle = /* @__PURE__ */ __name(function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            }, "warnValidStyle");
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          __name(createDangerousStringForStyles, "createDangerousStringForStyles");
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          __name(setValueForStyles, "setValueForStyles");
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          __name(isValueEmpty, "isValueEmpty");
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          __name(expandShorthandMap, "expandShorthandMap");
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          __name(validateShorthandPropertyCollisionInDev, "validateShorthandPropertyCollisionInDev");
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          __name(assertValidProps, "assertValidProps");
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          __name(isCustomComponent, "isCustomComponent");
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty13.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          __name(validateProperty, "validateProperty");
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          __name(warnInvalidARIAProps, "warnInvalidARIAProps");
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          __name(validateProperties, "validateProperties");
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          __name(validateProperties$1, "validateProperties$1");
          var validateProperty$1 = /* @__PURE__ */ __name(function() {
          }, "validateProperty$1");
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = /* @__PURE__ */ __name(function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty13.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            }, "validateProperty$1");
          }
          var warnUnknownProperties = /* @__PURE__ */ __name(function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          }, "warnUnknownProperties");
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          __name(validateProperties$2, "validateProperties$2");
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          __name(setReplayingEvent, "setReplayingEvent");
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          __name(resetReplayingEvent, "resetReplayingEvent");
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          __name(isReplayingEvent, "isReplayingEvent");
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          __name(getEventTarget, "getEventTarget");
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          __name(restoreStateOfTarget, "restoreStateOfTarget");
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          __name(setRestoreImplementation, "setRestoreImplementation");
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          __name(enqueueStateRestore, "enqueueStateRestore");
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          __name(needsStateRestore, "needsStateRestore");
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          __name(restoreStateIfNeeded, "restoreStateIfNeeded");
          var batchedUpdatesImpl = /* @__PURE__ */ __name(function(fn, bookkeeping) {
            return fn(bookkeeping);
          }, "batchedUpdatesImpl");
          var flushSyncImpl = /* @__PURE__ */ __name(function() {
          }, "flushSyncImpl");
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          __name(finishEventHandler, "finishEventHandler");
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          __name(batchedUpdates, "batchedUpdates");
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          __name(setBatchingImplementation, "setBatchingImplementation");
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          __name(isInteractive, "isInteractive");
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          __name(shouldPreventMouseEvent, "shouldPreventMouseEvent");
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          __name(getListener, "getListener");
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          __name(invokeGuardedCallbackProd, "invokeGuardedCallbackProd");
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = /* @__PURE__ */ __name(function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                __name(restoreAfterDispatch, "restoreAfterDispatch");
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                __name(callCallback2, "callCallback");
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                __name(handleWindowError, "handleWindowError");
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              }, "invokeGuardedCallbackDev");
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          __name(invokeGuardedCallback, "invokeGuardedCallback");
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          __name(invokeGuardedCallbackAndCatchFirstError, "invokeGuardedCallbackAndCatchFirstError");
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          __name(rethrowCaughtError, "rethrowCaughtError");
          function hasCaughtError() {
            return hasError;
          }
          __name(hasCaughtError, "hasCaughtError");
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          __name(clearCaughtError, "clearCaughtError");
          function get4(key) {
            return key._reactInternals;
          }
          __name(get4, "get");
          function has(key) {
            return key._reactInternals !== void 0;
          }
          __name(has, "has");
          function set(key, value) {
            key._reactInternals = value;
          }
          __name(set, "set");
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          __name(getNearestMountedFiber, "getNearestMountedFiber");
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          __name(getSuspenseInstanceFromFiber, "getSuspenseInstanceFromFiber");
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          __name(getContainerFromFiber, "getContainerFromFiber");
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          __name(isFiberMounted, "isFiberMounted");
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get4(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          __name(isMounted, "isMounted");
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          __name(assertIsMounted, "assertIsMounted");
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          __name(findCurrentFiberUsingSlowPath, "findCurrentFiberUsingSlowPath");
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          __name(findCurrentHostFiber, "findCurrentHostFiber");
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          __name(findCurrentHostFiberImpl, "findCurrentHostFiberImpl");
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          __name(findCurrentHostFiberWithNoPortals, "findCurrentHostFiberWithNoPortals");
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          __name(findCurrentHostFiberWithNoPortalsImpl, "findCurrentHostFiberWithNoPortalsImpl");
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now2 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          __name(injectInternals, "injectInternals");
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          __name(onScheduleRoot, "onScheduleRoot");
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          __name(onCommitRoot, "onCommitRoot");
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          __name(onPostCommitRoot, "onPostCommitRoot");
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          __name(onCommitUnmount, "onCommitUnmount");
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          __name(setIsStrictModeForDevtools, "setIsStrictModeForDevtools");
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          __name(injectProfilingHooks, "injectProfilingHooks");
          function getLaneLabelMap() {
            {
              var map2 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map2.set(lane, label);
                lane *= 2;
              }
              return map2;
            }
          }
          __name(getLaneLabelMap, "getLaneLabelMap");
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          __name(markCommitStarted, "markCommitStarted");
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          __name(markCommitStopped, "markCommitStopped");
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          __name(markComponentRenderStarted, "markComponentRenderStarted");
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          __name(markComponentRenderStopped, "markComponentRenderStopped");
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          __name(markComponentPassiveEffectMountStarted, "markComponentPassiveEffectMountStarted");
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          __name(markComponentPassiveEffectMountStopped, "markComponentPassiveEffectMountStopped");
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          __name(markComponentPassiveEffectUnmountStarted, "markComponentPassiveEffectUnmountStarted");
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          __name(markComponentPassiveEffectUnmountStopped, "markComponentPassiveEffectUnmountStopped");
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          __name(markComponentLayoutEffectMountStarted, "markComponentLayoutEffectMountStarted");
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          __name(markComponentLayoutEffectMountStopped, "markComponentLayoutEffectMountStopped");
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          __name(markComponentLayoutEffectUnmountStarted, "markComponentLayoutEffectUnmountStarted");
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          __name(markComponentLayoutEffectUnmountStopped, "markComponentLayoutEffectUnmountStopped");
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          __name(markComponentErrored, "markComponentErrored");
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          __name(markComponentSuspended, "markComponentSuspended");
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          __name(markLayoutEffectsStarted, "markLayoutEffectsStarted");
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          __name(markLayoutEffectsStopped, "markLayoutEffectsStopped");
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          __name(markPassiveEffectsStarted, "markPassiveEffectsStarted");
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          __name(markPassiveEffectsStopped, "markPassiveEffectsStopped");
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          __name(markRenderStarted, "markRenderStarted");
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          __name(markRenderYielded, "markRenderYielded");
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          __name(markRenderStopped, "markRenderStopped");
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          __name(markRenderScheduled, "markRenderScheduled");
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          __name(markForceUpdateScheduled, "markForceUpdateScheduled");
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          __name(markStateUpdateScheduled, "markStateUpdateScheduled");
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          __name(clz32Fallback, "clz32Fallback");
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          __name(getLabelForLane, "getLabelForLane");
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          __name(getHighestPriorityLanes, "getHighestPriorityLanes");
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          __name(getNextLanes, "getNextLanes");
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          __name(getMostRecentEventTime, "getMostRecentEventTime");
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          __name(computeExpirationTime, "computeExpirationTime");
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          __name(markStarvedLanesAsExpired, "markStarvedLanesAsExpired");
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          __name(getHighestPriorityPendingLanes, "getHighestPriorityPendingLanes");
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          __name(getLanesToRetrySynchronouslyOnError, "getLanesToRetrySynchronouslyOnError");
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          __name(includesSyncLane, "includesSyncLane");
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          __name(includesNonIdleWork, "includesNonIdleWork");
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          __name(includesOnlyRetries, "includesOnlyRetries");
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          __name(includesOnlyNonUrgentLanes, "includesOnlyNonUrgentLanes");
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          __name(includesOnlyTransitions, "includesOnlyTransitions");
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          __name(includesBlockingLane, "includesBlockingLane");
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          __name(includesExpiredLane, "includesExpiredLane");
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          __name(isTransitionLane, "isTransitionLane");
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          __name(claimNextTransitionLane, "claimNextTransitionLane");
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          __name(claimNextRetryLane, "claimNextRetryLane");
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          __name(getHighestPriorityLane, "getHighestPriorityLane");
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          __name(pickArbitraryLane, "pickArbitraryLane");
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          __name(pickArbitraryLaneIndex, "pickArbitraryLaneIndex");
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          __name(laneToIndex, "laneToIndex");
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          __name(includesSomeLane, "includesSomeLane");
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          __name(isSubsetOfLanes, "isSubsetOfLanes");
          function mergeLanes(a, b) {
            return a | b;
          }
          __name(mergeLanes, "mergeLanes");
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          __name(removeLanes, "removeLanes");
          function intersectLanes(a, b) {
            return a & b;
          }
          __name(intersectLanes, "intersectLanes");
          function laneToLanes(lane) {
            return lane;
          }
          __name(laneToLanes, "laneToLanes");
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          __name(higherPriorityLane, "higherPriorityLane");
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          __name(createLaneMap, "createLaneMap");
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          __name(markRootUpdated, "markRootUpdated");
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          __name(markRootSuspended, "markRootSuspended");
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          __name(markRootPinged, "markRootPinged");
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          __name(markRootFinished, "markRootFinished");
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          __name(markRootEntangled, "markRootEntangled");
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          __name(getBumpedLaneForHydration, "getBumpedLaneForHydration");
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          __name(addFiberToLanesMap, "addFiberToLanesMap");
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          __name(movePendingFibersToMemoized, "movePendingFibersToMemoized");
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          __name(getTransitionsForLanes, "getTransitionsForLanes");
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          __name(getCurrentUpdatePriority, "getCurrentUpdatePriority");
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          __name(setCurrentUpdatePriority, "setCurrentUpdatePriority");
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          __name(runWithPriority, "runWithPriority");
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          __name(higherEventPriority, "higherEventPriority");
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          __name(lowerEventPriority, "lowerEventPriority");
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          __name(isHigherEventPriority, "isHigherEventPriority");
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          __name(lanesToEventPriority, "lanesToEventPriority");
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          __name(isRootDehydrated, "isRootDehydrated");
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          __name(setAttemptSynchronousHydration, "setAttemptSynchronousHydration");
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          __name(attemptSynchronousHydration, "attemptSynchronousHydration");
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          __name(setAttemptContinuousHydration, "setAttemptContinuousHydration");
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          __name(setAttemptHydrationAtCurrentPriority, "setAttemptHydrationAtCurrentPriority");
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          __name(setGetCurrentUpdatePriority, "setGetCurrentUpdatePriority");
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          __name(setAttemptHydrationAtPriority, "setAttemptHydrationAtPriority");
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          __name(isDiscreteEventThatRequiresHydration, "isDiscreteEventThatRequiresHydration");
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          __name(createQueuedReplayableEvent, "createQueuedReplayableEvent");
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          __name(clearIfContinuousEvent, "clearIfContinuousEvent");
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          __name(accumulateOrCreateContinuousQueuedReplayableEvent, "accumulateOrCreateContinuousQueuedReplayableEvent");
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          __name(queueIfContinuousEvent, "queueIfContinuousEvent");
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          __name(attemptExplicitHydrationTarget, "attemptExplicitHydrationTarget");
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          __name(queueExplicitHydrationTarget, "queueExplicitHydrationTarget");
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          __name(attemptReplayContinuousQueuedEvent, "attemptReplayContinuousQueuedEvent");
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key);
            }
          }
          __name(attemptReplayContinuousQueuedEventInMap, "attemptReplayContinuousQueuedEventInMap");
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          __name(replayUnblockedEvents, "replayUnblockedEvents");
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          __name(scheduleCallbackIfUnblocked, "scheduleCallbackIfUnblocked");
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = /* @__PURE__ */ __name(function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            }, "unblock");
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          __name(retryIfBlockedOn, "retryIfBlockedOn");
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          __name(setEnabled, "setEnabled");
          function isEnabled() {
            return _enabled;
          }
          __name(isEnabled, "isEnabled");
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          __name(createEventListenerWrapperWithPriority, "createEventListenerWrapperWithPriority");
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          __name(dispatchDiscreteEvent, "dispatchDiscreteEvent");
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          __name(dispatchContinuousEvent, "dispatchContinuousEvent");
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          __name(dispatchEvent, "dispatchEvent");
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          __name(dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay, "dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay");
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          __name(findInstanceBlockingEvent, "findInstanceBlockingEvent");
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          __name(getEventPriority, "getEventPriority");
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          __name(addEventBubbleListener, "addEventBubbleListener");
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          __name(addEventCaptureListener, "addEventCaptureListener");
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          __name(addEventCaptureListenerWithPassiveFlag, "addEventCaptureListenerWithPassiveFlag");
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          __name(addEventBubbleListenerWithPassiveFlag, "addEventBubbleListenerWithPassiveFlag");
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          __name(initialize, "initialize");
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          __name(reset, "reset");
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          __name(getData, "getData");
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          __name(getText, "getText");
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          __name(getEventCharCode, "getEventCharCode");
          function functionThatReturnsTrue() {
            return true;
          }
          __name(functionThatReturnsTrue, "functionThatReturnsTrue");
          function functionThatReturnsFalse() {
            return false;
          }
          __name(functionThatReturnsFalse, "functionThatReturnsFalse");
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            __name(SyntheticBaseEvent, "SyntheticBaseEvent");
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          __name(createSyntheticEvent, "createSyntheticEvent");
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          __name(updateMouseMovementPolyfillState, "updateMouseMovementPolyfillState");
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          __name(getEventKey, "getEventKey");
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          __name(modifierStateGetter, "modifierStateGetter");
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          __name(getEventModifierState, "getEventModifierState");
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          __name(registerEvents, "registerEvents");
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          __name(isKeypressCommand, "isKeypressCommand");
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          __name(getCompositionEventType, "getCompositionEventType");
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          __name(isFallbackCompositionStart, "isFallbackCompositionStart");
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          __name(isFallbackCompositionEnd, "isFallbackCompositionEnd");
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          __name(getDataFromCustomEvent, "getDataFromCustomEvent");
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          __name(isUsingKoreanIME, "isUsingKoreanIME");
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          __name(extractCompositionEvent, "extractCompositionEvent");
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          __name(getNativeBeforeInputChars, "getNativeBeforeInputChars");
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          __name(getFallbackBeforeInputChars, "getFallbackBeforeInputChars");
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          __name(extractBeforeInputEvent, "extractBeforeInputEvent");
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          __name(extractEvents, "extractEvents");
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          __name(isTextInputElement, "isTextInputElement");
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          __name(isEventSupported, "isEventSupported");
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          __name(registerEvents$1, "registerEvents$1");
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          __name(createAndAccumulateChangeEvent, "createAndAccumulateChangeEvent");
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          __name(shouldUseChangeEvent, "shouldUseChangeEvent");
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          __name(manualDispatchChangeEvent, "manualDispatchChangeEvent");
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          __name(runEventInBatch, "runEventInBatch");
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          __name(getInstIfValueChanged, "getInstIfValueChanged");
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          __name(getTargetInstForChangeEvent, "getTargetInstForChangeEvent");
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          __name(startWatchingForValueChange, "startWatchingForValueChange");
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          __name(stopWatchingForValueChange, "stopWatchingForValueChange");
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          __name(handlePropertyChange, "handlePropertyChange");
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          __name(handleEventsForInputEventPolyfill, "handleEventsForInputEventPolyfill");
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          __name(getTargetInstForInputEventPolyfill, "getTargetInstForInputEventPolyfill");
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          __name(shouldUseClickEvent, "shouldUseClickEvent");
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          __name(getTargetInstForClickEvent, "getTargetInstForClickEvent");
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          __name(getTargetInstForInputOrChangeEvent, "getTargetInstForInputOrChangeEvent");
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          __name(handleControlledInputBlur, "handleControlledInputBlur");
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          __name(extractEvents$1, "extractEvents$1");
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          __name(registerEvents$2, "registerEvents$2");
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          __name(extractEvents$2, "extractEvents$2");
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          __name(is, "is");
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty13.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          __name(shallowEqual, "shallowEqual");
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          __name(getLeafNode, "getLeafNode");
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          __name(getSiblingNode, "getSiblingNode");
          function getNodeForCharacterOffset(root3, offset) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          __name(getNodeForCharacterOffset, "getNodeForCharacterOffset");
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          __name(getOffsets, "getOffsets");
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          __name(getModernOffsetsFromPoints, "getModernOffsetsFromPoints");
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range2 = doc.createRange();
              range2.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range2);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range2.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range2);
              }
            }
          }
          __name(setOffsets, "setOffsets");
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          __name(isTextNode, "isTextNode");
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          __name(containsNode, "containsNode");
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          __name(isInDocument, "isInDocument");
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          __name(isSameOriginFrame, "isSameOriginFrame");
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          __name(getActiveElementDeep, "getActiveElementDeep");
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          __name(hasSelectionCapabilities, "hasSelectionCapabilities");
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          __name(getSelectionInformation, "getSelectionInformation");
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          __name(restoreSelection, "restoreSelection");
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          __name(getSelection, "getSelection");
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          __name(setSelection, "setSelection");
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          __name(registerEvents$3, "registerEvents$3");
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          __name(getSelection$1, "getSelection$1");
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          __name(getEventTargetDocument, "getEventTargetDocument");
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          __name(constructSelectEvent, "constructSelectEvent");
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          __name(extractEvents$3, "extractEvents$3");
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          __name(makePrefixMap, "makePrefixMap");
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          __name(getVendorPrefixedEventName, "getVendorPrefixedEventName");
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          __name(registerSimpleEvent, "registerSimpleEvent");
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          __name(registerSimpleEvents, "registerSimpleEvents");
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          __name(extractEvents$4, "extractEvents$4");
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          __name(extractEvents$5, "extractEvents$5");
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          __name(executeDispatch, "executeDispatch");
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          __name(processDispatchQueueItemsInOrder, "processDispatchQueueItemsInOrder");
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          __name(processDispatchQueue, "processDispatchQueue");
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          __name(dispatchEventsForPlugins, "dispatchEventsForPlugins");
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          __name(listenToNonDelegatedEvent, "listenToNonDelegatedEvent");
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          __name(listenToNativeEvent, "listenToNativeEvent");
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          __name(listenToAllSupportedEvents, "listenToAllSupportedEvents");
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          __name(addTrappedEventListener, "addTrappedEventListener");
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          __name(isMatchingRootContainer, "isMatchingRootContainer");
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          __name(dispatchEventForPluginEventSystem, "dispatchEventForPluginEventSystem");
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          __name(createDispatchListener, "createDispatchListener");
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          __name(accumulateSinglePhaseListeners, "accumulateSinglePhaseListeners");
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          __name(accumulateTwoPhaseListeners, "accumulateTwoPhaseListeners");
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          __name(getParent, "getParent");
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          __name(getLowestCommonAncestor, "getLowestCommonAncestor");
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          __name(accumulateEnterLeaveListenersForEvent, "accumulateEnterLeaveListenersForEvent");
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          __name(accumulateEnterLeaveTwoPhaseListeners, "accumulateEnterLeaveTwoPhaseListeners");
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          __name(getListenerSetKey, "getListenerSetKey");
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = /* @__PURE__ */ __name(function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            }, "validatePropertiesInDevelopment");
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = /* @__PURE__ */ __name(function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            }, "warnForPropDifference");
            warnForExtraAttributes = /* @__PURE__ */ __name(function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names2 = [];
              attributeNames.forEach(function(name) {
                names2.push(name);
              });
              error("Extra attributes from the server: %s", names2);
            }, "warnForExtraAttributes");
            warnForInvalidEventListener = /* @__PURE__ */ __name(function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            }, "warnForInvalidEventListener");
            normalizeHTML = /* @__PURE__ */ __name(function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            }, "normalizeHTML");
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          __name(normalizeMarkupForTextOrAttribute, "normalizeMarkupForTextOrAttribute");
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          __name(checkForUnmatchedText, "checkForUnmatchedText");
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          __name(getOwnerDocumentFromRootContainer, "getOwnerDocumentFromRootContainer");
          function noop() {
          }
          __name(noop, "noop");
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          __name(trapClickOnNonInteractiveElement, "trapClickOnNonInteractiveElement");
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          __name(setInitialDOMProperties, "setInitialDOMProperties");
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          __name(updateDOMProperties, "updateDOMProperties");
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty13.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          __name(createElement, "createElement");
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          __name(createTextNode, "createTextNode");
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          __name(setInitialProperties, "setInitialProperties");
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          __name(diffProperties, "diffProperties");
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          __name(updateProperties, "updateProperties");
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          __name(getPossibleStandardName, "getPossibleStandardName");
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          __name(diffHydratedProperties, "diffHydratedProperties");
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          __name(diffHydratedText, "diffHydratedText");
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          __name(warnForDeletedHydratableElement, "warnForDeletedHydratableElement");
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          __name(warnForDeletedHydratableText, "warnForDeletedHydratableText");
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          __name(warnForInsertedHydratedElement, "warnForInsertedHydratedElement");
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          __name(warnForInsertedHydratedText, "warnForInsertedHydratedText");
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          __name(restoreControlledState$3, "restoreControlledState$3");
          var validateDOMNesting = /* @__PURE__ */ __name(function() {
          }, "validateDOMNesting");
          var updatedAncestorInfo = /* @__PURE__ */ __name(function() {
          }, "updatedAncestorInfo");
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = /* @__PURE__ */ __name(function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            }, "updatedAncestorInfo");
            var isTagValidWithParent = /* @__PURE__ */ __name(function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            }, "isTagValidWithParent");
            var findInvalidAncestorForTag = /* @__PURE__ */ __name(function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            }, "findInvalidAncestorForTag");
            var didWarn$1 = {};
            validateDOMNesting = /* @__PURE__ */ __name(function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            }, "validateDOMNesting");
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          __name(getRootHostContext, "getRootHostContext");
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          __name(getChildHostContext, "getChildHostContext");
          function getPublicInstance(instance) {
            return instance;
          }
          __name(getPublicInstance, "getPublicInstance");
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          __name(prepareForCommit, "prepareForCommit");
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          __name(resetAfterCommit, "resetAfterCommit");
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          __name(createInstance, "createInstance");
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          __name(appendInitialChild, "appendInitialChild");
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          __name(finalizeInitialChildren, "finalizeInitialChildren");
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          __name(prepareUpdate, "prepareUpdate");
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          __name(shouldSetTextContent, "shouldSetTextContent");
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          __name(createTextInstance, "createTextInstance");
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          __name(getCurrentEventPriority, "getCurrentEventPriority");
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          __name(handleErrorInNextTick, "handleErrorInNextTick");
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          __name(commitMount, "commitMount");
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          __name(commitUpdate, "commitUpdate");
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          __name(resetTextContent, "resetTextContent");
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          __name(commitTextUpdate, "commitTextUpdate");
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          __name(appendChild, "appendChild");
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          __name(appendChildToContainer, "appendChildToContainer");
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          __name(insertBefore, "insertBefore");
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          __name(insertInContainerBefore, "insertInContainerBefore");
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          __name(removeChild, "removeChild");
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          __name(removeChildFromContainer, "removeChildFromContainer");
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          __name(clearSuspenseBoundary, "clearSuspenseBoundary");
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          __name(clearSuspenseBoundaryFromContainer, "clearSuspenseBoundaryFromContainer");
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          __name(hideInstance, "hideInstance");
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          __name(hideTextInstance, "hideTextInstance");
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          __name(unhideInstance, "unhideInstance");
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          __name(unhideTextInstance, "unhideTextInstance");
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          __name(clearContainer, "clearContainer");
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          __name(canHydrateInstance, "canHydrateInstance");
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          __name(canHydrateTextInstance, "canHydrateTextInstance");
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          __name(canHydrateSuspenseInstance, "canHydrateSuspenseInstance");
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          __name(isSuspenseInstancePending, "isSuspenseInstancePending");
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          __name(isSuspenseInstanceFallback, "isSuspenseInstanceFallback");
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          __name(getSuspenseInstanceFallbackErrorDetails, "getSuspenseInstanceFallbackErrorDetails");
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          __name(registerSuspenseInstanceRetry, "registerSuspenseInstanceRetry");
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          __name(getNextHydratable, "getNextHydratable");
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          __name(getNextHydratableSibling, "getNextHydratableSibling");
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          __name(getFirstHydratableChild, "getFirstHydratableChild");
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          __name(getFirstHydratableChildWithinContainer, "getFirstHydratableChildWithinContainer");
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          __name(getFirstHydratableChildWithinSuspenseInstance, "getFirstHydratableChildWithinSuspenseInstance");
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          __name(hydrateInstance, "hydrateInstance");
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          __name(hydrateTextInstance, "hydrateTextInstance");
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          __name(hydrateSuspenseInstance, "hydrateSuspenseInstance");
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          __name(getNextHydratableInstanceAfterSuspenseInstance, "getNextHydratableInstanceAfterSuspenseInstance");
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          __name(getParentSuspenseInstance, "getParentSuspenseInstance");
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          __name(commitHydratedContainer, "commitHydratedContainer");
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          __name(commitHydratedSuspenseInstance, "commitHydratedSuspenseInstance");
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          __name(shouldDeleteUnhydratedTailInstances, "shouldDeleteUnhydratedTailInstances");
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          __name(didNotMatchHydratedContainerTextInstance, "didNotMatchHydratedContainerTextInstance");
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          __name(didNotMatchHydratedTextInstance, "didNotMatchHydratedTextInstance");
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          __name(didNotHydrateInstanceWithinContainer, "didNotHydrateInstanceWithinContainer");
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          __name(didNotHydrateInstanceWithinSuspenseInstance, "didNotHydrateInstanceWithinSuspenseInstance");
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          __name(didNotHydrateInstance, "didNotHydrateInstance");
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          __name(didNotFindHydratableInstanceWithinContainer, "didNotFindHydratableInstanceWithinContainer");
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          __name(didNotFindHydratableTextInstanceWithinContainer, "didNotFindHydratableTextInstanceWithinContainer");
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          __name(didNotFindHydratableInstanceWithinSuspenseInstance, "didNotFindHydratableInstanceWithinSuspenseInstance");
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          __name(didNotFindHydratableTextInstanceWithinSuspenseInstance, "didNotFindHydratableTextInstanceWithinSuspenseInstance");
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          __name(didNotFindHydratableInstance, "didNotFindHydratableInstance");
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          __name(didNotFindHydratableTextInstance, "didNotFindHydratableTextInstance");
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          __name(errorHydratingContainer, "errorHydratingContainer");
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          __name(preparePortalMount, "preparePortalMount");
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          __name(detachDeletedInstance, "detachDeletedInstance");
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          __name(precacheFiberNode, "precacheFiberNode");
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          __name(markContainerAsRoot, "markContainerAsRoot");
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          __name(unmarkContainerAsRoot, "unmarkContainerAsRoot");
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          __name(isContainerMarkedAsRoot, "isContainerMarkedAsRoot");
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          __name(getClosestInstanceFromNode, "getClosestInstanceFromNode");
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          __name(getInstanceFromNode, "getInstanceFromNode");
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          __name(getNodeFromInstance, "getNodeFromInstance");
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          __name(getFiberCurrentPropsFromNode, "getFiberCurrentPropsFromNode");
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          __name(updateFiberProps, "updateFiberProps");
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          __name(getEventListenerSet, "getEventListenerSet");
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement, "setCurrentlyValidatingElement");
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty13);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          __name(checkPropTypes, "checkPropTypes");
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          __name(createCursor, "createCursor");
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          __name(pop, "pop");
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          __name(push, "push");
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component6, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component6)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          __name(getUnmaskedContext, "getUnmaskedContext");
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          __name(cacheContext, "cacheContext");
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          __name(getMaskedContext, "getMaskedContext");
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          __name(hasContextChanged, "hasContextChanged");
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          __name(isContextProvider, "isContextProvider");
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          __name(popContext, "popContext");
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          __name(popTopLevelContextObject, "popTopLevelContextObject");
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          __name(pushTopLevelContextObject, "pushTopLevelContextObject");
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          __name(processChildContext, "processChildContext");
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          __name(pushContextProvider, "pushContextProvider");
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          __name(invalidateContextProvider, "invalidateContextProvider");
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component6 = node.type;
                    if (isContextProvider(Component6)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          __name(findCurrentUnmaskedContext, "findCurrentUnmaskedContext");
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          __name(scheduleSyncCallback, "scheduleSyncCallback");
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          __name(scheduleLegacySyncCallback, "scheduleLegacySyncCallback");
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          __name(flushSyncCallbacksOnlyInLegacyMode, "flushSyncCallbacksOnlyInLegacyMode");
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          __name(flushSyncCallbacks, "flushSyncCallbacks");
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          __name(isForkedChild, "isForkedChild");
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          __name(getForksAtLevel, "getForksAtLevel");
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          __name(getTreeId, "getTreeId");
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          __name(pushTreeFork, "pushTreeFork");
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          __name(pushTreeId, "pushTreeId");
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          __name(pushMaterializedTreeId, "pushMaterializedTreeId");
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          __name(getBitLength, "getBitLength");
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          __name(getLeadingBit, "getLeadingBit");
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          __name(popTreeContext, "popTreeContext");
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          __name(getSuspendedTreeContext, "getSuspendedTreeContext");
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          __name(restoreSuspendedTreeContext, "restoreSuspendedTreeContext");
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          __name(warnIfNotHydrating, "warnIfNotHydrating");
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          __name(warnIfHydrating, "warnIfHydrating");
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          __name(markDidThrowWhileHydratingDEV, "markDidThrowWhileHydratingDEV");
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          __name(didSuspendOrErrorWhileHydratingDEV, "didSuspendOrErrorWhileHydratingDEV");
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          __name(enterHydrationState, "enterHydrationState");
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          __name(reenterHydrationStateFromDehydratedSuspenseInstance, "reenterHydrationStateFromDehydratedSuspenseInstance");
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          __name(warnUnhydratedInstance, "warnUnhydratedInstance");
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          __name(deleteHydratableInstance, "deleteHydratableInstance");
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          __name(warnNonhydratedInstance, "warnNonhydratedInstance");
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          __name(insertNonHydratedInstance, "insertNonHydratedInstance");
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          __name(tryHydrate, "tryHydrate");
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          __name(shouldClientRenderOnMismatch, "shouldClientRenderOnMismatch");
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          __name(throwOnHydrationMismatch, "throwOnHydrationMismatch");
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          __name(tryToClaimNextHydratableInstance, "tryToClaimNextHydratableInstance");
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          __name(prepareToHydrateHostInstance, "prepareToHydrateHostInstance");
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          __name(prepareToHydrateHostTextInstance, "prepareToHydrateHostTextInstance");
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          __name(prepareToHydrateHostSuspenseInstance, "prepareToHydrateHostSuspenseInstance");
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          __name(skipPastDehydratedSuspenseInstance, "skipPastDehydratedSuspenseInstance");
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          __name(popToNextHostParent, "popToNextHostParent");
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          __name(popHydrationState, "popHydrationState");
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          __name(hasUnhydratedTailNodes, "hasUnhydratedTailNodes");
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          __name(warnIfUnhydratedTailNodes, "warnIfUnhydratedTailNodes");
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          __name(resetHydrationState, "resetHydrationState");
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          __name(upgradeHydrationErrorsToRecoverable, "upgradeHydrationErrorsToRecoverable");
          function getIsHydrating() {
            return isHydrating;
          }
          __name(getIsHydrating, "getIsHydrating");
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          __name(queueHydrationError, "queueHydrationError");
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          __name(requestCurrentTransition, "requestCurrentTransition");
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = /* @__PURE__ */ __name(function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            }, "findStrictRoot");
            var setToSortedString = /* @__PURE__ */ __name(function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            }, "setToSortedString");
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component6, baseProps) {
            if (Component6 && Component6.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component6.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          __name(resolveDefaultProps, "resolveDefaultProps");
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          __name(resetContextDependencies, "resetContextDependencies");
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          __name(enterDisallowedContextReadInDEV, "enterDisallowedContextReadInDEV");
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          __name(exitDisallowedContextReadInDEV, "exitDisallowedContextReadInDEV");
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          __name(pushProvider, "pushProvider");
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          __name(popProvider, "popProvider");
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          __name(scheduleContextWorkOnParentPath, "scheduleContextWorkOnParentPath");
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          __name(propagateContextChange, "propagateContextChange");
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          __name(propagateContextChange_eager, "propagateContextChange_eager");
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          __name(prepareToReadContext, "prepareToReadContext");
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          __name(readContext, "readContext");
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          __name(pushConcurrentUpdateQueue, "pushConcurrentUpdateQueue");
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          __name(finishQueueingConcurrentUpdates, "finishQueueingConcurrentUpdates");
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          __name(enqueueConcurrentHookUpdate, "enqueueConcurrentHookUpdate");
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          __name(enqueueConcurrentHookUpdateAndEagerlyBailout, "enqueueConcurrentHookUpdateAndEagerlyBailout");
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          __name(enqueueConcurrentClassUpdate, "enqueueConcurrentClassUpdate");
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          __name(enqueueConcurrentRenderForLane, "enqueueConcurrentRenderForLane");
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          __name(markUpdateLaneFromFiberToRoot, "markUpdateLaneFromFiberToRoot");
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          __name(initializeUpdateQueue, "initializeUpdateQueue");
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone2 = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone2;
            }
          }
          __name(cloneUpdateQueue, "cloneUpdateQueue");
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          __name(createUpdate, "createUpdate");
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          __name(enqueueUpdate, "enqueueUpdate");
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          __name(entangleTransitions, "entangleTransitions");
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone2 = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone2;
                    } else {
                      newLast.next = clone2;
                      newLast = clone2;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          __name(enqueueCapturedUpdate, "enqueueCapturedUpdate");
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          __name(getStateFromUpdate, "getStateFromUpdate");
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone2 = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone2;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          __name(processUpdateQueue, "processUpdateQueue");
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          __name(callCallback, "callCallback");
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          __name(resetHasForceUpdateBeforeProcessing, "resetHasForceUpdateBeforeProcessing");
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          __name(checkHasForceUpdateAfterProcessing, "checkHasForceUpdateAfterProcessing");
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          __name(commitUpdateQueue, "commitUpdateQueue");
          var fakeInternalInstance = {};
          var emptyRefsObject = new React64.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = /* @__PURE__ */ __name(function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }, "warnOnInvalidCallback");
            warnOnUndefinedDerivedState = /* @__PURE__ */ __name(function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            }, "warnOnUndefinedDerivedState");
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          __name(applyDerivedStateFromProps, "applyDerivedStateFromProps");
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          __name(checkShouldComponentUpdate, "checkShouldComponentUpdate");
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          __name(checkClassInstance, "checkClassInstance");
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          __name(adoptClassInstance, "adoptClassInstance");
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          __name(constructClassInstance, "constructClassInstance");
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          __name(callComponentWillMount, "callComponentWillMount");
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          __name(callComponentWillReceiveProps, "callComponentWillReceiveProps");
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          __name(mountClassInstance, "mountClassInstance");
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          __name(resumeMountClassInstance, "resumeMountClassInstance");
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          __name(updateClassInstance, "updateClassInstance");
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = /* @__PURE__ */ __name(function(child, returnFiber) {
          }, "warnForMissingKey");
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = /* @__PURE__ */ __name(function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            }, "warnForMissingKey");
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = /* @__PURE__ */ __name(function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                }, "ref");
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          __name(coerceRef, "coerceRef");
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          __name(throwOnInvalidObjectType, "throwOnInvalidObjectType");
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          __name(warnOnFunctionType, "warnOnFunctionType");
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          __name(resolveLazy, "resolveLazy");
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            __name(deleteChild, "deleteChild");
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            __name(deleteRemainingChildren, "deleteRemainingChildren");
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            __name(mapRemainingChildren, "mapRemainingChildren");
            function useFiber(fiber, pendingProps) {
              var clone2 = createWorkInProgress(fiber, pendingProps);
              clone2.index = 0;
              clone2.sibling = null;
              return clone2;
            }
            __name(useFiber, "useFiber");
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            __name(placeChild, "placeChild");
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            __name(placeSingleChild, "placeSingleChild");
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            __name(updateTextNode, "updateTextNode");
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            __name(updateElement, "updateElement");
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            __name(updatePortal, "updatePortal");
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            __name(updateFragment2, "updateFragment");
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            __name(createChild, "createChild");
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            __name(updateSlot, "updateSlot");
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            __name(updateFromMap, "updateFromMap");
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            __name(warnOnInvalidKey, "warnOnInvalidKey");
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            __name(reconcileChildrenArray, "reconcileChildrenArray");
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            __name(reconcileChildrenIterator, "reconcileChildrenIterator");
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            __name(reconcileSingleTextNode, "reconcileSingleTextNode");
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            __name(reconcileSingleElement, "reconcileSingleElement");
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            __name(reconcileSinglePortal, "reconcileSinglePortal");
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            __name(reconcileChildFibers2, "reconcileChildFibers");
            return reconcileChildFibers2;
          }
          __name(ChildReconciler, "ChildReconciler");
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          __name(cloneChildFibers, "cloneChildFibers");
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          __name(resetChildFibers, "resetChildFibers");
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          __name(requiredContext, "requiredContext");
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          __name(getRootHostContainer, "getRootHostContainer");
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          __name(pushHostContainer, "pushHostContainer");
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          __name(popHostContainer, "popHostContainer");
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          __name(getHostContext, "getHostContext");
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          __name(pushHostContext, "pushHostContext");
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          __name(popHostContext, "popHostContext");
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          __name(hasSuspenseContext, "hasSuspenseContext");
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          __name(setDefaultShallowSuspenseContext, "setDefaultShallowSuspenseContext");
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          __name(setShallowSuspenseContext, "setShallowSuspenseContext");
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          __name(addSubtreeSuspenseContext, "addSubtreeSuspenseContext");
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          __name(pushSuspenseContext, "pushSuspenseContext");
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          __name(popSuspenseContext, "popSuspenseContext");
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          __name(shouldCaptureSuspense, "shouldCaptureSuspense");
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          __name(findFirstSuspended, "findFirstSuspended");
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          __name(resetWorkInProgressVersions, "resetWorkInProgressVersions");
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          __name(registerMutableSourceForHydration, "registerMutableSourceForHydration");
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          __name(mountHookTypesDev, "mountHookTypesDev");
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          __name(updateHookTypesDev, "updateHookTypesDev");
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          __name(checkDepsAreArrayDev, "checkDepsAreArrayDev");
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          __name(warnOnHookMismatchInDev, "warnOnHookMismatchInDev");
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          __name(throwInvalidHookError, "throwInvalidHookError");
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          __name(areHookInputsEqual, "areHookInputsEqual");
          function renderWithHooks(current2, workInProgress2, Component6, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component6(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component6(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          __name(renderWithHooks, "renderWithHooks");
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          __name(checkDidRenderIdHook, "checkDidRenderIdHook");
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          __name(bailoutHooks, "bailoutHooks");
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          __name(resetHooksAfterThrow, "resetHooksAfterThrow");
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          __name(mountWorkInProgressHook, "mountWorkInProgressHook");
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          __name(updateWorkInProgressHook, "updateWorkInProgressHook");
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          __name(createFunctionComponentUpdateQueue, "createFunctionComponentUpdateQueue");
          function basicStateReducer(state, action2) {
            return typeof action2 === "function" ? action2(state) : action2;
          }
          __name(basicStateReducer, "basicStateReducer");
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          __name(mountReducer, "mountReducer");
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone2 = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone2;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone2;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action2 = update.action;
                    newState = reducer(newState, action2);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          __name(updateReducer, "updateReducer");
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action2 = update.action;
                newState = reducer(newState, action2);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          __name(rerenderReducer, "rerenderReducer");
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          __name(mountMutableSource, "mountMutableSource");
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          __name(updateMutableSource, "updateMutableSource");
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          __name(mountSyncExternalStore, "mountSyncExternalStore");
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          __name(updateSyncExternalStore, "updateSyncExternalStore");
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          __name(pushStoreConsistencyCheck, "pushStoreConsistencyCheck");
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          __name(updateStoreInstance, "updateStoreInstance");
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = /* @__PURE__ */ __name(function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            }, "handleStoreChange");
            return subscribe(handleStoreChange);
          }
          __name(subscribeToStore, "subscribeToStore");
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          __name(checkIfSnapshotChanged, "checkIfSnapshotChanged");
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          __name(forceStoreRerender, "forceStoreRerender");
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          __name(mountState, "mountState");
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          __name(updateState, "updateState");
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          __name(rerenderState, "rerenderState");
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          __name(pushEffect, "pushEffect");
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          __name(mountRef, "mountRef");
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          __name(updateRef, "updateRef");
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          __name(mountEffectImpl, "mountEffectImpl");
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          __name(updateEffectImpl, "updateEffectImpl");
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          __name(mountEffect, "mountEffect");
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          __name(updateEffect, "updateEffect");
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          __name(mountInsertionEffect, "mountInsertionEffect");
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          __name(updateInsertionEffect, "updateInsertionEffect");
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          __name(mountLayoutEffect, "mountLayoutEffect");
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          __name(updateLayoutEffect, "updateLayoutEffect");
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          __name(imperativeHandleEffect, "imperativeHandleEffect");
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          __name(mountImperativeHandle, "mountImperativeHandle");
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          __name(updateImperativeHandle, "updateImperativeHandle");
          function mountDebugValue(value, formatterFn) {
          }
          __name(mountDebugValue, "mountDebugValue");
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          __name(mountCallback, "mountCallback");
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          __name(updateCallback, "updateCallback");
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          __name(mountMemo, "mountMemo");
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          __name(updateMemo, "updateMemo");
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          __name(mountDeferredValue, "mountDeferredValue");
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          __name(updateDeferredValue, "updateDeferredValue");
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          __name(rerenderDeferredValue, "rerenderDeferredValue");
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          __name(updateDeferredValueImpl, "updateDeferredValueImpl");
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          __name(startTransition, "startTransition");
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          __name(mountTransition, "mountTransition");
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          __name(updateTransition, "updateTransition");
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          __name(rerenderTransition, "rerenderTransition");
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          __name(getIsUpdatingOpaqueValueInRenderPhaseInDEV, "getIsUpdatingOpaqueValueInRenderPhaseInDEV");
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          __name(mountId, "mountId");
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          __name(updateId, "updateId");
          function dispatchReducerAction(fiber, queue, action2) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action: action2,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          __name(dispatchReducerAction, "dispatchReducerAction");
          function dispatchSetState(fiber, queue, action2) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action: action2,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action2);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          __name(dispatchSetState, "dispatchSetState");
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          __name(isRenderPhaseUpdate, "isRenderPhaseUpdate");
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          __name(enqueueRenderPhaseUpdate, "enqueueRenderPhaseUpdate");
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          __name(entangleTransitionUpdate, "entangleTransitionUpdate");
          function markUpdateInDevTools(fiber, lane, action2) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          __name(markUpdateInDevTools, "markUpdateInDevTools");
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = /* @__PURE__ */ __name(function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }, "warnInvalidContextAccess");
            var warnInvalidHookAccess = /* @__PURE__ */ __name(function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }, "warnInvalidHookAccess");
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          __name(isCurrentUpdateNested, "isCurrentUpdateNested");
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          __name(markNestedUpdateScheduled, "markNestedUpdateScheduled");
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          __name(resetNestedUpdateFlag, "resetNestedUpdateFlag");
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          __name(syncNestedUpdateFlag, "syncNestedUpdateFlag");
          function getCommitTime() {
            return commitTime;
          }
          __name(getCommitTime, "getCommitTime");
          function recordCommitTime() {
            commitTime = now$1();
          }
          __name(recordCommitTime, "recordCommitTime");
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          __name(startProfilerTimer, "startProfilerTimer");
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          __name(stopProfilerTimerIfRunning, "stopProfilerTimerIfRunning");
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          __name(stopProfilerTimerIfRunningAndRecordDelta, "stopProfilerTimerIfRunningAndRecordDelta");
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          __name(recordLayoutEffectDuration, "recordLayoutEffectDuration");
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          __name(recordPassiveEffectDuration, "recordPassiveEffectDuration");
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          __name(startLayoutEffectTimer, "startLayoutEffectTimer");
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          __name(startPassiveEffectTimer, "startPassiveEffectTimer");
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          __name(transferActualDuration, "transferActualDuration");
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          __name(createCapturedValueAtFiber, "createCapturedValueAtFiber");
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          __name(createCapturedValue, "createCapturedValue");
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          __name(showErrorDialog, "showErrorDialog");
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          __name(logCapturedError, "logCapturedError");
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          __name(createRootErrorUpdate, "createRootErrorUpdate");
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = /* @__PURE__ */ __name(function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              }, "callback");
            }
            return update;
          }
          __name(createClassErrorUpdate, "createClassErrorUpdate");
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          __name(attachPingListener, "attachPingListener");
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          __name(attachRetryListener, "attachRetryListener");
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          __name(resetSuspendedComponent, "resetSuspendedComponent");
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          __name(getNearestSuspenseBoundaryToCapture, "getNearestSuspenseBoundaryToCapture");
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          __name(markSuspenseBoundaryShouldCapture, "markSuspenseBoundaryShouldCapture");
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          __name(throwException, "throwException");
          function getSuspendedCache() {
            {
              return null;
            }
          }
          __name(getSuspendedCache, "getSuspendedCache");
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          __name(reconcileChildren, "reconcileChildren");
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          __name(forceUnmountCurrentAndReconcile, "forceUnmountCurrentAndReconcile");
          function updateForwardRef(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component6.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component6)
                  );
                }
              }
            }
            var render4 = Component6.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateForwardRef, "updateForwardRef");
          function updateMemoComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component6.type;
              if (isSimpleFunctionComponent(type) && Component6.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component6.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component6.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component6.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component6.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          __name(updateMemoComponent, "updateMemoComponent");
          function updateSimpleMemoComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component6, nextProps, renderLanes2);
          }
          __name(updateSimpleMemoComponent, "updateSimpleMemoComponent");
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateOffscreenComponent, "updateOffscreenComponent");
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateFragment, "updateFragment");
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateMode, "updateMode");
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateProfiler, "updateProfiler");
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          __name(markRef, "markRef");
          function updateFunctionComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component6.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component6)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component6, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component6, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component6, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateFunctionComponent, "updateFunctionComponent");
          function updateClassComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component6.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component6)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component6)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component6, nextProps);
              mountClassInstance(workInProgress2, Component6, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component6, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component6, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component6, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          __name(updateClassComponent, "updateClassComponent");
          function finishClassComponent(current2, workInProgress2, Component6, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component6, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component6.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component6, true);
            }
            return workInProgress2.child;
          }
          __name(finishClassComponent, "finishClassComponent");
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          __name(pushHostRootContext, "pushHostRootContext");
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          __name(updateHostRoot, "updateHostRoot");
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(mountHostRootWithoutHydrating, "mountHostRootWithoutHydrating");
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateHostComponent, "updateHostComponent");
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          __name(updateHostText, "updateHostText");
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component6 = init(payload);
            workInProgress2.type = Component6;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component6);
            var resolvedProps = resolveDefaultProps(Component6, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component6);
                  workInProgress2.type = Component6 = resolveFunctionForHotReloading(Component6);
                }
                child = updateFunctionComponent(null, workInProgress2, Component6, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component6 = resolveClassForHotReloading(Component6);
                }
                child = updateClassComponent(null, workInProgress2, Component6, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component6 = resolveForwardRefForHotReloading(Component6);
                }
                child = updateForwardRef(null, workInProgress2, Component6, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component6.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component6)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component6,
                  resolveDefaultProps(Component6.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component6 !== null && typeof Component6 === "object" && Component6.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component6 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          __name(mountLazyComponent, "mountLazyComponent");
          function mountIncompleteClassComponent(_current, workInProgress2, Component6, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component6)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component6, nextProps);
            mountClassInstance(workInProgress2, Component6, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component6, true, hasContext, renderLanes2);
          }
          __name(mountIncompleteClassComponent, "mountIncompleteClassComponent");
          function mountIndeterminateComponent(_current, workInProgress2, Component6, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component6, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component6.prototype && typeof Component6.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component6, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component6)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component6, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component6, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component6, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component6);
              }
              return workInProgress2.child;
            }
          }
          __name(mountIndeterminateComponent, "mountIndeterminateComponent");
          function validateFunctionComponentInDev(workInProgress2, Component6) {
            {
              if (Component6) {
                if (Component6.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component6.displayName || Component6.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component6.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component6.contextType === "object" && Component6.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          __name(validateFunctionComponentInDev, "validateFunctionComponentInDev");
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          __name(mountSuspenseOffscreenState, "mountSuspenseOffscreenState");
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          __name(updateSuspenseOffscreenState, "updateSuspenseOffscreenState");
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          __name(shouldRemainOnFallback, "shouldRemainOnFallback");
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          __name(getRemainingWorkInPrimaryTree, "getRemainingWorkInPrimaryTree");
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          __name(updateSuspenseComponent, "updateSuspenseComponent");
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          __name(mountSuspensePrimaryChildren, "mountSuspensePrimaryChildren");
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          __name(mountSuspenseFallbackChildren, "mountSuspenseFallbackChildren");
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          __name(mountWorkInProgressOffscreenFiber, "mountWorkInProgressOffscreenFiber");
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          __name(updateWorkInProgressOffscreenFiber, "updateWorkInProgressOffscreenFiber");
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          __name(updateSuspensePrimaryChildren, "updateSuspensePrimaryChildren");
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          __name(updateSuspenseFallbackChildren, "updateSuspenseFallbackChildren");
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          __name(retrySuspenseComponentWithoutHydrating, "retrySuspenseComponentWithoutHydrating");
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          __name(mountSuspenseFallbackAfterRetryWithoutHydrating, "mountSuspenseFallbackAfterRetryWithoutHydrating");
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          __name(mountDehydratedSuspenseComponent, "mountDehydratedSuspenseComponent");
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          __name(updateDehydratedSuspenseComponent, "updateDehydratedSuspenseComponent");
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          __name(scheduleSuspenseWorkOnFiber, "scheduleSuspenseWorkOnFiber");
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          __name(propagateSuspenseContextChange, "propagateSuspenseContextChange");
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          __name(findLastContentRow, "findLastContentRow");
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          __name(validateRevealOrder, "validateRevealOrder");
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          __name(validateTailOptions, "validateTailOptions");
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          __name(validateSuspenseListNestedChild, "validateSuspenseListNestedChild");
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray2(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          __name(validateSuspenseListChildren, "validateSuspenseListChildren");
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          __name(initSuspenseListRenderState, "initSuspenseListRenderState");
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          __name(updateSuspenseListComponent, "updateSuspenseListComponent");
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          __name(updatePortalComponent, "updatePortalComponent");
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateContextProvider, "updateContextProvider");
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render4 = newProps.children;
            {
              if (typeof render4 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render4(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateContextConsumer, "updateContextConsumer");
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          __name(markWorkInProgressReceivedUpdate, "markWorkInProgressReceivedUpdate");
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          __name(resetSuspendedCurrentOnMountInLegacyMode, "resetSuspendedCurrentOnMountInLegacyMode");
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          __name(bailoutOnAlreadyFinishedWork, "bailoutOnAlreadyFinishedWork");
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          __name(remountFiber, "remountFiber");
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          __name(checkScheduledUpdateOrContext, "checkScheduledUpdateOrContext");
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component6 = workInProgress2.type;
                if (isContextProvider(Component6)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          __name(attemptEarlyBailoutIfNoScheduledUpdate, "attemptEarlyBailoutIfNoScheduledUpdate");
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component6 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component6 ? unresolvedProps : resolveDefaultProps(Component6, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component6, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          __name(beginWork, "beginWork");
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          __name(markUpdate, "markUpdate");
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          __name(markRef$1, "markRef$1");
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = /* @__PURE__ */ __name(function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }, "appendAllChildren");
            updateHostContainer = /* @__PURE__ */ __name(function(current2, workInProgress2) {
            }, "updateHostContainer");
            updateHostComponent$1 = /* @__PURE__ */ __name(function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            }, "updateHostComponent$1");
            updateHostText$1 = /* @__PURE__ */ __name(function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            }, "updateHostText$1");
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          __name(cutOffTailIfNeeded, "cutOffTailIfNeeded");
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          __name(bubbleProperties, "bubbleProperties");
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          __name(completeDehydratedSuspenseBoundary, "completeDehydratedSuspenseBoundary");
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component6 = workInProgress2.type;
                if (isContextProvider(Component6)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now2();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          __name(completeWork, "completeWork");
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component6 = workInProgress2.type;
                if (isContextProvider(Component6)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          __name(unwindWork, "unwindWork");
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          __name(unwindInterruptedWork, "unwindInterruptedWork");
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          __name(reportUncaughtErrorInDEV, "reportUncaughtErrorInDEV");
          var callComponentWillUnmountWithTimer = /* @__PURE__ */ __name(function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          }, "callComponentWillUnmountWithTimer");
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          __name(safelyCallCommitHookLayoutEffectListMount, "safelyCallCommitHookLayoutEffectListMount");
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          __name(safelyCallComponentWillUnmount, "safelyCallComponentWillUnmount");
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          __name(safelyCallComponentDidMount, "safelyCallComponentDidMount");
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          __name(safelyAttachRef, "safelyAttachRef");
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          __name(safelyDetachRef, "safelyDetachRef");
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          __name(safelyCallDestroy, "safelyCallDestroy");
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          __name(commitBeforeMutationEffects, "commitBeforeMutationEffects");
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          __name(commitBeforeMutationEffects_begin, "commitBeforeMutationEffects_begin");
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          __name(commitBeforeMutationEffects_complete, "commitBeforeMutationEffects_complete");
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          __name(commitBeforeMutationEffectsOnFiber, "commitBeforeMutationEffectsOnFiber");
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          __name(commitHookEffectListUnmount, "commitHookEffectListUnmount");
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          __name(commitHookEffectListMount, "commitHookEffectListMount");
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          __name(commitPassiveEffectDurations, "commitPassiveEffectDurations");
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          __name(commitLayoutEffectOnFiber, "commitLayoutEffectOnFiber");
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          __name(reappearLayoutEffectsOnFiber, "reappearLayoutEffectsOnFiber");
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          __name(hideOrUnhideAllChildren, "hideOrUnhideAllChildren");
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          __name(commitAttachRef, "commitAttachRef");
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          __name(detachFiberMutation, "detachFiberMutation");
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          __name(detachFiberAfterEffects, "detachFiberAfterEffects");
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          __name(getHostParentFiber, "getHostParentFiber");
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          __name(isHostParent, "isHostParent");
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          __name(getHostSibling, "getHostSibling");
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          __name(commitPlacement, "commitPlacement");
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          __name(insertOrAppendPlacementNodeIntoContainer, "insertOrAppendPlacementNodeIntoContainer");
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          __name(insertOrAppendPlacementNode, "insertOrAppendPlacementNode");
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          __name(commitDeletionEffects, "commitDeletionEffects");
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          __name(recursivelyTraverseDeletionEffects, "recursivelyTraverseDeletionEffects");
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          __name(commitDeletionEffectsOnFiber, "commitDeletionEffectsOnFiber");
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          __name(commitSuspenseCallback, "commitSuspenseCallback");
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          __name(commitSuspenseHydrationCallbacks, "commitSuspenseHydrationCallbacks");
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          __name(attachSuspenseRetryListeners, "attachSuspenseRetryListeners");
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          __name(commitMutationEffects, "commitMutationEffects");
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          __name(recursivelyTraverseMutationEffects, "recursivelyTraverseMutationEffects");
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          __name(commitMutationEffectsOnFiber, "commitMutationEffectsOnFiber");
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          __name(commitReconciliationEffects, "commitReconciliationEffects");
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          __name(commitLayoutEffects, "commitLayoutEffects");
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          __name(commitLayoutEffects_begin, "commitLayoutEffects_begin");
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          __name(commitLayoutMountEffects_complete, "commitLayoutMountEffects_complete");
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          __name(disappearLayoutEffects_begin, "disappearLayoutEffects_begin");
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          __name(disappearLayoutEffects_complete, "disappearLayoutEffects_complete");
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          __name(reappearLayoutEffects_begin, "reappearLayoutEffects_begin");
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          __name(reappearLayoutEffects_complete, "reappearLayoutEffects_complete");
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          __name(commitPassiveMountEffects, "commitPassiveMountEffects");
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          __name(commitPassiveMountEffects_begin, "commitPassiveMountEffects_begin");
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          __name(commitPassiveMountEffects_complete, "commitPassiveMountEffects_complete");
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          __name(commitPassiveMountOnFiber, "commitPassiveMountOnFiber");
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          __name(commitPassiveUnmountEffects, "commitPassiveUnmountEffects");
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          __name(commitPassiveUnmountEffects_begin, "commitPassiveUnmountEffects_begin");
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          __name(commitPassiveUnmountEffects_complete, "commitPassiveUnmountEffects_complete");
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          __name(commitPassiveUnmountOnFiber, "commitPassiveUnmountOnFiber");
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          __name(commitPassiveUnmountEffectsInsideOfDeletedTree_begin, "commitPassiveUnmountEffectsInsideOfDeletedTree_begin");
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          __name(commitPassiveUnmountEffectsInsideOfDeletedTree_complete, "commitPassiveUnmountEffectsInsideOfDeletedTree_complete");
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          __name(commitPassiveUnmountInsideDeletedTreeOnFiber, "commitPassiveUnmountInsideDeletedTreeOnFiber");
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          __name(invokeLayoutEffectMountInDEV, "invokeLayoutEffectMountInDEV");
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          __name(invokePassiveEffectMountInDEV, "invokePassiveEffectMountInDEV");
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          __name(invokeLayoutEffectUnmountInDEV, "invokeLayoutEffectUnmountInDEV");
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          __name(invokePassiveEffectUnmountInDEV, "invokePassiveEffectUnmountInDEV");
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          __name(onCommitRoot$1, "onCommitRoot$1");
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          __name(isLegacyActEnvironment, "isLegacyActEnvironment");
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          __name(isConcurrentActEnvironment, "isConcurrentActEnvironment");
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          __name(resetRenderTimer, "resetRenderTimer");
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          __name(getRenderTargetTime, "getRenderTargetTime");
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          __name(getWorkInProgressRoot, "getWorkInProgressRoot");
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          __name(requestEventTime, "requestEventTime");
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          __name(requestUpdateLane, "requestUpdateLane");
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          __name(requestRetryLane, "requestRetryLane");
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          __name(scheduleUpdateOnFiber, "scheduleUpdateOnFiber");
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          __name(scheduleInitialHydrationOnRoot, "scheduleInitialHydrationOnRoot");
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          __name(isUnsafeClassRenderPhaseUpdate, "isUnsafeClassRenderPhaseUpdate");
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          __name(ensureRootIsScheduled, "ensureRootIsScheduled");
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now2());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now2());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now2());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          __name(performConcurrentWorkOnRoot, "performConcurrentWorkOnRoot");
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          __name(recoverFromConcurrentError, "recoverFromConcurrentError");
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          __name(queueRecoverableErrors, "queueRecoverableErrors");
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          __name(finishConcurrentRender, "finishConcurrentRender");
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          __name(isRenderConsistentWithExternalStores, "isRenderConsistentWithExternalStores");
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          __name(markRootSuspended$1, "markRootSuspended$1");
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now2());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now2());
            return null;
          }
          __name(performSyncWorkOnRoot, "performSyncWorkOnRoot");
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now2());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          __name(flushRoot, "flushRoot");
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          __name(batchedUpdates$1, "batchedUpdates$1");
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          __name(discreteUpdates, "discreteUpdates");
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          __name(flushSync, "flushSync");
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          __name(isAlreadyRendering, "isAlreadyRendering");
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          __name(pushRenderLanes, "pushRenderLanes");
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          __name(popRenderLanes, "popRenderLanes");
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          __name(prepareFreshStack, "prepareFreshStack");
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          __name(handleError, "handleError");
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          __name(pushDispatcher, "pushDispatcher");
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          __name(popDispatcher, "popDispatcher");
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          __name(markCommitTimeOfFallback, "markCommitTimeOfFallback");
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          __name(markSkippedUpdateLanes, "markSkippedUpdateLanes");
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          __name(renderDidSuspend, "renderDidSuspend");
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          __name(renderDidSuspendDelayIfPossible, "renderDidSuspendDelayIfPossible");
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          __name(renderDidError, "renderDidError");
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          __name(renderHasNotSuspendedYet, "renderHasNotSuspendedYet");
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          __name(renderRootSync, "renderRootSync");
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          __name(workLoopSync, "workLoopSync");
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          __name(renderRootConcurrent, "renderRootConcurrent");
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          __name(workLoopConcurrent, "workLoopConcurrent");
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          __name(performUnitOfWork, "performUnitOfWork");
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          __name(completeUnitOfWork, "completeUnitOfWork");
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          __name(commitRoot, "commitRoot");
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now2());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          __name(commitRootImpl, "commitRootImpl");
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          __name(flushPassiveEffects, "flushPassiveEffects");
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          __name(enqueuePendingPassiveProfilerEffect, "enqueuePendingPassiveProfilerEffect");
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          __name(flushPassiveEffectsImpl, "flushPassiveEffectsImpl");
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          __name(isAlreadyFailedLegacyErrorBoundary, "isAlreadyFailedLegacyErrorBoundary");
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          __name(markLegacyErrorBoundaryAsFailed, "markLegacyErrorBoundaryAsFailed");
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          __name(prepareToThrowUncaughtError, "prepareToThrowUncaughtError");
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          __name(captureCommitPhaseErrorOnRoot, "captureCommitPhaseErrorOnRoot");
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          __name(captureCommitPhaseError, "captureCommitPhaseError");
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          __name(pingSuspendedRoot, "pingSuspendedRoot");
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          __name(retryTimedOutBoundary, "retryTimedOutBoundary");
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          __name(retryDehydratedSuspenseBoundary, "retryDehydratedSuspenseBoundary");
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          __name(resolveRetryWakeable, "resolveRetryWakeable");
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          __name(jnd, "jnd");
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          __name(checkForNestedUpdates, "checkForNestedUpdates");
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          __name(flushRenderPhaseStrictModeWarningsInDEV, "flushRenderPhaseStrictModeWarningsInDEV");
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          __name(commitDoubleInvokeEffectsInDEV, "commitDoubleInvokeEffectsInDEV");
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          __name(invokeEffectsInDev, "invokeEffectsInDev");
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          __name(warnAboutUpdateOnNotYetMountedFiberInDEV, "warnAboutUpdateOnNotYetMountedFiberInDEV");
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = /* @__PURE__ */ __name(function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            }, "beginWork$1");
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          __name(warnAboutRenderPhaseUpdatesInDEV, "warnAboutRenderPhaseUpdatesInDEV");
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          __name(restorePendingUpdaters, "restorePendingUpdaters");
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          __name(scheduleCallback$1, "scheduleCallback$1");
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          __name(cancelCallback$1, "cancelCallback$1");
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          __name(shouldForceFlushFallbacksInDEV, "shouldForceFlushFallbacksInDEV");
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          __name(warnIfUpdatesNotWrappedWithActDEV, "warnIfUpdatesNotWrappedWithActDEV");
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          __name(warnIfSuspenseResolutionNotWrappedWithActDEV, "warnIfSuspenseResolutionNotWrappedWithActDEV");
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          __name(setIsRunningInsertionEffect, "setIsRunningInsertionEffect");
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = /* @__PURE__ */ __name(function(handler) {
            {
              resolveFamily = handler;
            }
          }, "setRefreshHandler");
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          __name(resolveFunctionForHotReloading, "resolveFunctionForHotReloading");
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          __name(resolveClassForHotReloading, "resolveClassForHotReloading");
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          __name(resolveForwardRefForHotReloading, "resolveForwardRefForHotReloading");
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          __name(isCompatibleFamilyForHotReloading, "isCompatibleFamilyForHotReloading");
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          __name(markFailedErrorBoundaryForHotReloading, "markFailedErrorBoundaryForHotReloading");
          var scheduleRefresh = /* @__PURE__ */ __name(function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          }, "scheduleRefresh");
          var scheduleRoot = /* @__PURE__ */ __name(function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          }, "scheduleRoot");
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          __name(scheduleFibersWithFamiliesRecursively, "scheduleFibersWithFamiliesRecursively");
          var findHostInstancesForRefresh = /* @__PURE__ */ __name(function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          }, "findHostInstancesForRefresh");
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          __name(findHostInstancesForMatchingFibersRecursively, "findHostInstancesForMatchingFibersRecursively");
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          __name(findHostInstancesForFiberShallowly, "findHostInstancesForFiberShallowly");
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          __name(findChildHostInstancesForFiberShallowly, "findChildHostInstancesForFiberShallowly");
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          __name(FiberNode, "FiberNode");
          var createFiber = /* @__PURE__ */ __name(function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          }, "createFiber");
          function shouldConstruct$1(Component6) {
            var prototype = Component6.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          __name(shouldConstruct$1, "shouldConstruct$1");
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          __name(isSimpleFunctionComponent, "isSimpleFunctionComponent");
          function resolveLazyComponentTag(Component6) {
            if (typeof Component6 === "function") {
              return shouldConstruct$1(Component6) ? ClassComponent : FunctionComponent;
            } else if (Component6 !== void 0 && Component6 !== null) {
              var $$typeof = Component6.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          __name(resolveLazyComponentTag, "resolveLazyComponentTag");
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          __name(createWorkInProgress, "createWorkInProgress");
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          __name(resetWorkInProgress, "resetWorkInProgress");
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          __name(createHostRootFiber, "createHostRootFiber");
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          __name(createFiberFromTypeAndProps, "createFiberFromTypeAndProps");
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          __name(createFiberFromElement, "createFiberFromElement");
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          __name(createFiberFromFragment, "createFiberFromFragment");
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          __name(createFiberFromProfiler, "createFiberFromProfiler");
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          __name(createFiberFromSuspense, "createFiberFromSuspense");
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          __name(createFiberFromSuspenseList, "createFiberFromSuspenseList");
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          __name(createFiberFromOffscreen, "createFiberFromOffscreen");
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          __name(createFiberFromText, "createFiberFromText");
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          __name(createFiberFromHostInstanceForDeletion, "createFiberFromHostInstanceForDeletion");
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          __name(createFiberFromDehydratedFragment, "createFiberFromDehydratedFragment");
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          __name(createFiberFromPortal, "createFiberFromPortal");
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          __name(assignFiberPropertiesInDEV, "assignFiberPropertiesInDEV");
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          __name(FiberRootNode, "FiberRootNode");
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          __name(createFiberRoot, "createFiberRoot");
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          __name(createPortal, "createPortal");
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get4(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component6 = fiber.type;
              if (isContextProvider(Component6)) {
                return processChildContext(fiber, Component6, parentContext);
              }
            }
            return parentContext;
          }
          __name(getContextForSubtree, "getContextForSubtree");
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get4(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys2 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          __name(findHostInstanceWithWarning, "findHostInstanceWithWarning");
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          __name(createContainer, "createContainer");
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          __name(createHydrationContainer, "createHydrationContainer");
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          __name(updateContainer, "updateContainer");
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          __name(getPublicRootInstance, "getPublicRootInstance");
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          __name(attemptSynchronousHydration$1, "attemptSynchronousHydration$1");
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          __name(markRetryLaneImpl, "markRetryLaneImpl");
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          __name(markRetryLaneIfNotHydrated, "markRetryLaneIfNotHydrated");
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          __name(attemptContinuousHydration$1, "attemptContinuousHydration$1");
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          __name(attemptHydrationAtCurrentPriority$1, "attemptHydrationAtCurrentPriority$1");
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          __name(findHostInstanceWithNoPortals, "findHostInstanceWithNoPortals");
          var shouldErrorImpl = /* @__PURE__ */ __name(function(fiber) {
            return null;
          }, "shouldErrorImpl");
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          __name(shouldError, "shouldError");
          var shouldSuspendImpl = /* @__PURE__ */ __name(function(fiber) {
            return false;
          }, "shouldSuspendImpl");
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          __name(shouldSuspend, "shouldSuspend");
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = /* @__PURE__ */ __name(function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            }, "copyWithDeleteImpl");
            var copyWithDelete = /* @__PURE__ */ __name(function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            }, "copyWithDelete");
            var copyWithRenameImpl = /* @__PURE__ */ __name(function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            }, "copyWithRenameImpl");
            var copyWithRename = /* @__PURE__ */ __name(function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            }, "copyWithRename");
            var copyWithSetImpl = /* @__PURE__ */ __name(function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            }, "copyWithSetImpl");
            var copyWithSet = /* @__PURE__ */ __name(function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            }, "copyWithSet");
            var findHook = /* @__PURE__ */ __name(function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            }, "findHook");
            overrideHookState = /* @__PURE__ */ __name(function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            }, "overrideHookState");
            overrideHookStateDeletePath = /* @__PURE__ */ __name(function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            }, "overrideHookStateDeletePath");
            overrideHookStateRenamePath = /* @__PURE__ */ __name(function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            }, "overrideHookStateRenamePath");
            overrideProps = /* @__PURE__ */ __name(function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }, "overrideProps");
            overridePropsDeletePath = /* @__PURE__ */ __name(function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }, "overridePropsDeletePath");
            overridePropsRenamePath = /* @__PURE__ */ __name(function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }, "overridePropsRenamePath");
            scheduleUpdate = /* @__PURE__ */ __name(function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }, "scheduleUpdate");
            setErrorHandler = /* @__PURE__ */ __name(function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            }, "setErrorHandler");
            setSuspenseHandler = /* @__PURE__ */ __name(function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            }, "setSuspenseHandler");
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          __name(findHostInstanceByFiber, "findHostInstanceByFiber");
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          __name(emptyFindFiberByHostInstance, "emptyFindFiberByHostInstance");
          function getCurrentFiberForDevTools() {
            return current;
          }
          __name(getCurrentFiberForDevTools, "getCurrentFiberForDevTools");
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          __name(injectIntoDevTools, "injectIntoDevTools");
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          __name(ReactDOMRoot, "ReactDOMRoot");
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          __name(createRoot2, "createRoot");
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          __name(ReactDOMHydrationRoot, "ReactDOMHydrationRoot");
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          __name(scheduleHydration, "scheduleHydration");
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          __name(hydrateRoot, "hydrateRoot");
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          __name(isValidContainer, "isValidContainer");
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          __name(isValidContainerLegacy, "isValidContainerLegacy");
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          __name(warnIfReactDOMContainerInDEV, "warnIfReactDOMContainerInDEV");
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = /* @__PURE__ */ __name(function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            }, "topLevelUpdateWarnings");
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          __name(getReactRootElementInContainer, "getReactRootElementInContainer");
          function noopOnRecoverableError() {
          }
          __name(noopOnRecoverableError, "noopOnRecoverableError");
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = /* @__PURE__ */ __name(function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                }, "callback");
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = /* @__PURE__ */ __name(function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                }, "callback");
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          __name(legacyCreateRootFromDOMContainer, "legacyCreateRootFromDOMContainer");
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          __name(warnOnInvalidCallback$1, "warnOnInvalidCallback$1");
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = /* @__PURE__ */ __name(function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                }, "callback");
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          __name(legacyRenderSubtreeIntoContainer, "legacyRenderSubtreeIntoContainer");
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          __name(findDOMNode, "findDOMNode");
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          __name(hydrate, "hydrate");
          function render3(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          __name(render3, "render");
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          __name(unstable_renderSubtreeIntoContainer, "unstable_renderSubtreeIntoContainer");
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          __name(unmountComponentAtNode, "unmountComponentAtNode");
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          __name(createPortal$1, "createPortal$1");
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          __name(renderSubtreeIntoContainer, "renderSubtreeIntoContainer");
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          __name(createRoot$1, "createRoot$1");
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          __name(hydrateRoot$1, "hydrateRoot$1");
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          __name(flushSync$1, "flushSync$1");
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports2.createPortal = createPortal$1;
          exports2.createRoot = createRoot$1;
          exports2.findDOMNode = findDOMNode;
          exports2.flushSync = flushSync$1;
          exports2.hydrate = hydrate;
          exports2.hydrateRoot = hydrateRoot$1;
          exports2.render = render3;
          exports2.unmountComponentAtNode = unmountComponentAtNode;
          exports2.unstable_batchedUpdates = batchedUpdates$1;
          exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../boardzilla-core/node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../boardzilla-core/node_modules/react-dom/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // ../boardzilla-core/node_modules/react-dom/client.js
  var require_client = __commonJS({
    "../boardzilla-core/node_modules/react-dom/client.js"(exports2) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports2.createRoot = m.createRoot;
        exports2.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports2.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports2.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // ../boardzilla-core/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
  var require_use_sync_external_store_shim_development = __commonJS({
    "../boardzilla-core/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React64 = require_react();
          var ReactSharedInternals = React64.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          __name(error, "error");
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          __name(printWarning, "printWarning");
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          __name(is, "is");
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var useState5 = React64.useState, useEffect4 = React64.useEffect, useLayoutEffect = React64.useLayoutEffect, useDebugValue2 = React64.useDebugValue;
          var didWarnOld18Alpha = false;
          var didWarnUncachedGetSnapshot = false;
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            {
              if (!didWarnOld18Alpha) {
                if (React64.startTransition !== void 0) {
                  didWarnOld18Alpha = true;
                  error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
                }
              }
            }
            var value = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedValue = getSnapshot();
                if (!objectIs(value, cachedValue)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var _useState = useState5({
              inst: {
                value,
                getSnapshot
              }
            }), inst = _useState[0].inst, forceUpdate = _useState[1];
            useLayoutEffect(function() {
              inst.value = value;
              inst.getSnapshot = getSnapshot;
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            }, [subscribe, value, getSnapshot]);
            useEffect4(function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
              var handleStoreChange = /* @__PURE__ */ __name(function() {
                if (checkIfSnapshotChanged(inst)) {
                  forceUpdate({
                    inst
                  });
                }
              }, "handleStoreChange");
              return subscribe(handleStoreChange);
            }, [subscribe]);
            useDebugValue2(value);
            return value;
          }
          __name(useSyncExternalStore, "useSyncExternalStore");
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          __name(checkIfSnapshotChanged, "checkIfSnapshotChanged");
          function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
            return getSnapshot();
          }
          __name(useSyncExternalStore$1, "useSyncExternalStore$1");
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var isServerEnvironment = !canUseDOM;
          var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
          var useSyncExternalStore$2 = React64.useSyncExternalStore !== void 0 ? React64.useSyncExternalStore : shim;
          exports2.useSyncExternalStore = useSyncExternalStore$2;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../boardzilla-core/node_modules/use-sync-external-store/shim/index.js
  var require_shim = __commonJS({
    "../boardzilla-core/node_modules/use-sync-external-store/shim/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_use_sync_external_store_shim_development();
      }
    }
  });

  // ../boardzilla-core/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
  var require_with_selector_development = __commonJS({
    "../boardzilla-core/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React64 = require_react();
          var shim = require_shim();
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          __name(is, "is");
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var useSyncExternalStore = shim.useSyncExternalStore;
          var useRef3 = React64.useRef, useEffect4 = React64.useEffect, useMemo3 = React64.useMemo, useDebugValue2 = React64.useDebugValue;
          function useSyncExternalStoreWithSelector2(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
            var instRef = useRef3(null);
            var inst;
            if (instRef.current === null) {
              inst = {
                hasValue: false,
                value: null
              };
              instRef.current = inst;
            } else {
              inst = instRef.current;
            }
            var _useMemo = useMemo3(function() {
              var hasMemo = false;
              var memoizedSnapshot;
              var memoizedSelection;
              var memoizedSelector = /* @__PURE__ */ __name(function(nextSnapshot) {
                if (!hasMemo) {
                  hasMemo = true;
                  memoizedSnapshot = nextSnapshot;
                  var _nextSelection = selector(nextSnapshot);
                  if (isEqual !== void 0) {
                    if (inst.hasValue) {
                      var currentSelection = inst.value;
                      if (isEqual(currentSelection, _nextSelection)) {
                        memoizedSelection = currentSelection;
                        return currentSelection;
                      }
                    }
                  }
                  memoizedSelection = _nextSelection;
                  return _nextSelection;
                }
                var prevSnapshot = memoizedSnapshot;
                var prevSelection = memoizedSelection;
                if (objectIs(prevSnapshot, nextSnapshot)) {
                  return prevSelection;
                }
                var nextSelection = selector(nextSnapshot);
                if (isEqual !== void 0 && isEqual(prevSelection, nextSelection)) {
                  return prevSelection;
                }
                memoizedSnapshot = nextSnapshot;
                memoizedSelection = nextSelection;
                return nextSelection;
              }, "memoizedSelector");
              var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
              var getSnapshotWithSelector = /* @__PURE__ */ __name(function() {
                return memoizedSelector(getSnapshot());
              }, "getSnapshotWithSelector");
              var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              };
              return [getSnapshotWithSelector, getServerSnapshotWithSelector];
            }, [getSnapshot, getServerSnapshot, selector, isEqual]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
            var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
            useEffect4(function() {
              inst.hasValue = true;
              inst.value = value;
            }, [value]);
            useDebugValue2(value);
            return value;
          }
          __name(useSyncExternalStoreWithSelector2, "useSyncExternalStoreWithSelector");
          exports2.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector2;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../boardzilla-core/node_modules/use-sync-external-store/shim/with-selector.js
  var require_with_selector = __commonJS({
    "../boardzilla-core/node_modules/use-sync-external-store/shim/with-selector.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_with_selector_development();
      }
    }
  });

  // ../boardzilla-core/node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "../boardzilla-core/node_modules/classnames/index.js"(exports2, module2) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        var nativeCodeString = "[native code]";
        function classNames2() {
          var classes = [];
          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames2.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            }
          }
          return classes.join(" ");
        }
        __name(classNames2, "classNames");
        if (typeof module2 !== "undefined" && module2.exports) {
          classNames2.default = classNames2;
          module2.exports = classNames2;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames2;
          });
        } else {
          window.classNames = classNames2;
        }
      })();
    }
  });

  // ../boardzilla-core/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "../boardzilla-core/node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          __name(isValidElementType, "isValidElementType");
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          __name(typeOf, "typeOf");
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          __name(isAsyncMode, "isAsyncMode");
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          __name(isConcurrentMode, "isConcurrentMode");
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          __name(isContextConsumer, "isContextConsumer");
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          __name(isContextProvider, "isContextProvider");
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          __name(isElement, "isElement");
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          __name(isForwardRef, "isForwardRef");
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          __name(isFragment, "isFragment");
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          __name(isLazy, "isLazy");
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          __name(isMemo, "isMemo");
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          __name(isPortal, "isPortal");
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          __name(isProfiler, "isProfiler");
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          __name(isStrictMode, "isStrictMode");
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          __name(isSuspense, "isSuspense");
          exports2.AsyncMode = AsyncMode;
          exports2.ConcurrentMode = ConcurrentMode;
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element2;
          exports2.ForwardRef = ForwardRef;
          exports2.Fragment = Fragment;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo;
          exports2.Portal = Portal;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode;
          exports2.Suspense = Suspense;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isValidElementType = isValidElementType;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // ../boardzilla-core/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "../boardzilla-core/node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development();
      }
    }
  });

  // ../boardzilla-core/node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "../boardzilla-core/node_modules/object-assign/index.js"(exports2, module2) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty13 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      __name(toObject, "toObject");
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      __name(shouldUseNative, "shouldUseNative");
      module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty13.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // ../boardzilla-core/node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "../boardzilla-core/node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module2.exports = ReactPropTypesSecret;
    }
  });

  // ../boardzilla-core/node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "../boardzilla-core/node_modules/prop-types/lib/has.js"(exports2, module2) {
      module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // ../boardzilla-core/node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "../boardzilla-core/node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
      "use strict";
      var printWarning = /* @__PURE__ */ __name(function() {
      }, "printWarning");
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = /* @__PURE__ */ __name(function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        }, "printWarning");
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      __name(checkPropTypes, "checkPropTypes");
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module2.exports = checkPropTypes;
    }
  });

  // ../boardzilla-core/node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "../boardzilla-core/node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = /* @__PURE__ */ __name(function() {
      }, "printWarning");
      if (true) {
        printWarning = /* @__PURE__ */ __name(function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        }, "printWarning");
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      __name(emptyFunctionThatReturnsNull, "emptyFunctionThatReturnsNull");
      module2.exports = function(isValidElement2, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        __name(getIteratorFn, "getIteratorFn");
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        __name(is, "is");
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        __name(PropTypeError, "PropTypeError");
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          __name(checkType, "checkType");
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        __name(createChainableTypeChecker, "createChainableTypeChecker");
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createPrimitiveTypeChecker, "createPrimitiveTypeChecker");
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        __name(createAnyTypeChecker, "createAnyTypeChecker");
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createArrayOfTypeChecker, "createArrayOfTypeChecker");
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement2(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createElementTypeChecker, "createElementTypeChecker");
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createElementTypeTypeChecker, "createElementTypeTypeChecker");
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createInstanceTypeChecker, "createInstanceTypeChecker");
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, /* @__PURE__ */ __name(function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            }, "replacer"));
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createEnumTypeChecker, "createEnumTypeChecker");
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createObjectOfTypeChecker, "createObjectOfTypeChecker");
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createUnionTypeChecker, "createUnionTypeChecker");
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createNodeChecker, "createNodeChecker");
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        __name(invalidValidatorError, "invalidValidatorError");
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createShapeTypeChecker, "createShapeTypeChecker");
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          __name(validate, "validate");
          return createChainableTypeChecker(validate);
        }
        __name(createStrictShapeTypeChecker, "createStrictShapeTypeChecker");
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement2(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        __name(isNode, "isNode");
        function isSymbol2(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        __name(isSymbol2, "isSymbol");
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol2(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        __name(getPropType, "getPropType");
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        __name(getPreciseType, "getPreciseType");
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        __name(getPostfixForTypeWarning, "getPostfixForTypeWarning");
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        __name(getClassName, "getClassName");
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // ../boardzilla-core/node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "../boardzilla-core/node_modules/prop-types/index.js"(exports2, module2) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module2.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // ../boardzilla-core/node_modules/clsx/dist/clsx.js
  var require_clsx = __commonJS({
    "../boardzilla-core/node_modules/clsx/dist/clsx.js"(exports2, module2) {
      function e(r2) {
        var o, t, f = "";
        if ("string" == typeof r2 || "number" == typeof r2)
          f += r2;
        else if ("object" == typeof r2)
          if (Array.isArray(r2))
            for (o = 0; o < r2.length; o++)
              r2[o] && (t = e(r2[o])) && (f && (f += " "), f += t);
          else
            for (o in r2)
              r2[o] && (f && (f += " "), f += o);
        return f;
      }
      __name(e, "e");
      function r() {
        for (var r2, o, t = 0, f = ""; t < arguments.length; )
          (r2 = arguments[t++]) && (o = e(r2)) && (f && (f += " "), f += o);
        return f;
      }
      __name(r, "r");
      module2.exports = r, module2.exports.clsx = r;
    }
  });

  // ../boardzilla-core/node_modules/react-draggable/build/cjs/utils/shims.js
  var require_shims = __commonJS({
    "../boardzilla-core/node_modules/react-draggable/build/cjs/utils/shims.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.dontSetMe = dontSetMe;
      exports2.findInArray = findInArray;
      exports2.int = int;
      exports2.isFunction = isFunction2;
      exports2.isNum = isNum;
      function findInArray(array, callback) {
        for (let i = 0, length = array.length; i < length; i++) {
          if (callback.apply(callback, [array[i], i, array]))
            return array[i];
        }
      }
      __name(findInArray, "findInArray");
      function isFunction2(func) {
        return typeof func === "function" || Object.prototype.toString.call(func) === "[object Function]";
      }
      __name(isFunction2, "isFunction");
      function isNum(num) {
        return typeof num === "number" && !isNaN(num);
      }
      __name(isNum, "isNum");
      function int(a) {
        return parseInt(a, 10);
      }
      __name(int, "int");
      function dontSetMe(props, propName, componentName) {
        if (props[propName]) {
          return new Error("Invalid prop ".concat(propName, " passed to ").concat(componentName, " - do not set this, set it on the child."));
        }
      }
      __name(dontSetMe, "dontSetMe");
    }
  });

  // ../boardzilla-core/node_modules/react-draggable/build/cjs/utils/getPrefix.js
  var require_getPrefix = __commonJS({
    "../boardzilla-core/node_modules/react-draggable/build/cjs/utils/getPrefix.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.browserPrefixToKey = browserPrefixToKey;
      exports2.browserPrefixToStyle = browserPrefixToStyle;
      exports2.default = void 0;
      exports2.getPrefix = getPrefix;
      var prefixes = ["Moz", "Webkit", "O", "ms"];
      function getPrefix() {
        var _window$document;
        let prop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "transform";
        if (typeof window === "undefined")
          return "";
        const style = (_window$document = window.document) === null || _window$document === void 0 || (_window$document = _window$document.documentElement) === null || _window$document === void 0 ? void 0 : _window$document.style;
        if (!style)
          return "";
        if (prop in style)
          return "";
        for (let i = 0; i < prefixes.length; i++) {
          if (browserPrefixToKey(prop, prefixes[i]) in style)
            return prefixes[i];
        }
        return "";
      }
      __name(getPrefix, "getPrefix");
      function browserPrefixToKey(prop, prefix) {
        return prefix ? "".concat(prefix).concat(kebabToTitleCase(prop)) : prop;
      }
      __name(browserPrefixToKey, "browserPrefixToKey");
      function browserPrefixToStyle(prop, prefix) {
        return prefix ? "-".concat(prefix.toLowerCase(), "-").concat(prop) : prop;
      }
      __name(browserPrefixToStyle, "browserPrefixToStyle");
      function kebabToTitleCase(str) {
        let out = "";
        let shouldCapitalize = true;
        for (let i = 0; i < str.length; i++) {
          if (shouldCapitalize) {
            out += str[i].toUpperCase();
            shouldCapitalize = false;
          } else if (str[i] === "-") {
            shouldCapitalize = true;
          } else {
            out += str[i];
          }
        }
        return out;
      }
      __name(kebabToTitleCase, "kebabToTitleCase");
      var _default = exports2.default = getPrefix();
    }
  });

  // ../boardzilla-core/node_modules/react-draggable/build/cjs/utils/domFns.js
  var require_domFns = __commonJS({
    "../boardzilla-core/node_modules/react-draggable/build/cjs/utils/domFns.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.addClassName = addClassName;
      exports2.addEvent = addEvent;
      exports2.addUserSelectStyles = addUserSelectStyles;
      exports2.createCSSTransform = createCSSTransform;
      exports2.createSVGTransform = createSVGTransform;
      exports2.getTouch = getTouch;
      exports2.getTouchIdentifier = getTouchIdentifier;
      exports2.getTranslation = getTranslation;
      exports2.innerHeight = innerHeight;
      exports2.innerWidth = innerWidth;
      exports2.matchesSelector = matchesSelector;
      exports2.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;
      exports2.offsetXYFromParent = offsetXYFromParent;
      exports2.outerHeight = outerHeight;
      exports2.outerWidth = outerWidth;
      exports2.removeClassName = removeClassName;
      exports2.removeEvent = removeEvent;
      exports2.removeUserSelectStyles = removeUserSelectStyles;
      var _shims = require_shims();
      var _getPrefix = _interopRequireWildcard(require_getPrefix());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = /* @__PURE__ */ __name(function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        }, "_getRequireWildcardCache"))(nodeInterop);
      }
      __name(_getRequireWildcardCache, "_getRequireWildcardCache");
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      __name(_interopRequireWildcard, "_interopRequireWildcard");
      var matchesSelectorFunc = "";
      function matchesSelector(el, selector) {
        if (!matchesSelectorFunc) {
          matchesSelectorFunc = (0, _shims.findInArray)(["matches", "webkitMatchesSelector", "mozMatchesSelector", "msMatchesSelector", "oMatchesSelector"], function(method) {
            return (0, _shims.isFunction)(el[method]);
          });
        }
        if (!(0, _shims.isFunction)(el[matchesSelectorFunc]))
          return false;
        return el[matchesSelectorFunc](selector);
      }
      __name(matchesSelector, "matchesSelector");
      function matchesSelectorAndParentsTo(el, selector, baseNode) {
        let node = el;
        do {
          if (matchesSelector(node, selector))
            return true;
          if (node === baseNode)
            return false;
          node = node.parentNode;
        } while (node);
        return false;
      }
      __name(matchesSelectorAndParentsTo, "matchesSelectorAndParentsTo");
      function addEvent(el, event, handler, inputOptions) {
        if (!el)
          return;
        const options = {
          capture: true,
          ...inputOptions
        };
        if (el.addEventListener) {
          el.addEventListener(event, handler, options);
        } else if (el.attachEvent) {
          el.attachEvent("on" + event, handler);
        } else {
          el["on" + event] = handler;
        }
      }
      __name(addEvent, "addEvent");
      function removeEvent(el, event, handler, inputOptions) {
        if (!el)
          return;
        const options = {
          capture: true,
          ...inputOptions
        };
        if (el.removeEventListener) {
          el.removeEventListener(event, handler, options);
        } else if (el.detachEvent) {
          el.detachEvent("on" + event, handler);
        } else {
          el["on" + event] = null;
        }
      }
      __name(removeEvent, "removeEvent");
      function outerHeight(node) {
        let height = node.clientHeight;
        const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
        height += (0, _shims.int)(computedStyle.borderTopWidth);
        height += (0, _shims.int)(computedStyle.borderBottomWidth);
        return height;
      }
      __name(outerHeight, "outerHeight");
      function outerWidth(node) {
        let width = node.clientWidth;
        const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
        width += (0, _shims.int)(computedStyle.borderLeftWidth);
        width += (0, _shims.int)(computedStyle.borderRightWidth);
        return width;
      }
      __name(outerWidth, "outerWidth");
      function innerHeight(node) {
        let height = node.clientHeight;
        const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
        height -= (0, _shims.int)(computedStyle.paddingTop);
        height -= (0, _shims.int)(computedStyle.paddingBottom);
        return height;
      }
      __name(innerHeight, "innerHeight");
      function innerWidth(node) {
        let width = node.clientWidth;
        const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
        width -= (0, _shims.int)(computedStyle.paddingLeft);
        width -= (0, _shims.int)(computedStyle.paddingRight);
        return width;
      }
      __name(innerWidth, "innerWidth");
      function offsetXYFromParent(evt, offsetParent, scale2) {
        const isBody = offsetParent === offsetParent.ownerDocument.body;
        const offsetParentRect = isBody ? {
          left: 0,
          top: 0
        } : offsetParent.getBoundingClientRect();
        const x = (evt.clientX + offsetParent.scrollLeft - offsetParentRect.left) / scale2;
        const y = (evt.clientY + offsetParent.scrollTop - offsetParentRect.top) / scale2;
        return {
          x,
          y
        };
      }
      __name(offsetXYFromParent, "offsetXYFromParent");
      function createCSSTransform(controlPos, positionOffset) {
        const translation = getTranslation(controlPos, positionOffset, "px");
        return {
          [(0, _getPrefix.browserPrefixToKey)("transform", _getPrefix.default)]: translation
        };
      }
      __name(createCSSTransform, "createCSSTransform");
      function createSVGTransform(controlPos, positionOffset) {
        const translation = getTranslation(controlPos, positionOffset, "");
        return translation;
      }
      __name(createSVGTransform, "createSVGTransform");
      function getTranslation(_ref, positionOffset, unitSuffix) {
        let {
          x,
          y
        } = _ref;
        let translation = "translate(".concat(x).concat(unitSuffix, ",").concat(y).concat(unitSuffix, ")");
        if (positionOffset) {
          const defaultX = "".concat(typeof positionOffset.x === "string" ? positionOffset.x : positionOffset.x + unitSuffix);
          const defaultY = "".concat(typeof positionOffset.y === "string" ? positionOffset.y : positionOffset.y + unitSuffix);
          translation = "translate(".concat(defaultX, ", ").concat(defaultY, ")") + translation;
        }
        return translation;
      }
      __name(getTranslation, "getTranslation");
      function getTouch(e, identifier) {
        return e.targetTouches && (0, _shims.findInArray)(e.targetTouches, (t) => identifier === t.identifier) || e.changedTouches && (0, _shims.findInArray)(e.changedTouches, (t) => identifier === t.identifier);
      }
      __name(getTouch, "getTouch");
      function getTouchIdentifier(e) {
        if (e.targetTouches && e.targetTouches[0])
          return e.targetTouches[0].identifier;
        if (e.changedTouches && e.changedTouches[0])
          return e.changedTouches[0].identifier;
      }
      __name(getTouchIdentifier, "getTouchIdentifier");
      function addUserSelectStyles(doc) {
        if (!doc)
          return;
        let styleEl = doc.getElementById("react-draggable-style-el");
        if (!styleEl) {
          styleEl = doc.createElement("style");
          styleEl.type = "text/css";
          styleEl.id = "react-draggable-style-el";
          styleEl.innerHTML = ".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n";
          styleEl.innerHTML += ".react-draggable-transparent-selection *::selection {all: inherit;}\n";
          doc.getElementsByTagName("head")[0].appendChild(styleEl);
        }
        if (doc.body)
          addClassName(doc.body, "react-draggable-transparent-selection");
      }
      __name(addUserSelectStyles, "addUserSelectStyles");
      function removeUserSelectStyles(doc) {
        if (!doc)
          return;
        try {
          if (doc.body)
            removeClassName(doc.body, "react-draggable-transparent-selection");
          if (doc.selection) {
            doc.selection.empty();
          } else {
            const selection = (doc.defaultView || window).getSelection();
            if (selection && selection.type !== "Caret") {
              selection.removeAllRanges();
            }
          }
        } catch (e) {
        }
      }
      __name(removeUserSelectStyles, "removeUserSelectStyles");
      function addClassName(el, className) {
        if (el.classList) {
          el.classList.add(className);
        } else {
          if (!el.className.match(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)")))) {
            el.className += " ".concat(className);
          }
        }
      }
      __name(addClassName, "addClassName");
      function removeClassName(el, className) {
        if (el.classList) {
          el.classList.remove(className);
        } else {
          el.className = el.className.replace(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)"), "g"), "");
        }
      }
      __name(removeClassName, "removeClassName");
    }
  });

  // ../boardzilla-core/node_modules/react-draggable/build/cjs/utils/positionFns.js
  var require_positionFns = __commonJS({
    "../boardzilla-core/node_modules/react-draggable/build/cjs/utils/positionFns.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.canDragX = canDragX;
      exports2.canDragY = canDragY;
      exports2.createCoreData = createCoreData;
      exports2.createDraggableData = createDraggableData;
      exports2.getBoundPosition = getBoundPosition;
      exports2.getControlPosition = getControlPosition;
      exports2.snapToGrid = snapToGrid;
      var _shims = require_shims();
      var _domFns = require_domFns();
      function getBoundPosition(draggable, x, y) {
        if (!draggable.props.bounds)
          return [x, y];
        let {
          bounds
        } = draggable.props;
        bounds = typeof bounds === "string" ? bounds : cloneBounds(bounds);
        const node = findDOMNode(draggable);
        if (typeof bounds === "string") {
          const {
            ownerDocument
          } = node;
          const ownerWindow = ownerDocument.defaultView;
          let boundNode;
          if (bounds === "parent") {
            boundNode = node.parentNode;
          } else {
            boundNode = ownerDocument.querySelector(bounds);
          }
          if (!(boundNode instanceof ownerWindow.HTMLElement)) {
            throw new Error('Bounds selector "' + bounds + '" could not find an element.');
          }
          const boundNodeEl = boundNode;
          const nodeStyle = ownerWindow.getComputedStyle(node);
          const boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl);
          bounds = {
            left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),
            top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),
            right: (0, _domFns.innerWidth)(boundNodeEl) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),
            bottom: (0, _domFns.innerHeight)(boundNodeEl) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)
          };
        }
        if ((0, _shims.isNum)(bounds.right))
          x = Math.min(x, bounds.right);
        if ((0, _shims.isNum)(bounds.bottom))
          y = Math.min(y, bounds.bottom);
        if ((0, _shims.isNum)(bounds.left))
          x = Math.max(x, bounds.left);
        if ((0, _shims.isNum)(bounds.top))
          y = Math.max(y, bounds.top);
        return [x, y];
      }
      __name(getBoundPosition, "getBoundPosition");
      function snapToGrid(grid, pendingX, pendingY) {
        const x = Math.round(pendingX / grid[0]) * grid[0];
        const y = Math.round(pendingY / grid[1]) * grid[1];
        return [x, y];
      }
      __name(snapToGrid, "snapToGrid");
      function canDragX(draggable) {
        return draggable.props.axis === "both" || draggable.props.axis === "x";
      }
      __name(canDragX, "canDragX");
      function canDragY(draggable) {
        return draggable.props.axis === "both" || draggable.props.axis === "y";
      }
      __name(canDragY, "canDragY");
      function getControlPosition(e, touchIdentifier, draggableCore) {
        const touchObj = typeof touchIdentifier === "number" ? (0, _domFns.getTouch)(e, touchIdentifier) : null;
        if (typeof touchIdentifier === "number" && !touchObj)
          return null;
        const node = findDOMNode(draggableCore);
        const offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
        return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);
      }
      __name(getControlPosition, "getControlPosition");
      function createCoreData(draggable, x, y) {
        const isStart = !(0, _shims.isNum)(draggable.lastX);
        const node = findDOMNode(draggable);
        if (isStart) {
          return {
            node,
            deltaX: 0,
            deltaY: 0,
            lastX: x,
            lastY: y,
            x,
            y
          };
        } else {
          return {
            node,
            deltaX: x - draggable.lastX,
            deltaY: y - draggable.lastY,
            lastX: draggable.lastX,
            lastY: draggable.lastY,
            x,
            y
          };
        }
      }
      __name(createCoreData, "createCoreData");
      function createDraggableData(draggable, coreData) {
        const scale2 = draggable.props.scale;
        return {
          node: coreData.node,
          x: draggable.state.x + coreData.deltaX / scale2,
          y: draggable.state.y + coreData.deltaY / scale2,
          deltaX: coreData.deltaX / scale2,
          deltaY: coreData.deltaY / scale2,
          lastX: draggable.state.x,
          lastY: draggable.state.y
        };
      }
      __name(createDraggableData, "createDraggableData");
      function cloneBounds(bounds) {
        return {
          left: bounds.left,
          top: bounds.top,
          right: bounds.right,
          bottom: bounds.bottom
        };
      }
      __name(cloneBounds, "cloneBounds");
      function findDOMNode(draggable) {
        const node = draggable.findDOMNode();
        if (!node) {
          throw new Error("<DraggableCore>: Unmounted during event!");
        }
        return node;
      }
      __name(findDOMNode, "findDOMNode");
    }
  });

  // ../boardzilla-core/node_modules/react-draggable/build/cjs/utils/log.js
  var require_log = __commonJS({
    "../boardzilla-core/node_modules/react-draggable/build/cjs/utils/log.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = log;
      function log() {
        if (void 0)
          console.log(...arguments);
      }
      __name(log, "log");
    }
  });

  // ../boardzilla-core/node_modules/react-draggable/build/cjs/DraggableCore.js
  var require_DraggableCore = __commonJS({
    "../boardzilla-core/node_modules/react-draggable/build/cjs/DraggableCore.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      var React64 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _reactDom = _interopRequireDefault(require_react_dom());
      var _domFns = require_domFns();
      var _positionFns = require_positionFns();
      var _shims = require_shims();
      var _log = _interopRequireDefault(require_log());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = /* @__PURE__ */ __name(function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        }, "_getRequireWildcardCache"))(nodeInterop);
      }
      __name(_getRequireWildcardCache, "_getRequireWildcardCache");
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      __name(_interopRequireWildcard, "_interopRequireWildcard");
      function _defineProperty2(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      __name(_defineProperty2, "_defineProperty");
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      __name(_toPropertyKey, "_toPropertyKey");
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      __name(_toPrimitive, "_toPrimitive");
      var eventsFor = {
        touch: {
          start: "touchstart",
          move: "touchmove",
          stop: "touchend"
        },
        mouse: {
          start: "mousedown",
          move: "mousemove",
          stop: "mouseup"
        }
      };
      var dragEventFor = eventsFor.mouse;
      var DraggableCore2 = class extends React64.Component {
        static {
          __name(this, "DraggableCore");
        }
        constructor() {
          super(...arguments);
          _defineProperty2(this, "dragging", false);
          _defineProperty2(this, "lastX", NaN);
          _defineProperty2(this, "lastY", NaN);
          _defineProperty2(this, "touchIdentifier", null);
          _defineProperty2(this, "mounted", false);
          _defineProperty2(this, "handleDragStart", (e) => {
            this.props.onMouseDown(e);
            if (!this.props.allowAnyClick && typeof e.button === "number" && e.button !== 0)
              return false;
            const thisNode = this.findDOMNode();
            if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {
              throw new Error("<DraggableCore> not mounted on DragStart!");
            }
            const {
              ownerDocument
            } = thisNode;
            if (this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.handle, thisNode) || this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.cancel, thisNode)) {
              return;
            }
            if (e.type === "touchstart")
              e.preventDefault();
            const touchIdentifier = (0, _domFns.getTouchIdentifier)(e);
            this.touchIdentifier = touchIdentifier;
            const position = (0, _positionFns.getControlPosition)(e, touchIdentifier, this);
            if (position == null)
              return;
            const {
              x,
              y
            } = position;
            const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
            (0, _log.default)("DraggableCore: handleDragStart: %j", coreEvent);
            (0, _log.default)("calling", this.props.onStart);
            const shouldUpdate = this.props.onStart(e, coreEvent);
            if (shouldUpdate === false || this.mounted === false)
              return;
            if (this.props.enableUserSelectHack)
              (0, _domFns.addUserSelectStyles)(ownerDocument);
            this.dragging = true;
            this.lastX = x;
            this.lastY = y;
            (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, this.handleDrag);
            (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, this.handleDragStop);
          });
          _defineProperty2(this, "handleDrag", (e) => {
            const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);
            if (position == null)
              return;
            let {
              x,
              y
            } = position;
            if (Array.isArray(this.props.grid)) {
              let deltaX = x - this.lastX, deltaY = y - this.lastY;
              [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);
              if (!deltaX && !deltaY)
                return;
              x = this.lastX + deltaX, y = this.lastY + deltaY;
            }
            const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
            (0, _log.default)("DraggableCore: handleDrag: %j", coreEvent);
            const shouldUpdate = this.props.onDrag(e, coreEvent);
            if (shouldUpdate === false || this.mounted === false) {
              try {
                this.handleDragStop(new MouseEvent("mouseup"));
              } catch (err) {
                const event = document.createEvent("MouseEvents");
                event.initMouseEvent("mouseup", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
                this.handleDragStop(event);
              }
              return;
            }
            this.lastX = x;
            this.lastY = y;
          });
          _defineProperty2(this, "handleDragStop", (e) => {
            if (!this.dragging)
              return;
            const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);
            if (position == null)
              return;
            let {
              x,
              y
            } = position;
            if (Array.isArray(this.props.grid)) {
              let deltaX = x - this.lastX || 0;
              let deltaY = y - this.lastY || 0;
              [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);
              x = this.lastX + deltaX, y = this.lastY + deltaY;
            }
            const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
            const shouldContinue = this.props.onStop(e, coreEvent);
            if (shouldContinue === false || this.mounted === false)
              return false;
            const thisNode = this.findDOMNode();
            if (thisNode) {
              if (this.props.enableUserSelectHack)
                (0, _domFns.removeUserSelectStyles)(thisNode.ownerDocument);
            }
            (0, _log.default)("DraggableCore: handleDragStop: %j", coreEvent);
            this.dragging = false;
            this.lastX = NaN;
            this.lastY = NaN;
            if (thisNode) {
              (0, _log.default)("DraggableCore: Removing handlers");
              (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, this.handleDrag);
              (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, this.handleDragStop);
            }
          });
          _defineProperty2(this, "onMouseDown", (e) => {
            dragEventFor = eventsFor.mouse;
            return this.handleDragStart(e);
          });
          _defineProperty2(this, "onMouseUp", (e) => {
            dragEventFor = eventsFor.mouse;
            return this.handleDragStop(e);
          });
          _defineProperty2(this, "onTouchStart", (e) => {
            dragEventFor = eventsFor.touch;
            return this.handleDragStart(e);
          });
          _defineProperty2(this, "onTouchEnd", (e) => {
            dragEventFor = eventsFor.touch;
            return this.handleDragStop(e);
          });
        }
        componentDidMount() {
          this.mounted = true;
          const thisNode = this.findDOMNode();
          if (thisNode) {
            (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
              passive: false
            });
          }
        }
        componentWillUnmount() {
          this.mounted = false;
          const thisNode = this.findDOMNode();
          if (thisNode) {
            const {
              ownerDocument
            } = thisNode;
            (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);
            (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);
            (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
            (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
            (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
              passive: false
            });
            if (this.props.enableUserSelectHack)
              (0, _domFns.removeUserSelectStyles)(ownerDocument);
          }
        }
        // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
        // the underlying DOM node ourselves. See the README for more information.
        findDOMNode() {
          var _this$props, _this$props2;
          return (_this$props = this.props) !== null && _this$props !== void 0 && _this$props.nodeRef ? (_this$props2 = this.props) === null || _this$props2 === void 0 || (_this$props2 = _this$props2.nodeRef) === null || _this$props2 === void 0 ? void 0 : _this$props2.current : _reactDom.default.findDOMNode(this);
        }
        render() {
          return /* @__PURE__ */ React64.cloneElement(React64.Children.only(this.props.children), {
            // Note: mouseMove handler is attached to document so it will still function
            // when the user drags quickly and leaves the bounds of the element.
            onMouseDown: this.onMouseDown,
            onMouseUp: this.onMouseUp,
            // onTouchStart is added on `componentDidMount` so they can be added with
            // {passive: false}, which allows it to cancel. See
            // https://developers.google.com/web/updates/2017/01/scrolling-intervention
            onTouchEnd: this.onTouchEnd
          });
        }
      };
      exports2.default = DraggableCore2;
      _defineProperty2(DraggableCore2, "displayName", "DraggableCore");
      _defineProperty2(DraggableCore2, "propTypes", {
        /**
         * `allowAnyClick` allows dragging using any mouse button.
         * By default, we only accept the left button.
         *
         * Defaults to `false`.
         */
        allowAnyClick: _propTypes.default.bool,
        children: _propTypes.default.node.isRequired,
        /**
         * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
         * with the exception of `onMouseDown`, will not fire.
         */
        disabled: _propTypes.default.bool,
        /**
         * By default, we add 'user-select:none' attributes to the document body
         * to prevent ugly text selection during drag. If this is causing problems
         * for your app, set this to `false`.
         */
        enableUserSelectHack: _propTypes.default.bool,
        /**
         * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
         * instead of using the parent node.
         */
        offsetParent: function(props, propName) {
          if (props[propName] && props[propName].nodeType !== 1) {
            throw new Error("Draggable's offsetParent must be a DOM Node.");
          }
        },
        /**
         * `grid` specifies the x and y that dragging should snap to.
         */
        grid: _propTypes.default.arrayOf(_propTypes.default.number),
        /**
         * `handle` specifies a selector to be used as the handle that initiates drag.
         *
         * Example:
         *
         * ```jsx
         *   let App = React.createClass({
         *       render: function () {
         *         return (
         *            <Draggable handle=".handle">
         *              <div>
         *                  <div className="handle">Click me to drag</div>
         *                  <div>This is some other content</div>
         *              </div>
         *           </Draggable>
         *         );
         *       }
         *   });
         * ```
         */
        handle: _propTypes.default.string,
        /**
         * `cancel` specifies a selector to be used to prevent drag initialization.
         *
         * Example:
         *
         * ```jsx
         *   let App = React.createClass({
         *       render: function () {
         *           return(
         *               <Draggable cancel=".cancel">
         *                   <div>
         *                     <div className="cancel">You can't drag from here</div>
         *                     <div>Dragging here works fine</div>
         *                   </div>
         *               </Draggable>
         *           );
         *       }
         *   });
         * ```
         */
        cancel: _propTypes.default.string,
        /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.
         * Unfortunately, in order for <Draggable> to work properly, we need raw access
         * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`
         * as in this example:
         *
         * function MyComponent() {
         *   const nodeRef = React.useRef(null);
         *   return (
         *     <Draggable nodeRef={nodeRef}>
         *       <div ref={nodeRef}>Example Target</div>
         *     </Draggable>
         *   );
         * }
         *
         * This can be used for arbitrarily nested components, so long as the ref ends up
         * pointing to the actual child DOM node and not a custom component.
         */
        nodeRef: _propTypes.default.object,
        /**
         * Called when dragging starts.
         * If this function returns the boolean false, dragging will be canceled.
         */
        onStart: _propTypes.default.func,
        /**
         * Called while dragging.
         * If this function returns the boolean false, dragging will be canceled.
         */
        onDrag: _propTypes.default.func,
        /**
         * Called when dragging stops.
         * If this function returns the boolean false, the drag will remain active.
         */
        onStop: _propTypes.default.func,
        /**
         * A workaround option which can be passed if onMouseDown needs to be accessed,
         * since it'll always be blocked (as there is internal use of onMouseDown)
         */
        onMouseDown: _propTypes.default.func,
        /**
         * `scale`, if set, applies scaling while dragging an element
         */
        scale: _propTypes.default.number,
        /**
         * These properties should be defined on the child, not here.
         */
        className: _shims.dontSetMe,
        style: _shims.dontSetMe,
        transform: _shims.dontSetMe
      });
      _defineProperty2(DraggableCore2, "defaultProps", {
        allowAnyClick: false,
        // by default only accept left click
        disabled: false,
        enableUserSelectHack: true,
        onStart: function() {
        },
        onDrag: function() {
        },
        onStop: function() {
        },
        onMouseDown: function() {
        },
        scale: 1
      });
    }
  });

  // ../boardzilla-core/node_modules/react-draggable/build/cjs/Draggable.js
  var require_Draggable = __commonJS({
    "../boardzilla-core/node_modules/react-draggable/build/cjs/Draggable.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "DraggableCore", {
        enumerable: true,
        get: function() {
          return _DraggableCore.default;
        }
      });
      exports2.default = void 0;
      var React64 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _reactDom = _interopRequireDefault(require_react_dom());
      var _clsx = _interopRequireDefault(require_clsx());
      var _domFns = require_domFns();
      var _positionFns = require_positionFns();
      var _shims = require_shims();
      var _DraggableCore = _interopRequireDefault(require_DraggableCore());
      var _log = _interopRequireDefault(require_log());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = /* @__PURE__ */ __name(function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        }, "_getRequireWildcardCache"))(nodeInterop);
      }
      __name(_getRequireWildcardCache, "_getRequireWildcardCache");
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      __name(_interopRequireWildcard, "_interopRequireWildcard");
      function _extends10() {
        _extends10 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends10.apply(this, arguments);
      }
      __name(_extends10, "_extends");
      function _defineProperty2(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      __name(_defineProperty2, "_defineProperty");
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      __name(_toPropertyKey, "_toPropertyKey");
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      __name(_toPrimitive, "_toPrimitive");
      var Draggable = class extends React64.Component {
        static {
          __name(this, "Draggable");
        }
        // React 16.3+
        // Arity (props, state)
        static getDerivedStateFromProps(_ref, _ref2) {
          let {
            position
          } = _ref;
          let {
            prevPropsPosition
          } = _ref2;
          if (position && (!prevPropsPosition || position.x !== prevPropsPosition.x || position.y !== prevPropsPosition.y)) {
            (0, _log.default)("Draggable: getDerivedStateFromProps %j", {
              position,
              prevPropsPosition
            });
            return {
              x: position.x,
              y: position.y,
              prevPropsPosition: {
                ...position
              }
            };
          }
          return null;
        }
        constructor(props) {
          super(props);
          _defineProperty2(this, "onDragStart", (e, coreData) => {
            (0, _log.default)("Draggable: onDragStart: %j", coreData);
            const shouldStart = this.props.onStart(e, (0, _positionFns.createDraggableData)(this, coreData));
            if (shouldStart === false)
              return false;
            this.setState({
              dragging: true,
              dragged: true
            });
          });
          _defineProperty2(this, "onDrag", (e, coreData) => {
            if (!this.state.dragging)
              return false;
            (0, _log.default)("Draggable: onDrag: %j", coreData);
            const uiData = (0, _positionFns.createDraggableData)(this, coreData);
            const newState = {
              x: uiData.x,
              y: uiData.y,
              slackX: 0,
              slackY: 0
            };
            if (this.props.bounds) {
              const {
                x,
                y
              } = newState;
              newState.x += this.state.slackX;
              newState.y += this.state.slackY;
              const [newStateX, newStateY] = (0, _positionFns.getBoundPosition)(this, newState.x, newState.y);
              newState.x = newStateX;
              newState.y = newStateY;
              newState.slackX = this.state.slackX + (x - newState.x);
              newState.slackY = this.state.slackY + (y - newState.y);
              uiData.x = newState.x;
              uiData.y = newState.y;
              uiData.deltaX = newState.x - this.state.x;
              uiData.deltaY = newState.y - this.state.y;
            }
            const shouldUpdate = this.props.onDrag(e, uiData);
            if (shouldUpdate === false)
              return false;
            this.setState(newState);
          });
          _defineProperty2(this, "onDragStop", (e, coreData) => {
            if (!this.state.dragging)
              return false;
            const shouldContinue = this.props.onStop(e, (0, _positionFns.createDraggableData)(this, coreData));
            if (shouldContinue === false)
              return false;
            (0, _log.default)("Draggable: onDragStop: %j", coreData);
            const newState = {
              dragging: false,
              slackX: 0,
              slackY: 0
            };
            const controlled = Boolean(this.props.position);
            if (controlled) {
              const {
                x,
                y
              } = this.props.position;
              newState.x = x;
              newState.y = y;
            }
            this.setState(newState);
          });
          this.state = {
            // Whether or not we are currently dragging.
            dragging: false,
            // Whether or not we have been dragged before.
            dragged: false,
            // Current transform x and y.
            x: props.position ? props.position.x : props.defaultPosition.x,
            y: props.position ? props.position.y : props.defaultPosition.y,
            prevPropsPosition: {
              ...props.position
            },
            // Used for compensating for out-of-bounds drags
            slackX: 0,
            slackY: 0,
            // Can only determine if SVG after mounting
            isElementSVG: false
          };
          if (props.position && !(props.onDrag || props.onStop)) {
            console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element.");
          }
        }
        componentDidMount() {
          if (typeof window.SVGElement !== "undefined" && this.findDOMNode() instanceof window.SVGElement) {
            this.setState({
              isElementSVG: true
            });
          }
        }
        componentWillUnmount() {
          this.setState({
            dragging: false
          });
        }
        // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
        // the underlying DOM node ourselves. See the README for more information.
        findDOMNode() {
          var _this$props$nodeRef$c, _this$props;
          return (_this$props$nodeRef$c = (_this$props = this.props) === null || _this$props === void 0 || (_this$props = _this$props.nodeRef) === null || _this$props === void 0 ? void 0 : _this$props.current) !== null && _this$props$nodeRef$c !== void 0 ? _this$props$nodeRef$c : _reactDom.default.findDOMNode(this);
        }
        render() {
          const {
            axis,
            bounds,
            children,
            defaultPosition,
            defaultClassName,
            defaultClassNameDragging,
            defaultClassNameDragged,
            position,
            positionOffset,
            scale: scale2,
            ...draggableCoreProps
          } = this.props;
          let style = {};
          let svgTransform = null;
          const controlled = Boolean(position);
          const draggable = !controlled || this.state.dragging;
          const validPosition = position || defaultPosition;
          const transformOpts = {
            // Set left if horizontal drag is enabled
            x: (0, _positionFns.canDragX)(this) && draggable ? this.state.x : validPosition.x,
            // Set top if vertical drag is enabled
            y: (0, _positionFns.canDragY)(this) && draggable ? this.state.y : validPosition.y
          };
          if (this.state.isElementSVG) {
            svgTransform = (0, _domFns.createSVGTransform)(transformOpts, positionOffset);
          } else {
            style = (0, _domFns.createCSSTransform)(transformOpts, positionOffset);
          }
          const className = (0, _clsx.default)(children.props.className || "", defaultClassName, {
            [defaultClassNameDragging]: this.state.dragging,
            [defaultClassNameDragged]: this.state.dragged
          });
          return /* @__PURE__ */ React64.createElement(_DraggableCore.default, _extends10({}, draggableCoreProps, {
            onStart: this.onDragStart,
            onDrag: this.onDrag,
            onStop: this.onDragStop
          }), /* @__PURE__ */ React64.cloneElement(React64.Children.only(children), {
            className,
            style: {
              ...children.props.style,
              ...style
            },
            transform: svgTransform
          }));
        }
      };
      exports2.default = Draggable;
      _defineProperty2(Draggable, "displayName", "Draggable");
      _defineProperty2(Draggable, "propTypes", {
        // Accepts all props <DraggableCore> accepts.
        ..._DraggableCore.default.propTypes,
        /**
         * `axis` determines which axis the draggable can move.
         *
         *  Note that all callbacks will still return data as normal. This only
         *  controls flushing to the DOM.
         *
         * 'both' allows movement horizontally and vertically.
         * 'x' limits movement to horizontal axis.
         * 'y' limits movement to vertical axis.
         * 'none' limits all movement.
         *
         * Defaults to 'both'.
         */
        axis: _propTypes.default.oneOf(["both", "x", "y", "none"]),
        /**
         * `bounds` determines the range of movement available to the element.
         * Available values are:
         *
         * 'parent' restricts movement within the Draggable's parent node.
         *
         * Alternatively, pass an object with the following properties, all of which are optional:
         *
         * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
         *
         * All values are in px.
         *
         * Example:
         *
         * ```jsx
         *   let App = React.createClass({
         *       render: function () {
         *         return (
         *            <Draggable bounds={{right: 300, bottom: 300}}>
         *              <div>Content</div>
         *           </Draggable>
         *         );
         *       }
         *   });
         * ```
         */
        bounds: _propTypes.default.oneOfType([_propTypes.default.shape({
          left: _propTypes.default.number,
          right: _propTypes.default.number,
          top: _propTypes.default.number,
          bottom: _propTypes.default.number
        }), _propTypes.default.string, _propTypes.default.oneOf([false])]),
        defaultClassName: _propTypes.default.string,
        defaultClassNameDragging: _propTypes.default.string,
        defaultClassNameDragged: _propTypes.default.string,
        /**
         * `defaultPosition` specifies the x and y that the dragged item should start at
         *
         * Example:
         *
         * ```jsx
         *      let App = React.createClass({
         *          render: function () {
         *              return (
         *                  <Draggable defaultPosition={{x: 25, y: 25}}>
         *                      <div>I start with transformX: 25px and transformY: 25px;</div>
         *                  </Draggable>
         *              );
         *          }
         *      });
         * ```
         */
        defaultPosition: _propTypes.default.shape({
          x: _propTypes.default.number,
          y: _propTypes.default.number
        }),
        positionOffset: _propTypes.default.shape({
          x: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
          y: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
        }),
        /**
         * `position`, if present, defines the current position of the element.
         *
         *  This is similar to how form elements in React work - if no `position` is supplied, the component
         *  is uncontrolled.
         *
         * Example:
         *
         * ```jsx
         *      let App = React.createClass({
         *          render: function () {
         *              return (
         *                  <Draggable position={{x: 25, y: 25}}>
         *                      <div>I start with transformX: 25px and transformY: 25px;</div>
         *                  </Draggable>
         *              );
         *          }
         *      });
         * ```
         */
        position: _propTypes.default.shape({
          x: _propTypes.default.number,
          y: _propTypes.default.number
        }),
        /**
         * These properties should be defined on the child, not here.
         */
        className: _shims.dontSetMe,
        style: _shims.dontSetMe,
        transform: _shims.dontSetMe
      });
      _defineProperty2(Draggable, "defaultProps", {
        ..._DraggableCore.default.defaultProps,
        axis: "both",
        bounds: false,
        defaultClassName: "react-draggable",
        defaultClassNameDragging: "react-draggable-dragging",
        defaultClassNameDragged: "react-draggable-dragged",
        defaultPosition: {
          x: 0,
          y: 0
        },
        scale: 1
      });
    }
  });

  // ../boardzilla-core/node_modules/react-draggable/build/cjs/cjs.js
  var require_cjs = __commonJS({
    "../boardzilla-core/node_modules/react-draggable/build/cjs/cjs.js"(exports2, module2) {
      "use strict";
      var {
        default: Draggable,
        DraggableCore: DraggableCore2
      } = require_Draggable();
      module2.exports = Draggable;
      module2.exports.default = Draggable;
      module2.exports.DraggableCore = DraggableCore2;
    }
  });

  // ../boardzilla-core/node_modules/json-stringify-safe/stringify.js
  var require_stringify = __commonJS({
    "../boardzilla-core/node_modules/json-stringify-safe/stringify.js"(exports2, module2) {
      exports2 = module2.exports = stringify;
      exports2.getSerialize = serializer;
      function stringify(obj, replacer, spaces, cycleReplacer) {
        return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
      }
      __name(stringify, "stringify");
      function serializer(replacer, cycleReplacer) {
        var stack = [], keys2 = [];
        if (cycleReplacer == null)
          cycleReplacer = /* @__PURE__ */ __name(function(key, value) {
            if (stack[0] === value)
              return "[Circular ~]";
            return "[Circular ~." + keys2.slice(0, stack.indexOf(value)).join(".") + "]";
          }, "cycleReplacer");
        return function(key, value) {
          if (stack.length > 0) {
            var thisPos = stack.indexOf(this);
            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
            ~thisPos ? keys2.splice(thisPos, Infinity, key) : keys2.push(key);
            if (~stack.indexOf(value))
              value = cycleReplacer.call(this, key, value);
          } else
            stack.push(value);
          return replacer == null ? value : replacer.call(this, key, value);
        };
      }
      __name(serializer, "serializer");
    }
  });

  // ../boardzilla-core/node_modules/random-seed/index.js
  var require_random_seed = __commonJS({
    "../boardzilla-core/node_modules/random-seed/index.js"(exports2, module2) {
      "use strict";
      var stringify = require_stringify();
      var Mash = /* @__PURE__ */ __name(function() {
        var n = 4022871197;
        var mash = /* @__PURE__ */ __name(function(data) {
          if (data) {
            data = data.toString();
            for (var i = 0; i < data.length; i++) {
              n += data.charCodeAt(i);
              var h = 0.02519603282416938 * n;
              n = h >>> 0;
              h -= n;
              h *= n;
              n = h >>> 0;
              h -= n;
              n += h * 4294967296;
            }
            return (n >>> 0) * 23283064365386963e-26;
          } else {
            n = 4022871197;
          }
        }, "mash");
        return mash;
      }, "Mash");
      var uheprng = /* @__PURE__ */ __name(function(seed) {
        return function() {
          var o = 48;
          var c = 1;
          var p = o;
          var s = new Array(o);
          var i;
          var j;
          var k = 0;
          var mash = new Mash();
          for (i = 0; i < o; i++) {
            s[i] = mash(Math.random());
          }
          var rawprng = /* @__PURE__ */ __name(function() {
            if (++p >= o) {
              p = 0;
            }
            var t = 1768863 * s[p] + c * 23283064365386963e-26;
            return s[p] = t - (c = t | 0);
          }, "rawprng");
          var random3 = /* @__PURE__ */ __name(function(range2) {
            return Math.floor(range2 * (rawprng() + (rawprng() * 2097152 | 0) * 11102230246251565e-32));
          }, "random");
          random3.string = function(count) {
            var i2;
            var s2 = "";
            for (i2 = 0; i2 < count; i2++) {
              s2 += String.fromCharCode(33 + random3(94));
            }
            return s2;
          };
          var hash = /* @__PURE__ */ __name(function() {
            var args = Array.prototype.slice.call(arguments);
            for (i = 0; i < args.length; i++) {
              for (j = 0; j < o; j++) {
                s[j] -= mash(args[i]);
                if (s[j] < 0) {
                  s[j] += 1;
                }
              }
            }
          }, "hash");
          random3.cleanString = function(inStr) {
            inStr = inStr.replace(/(^\s*)|(\s*$)/gi, "");
            inStr = inStr.replace(/[\x00-\x1F]/gi, "");
            inStr = inStr.replace(/\n /, "\n");
            return inStr;
          };
          random3.hashString = function(inStr) {
            inStr = random3.cleanString(inStr);
            mash(inStr);
            for (i = 0; i < inStr.length; i++) {
              k = inStr.charCodeAt(i);
              for (j = 0; j < o; j++) {
                s[j] -= mash(k);
                if (s[j] < 0) {
                  s[j] += 1;
                }
              }
            }
          };
          random3.seed = function(seed2) {
            if (typeof seed2 === "undefined" || seed2 === null) {
              seed2 = Math.random();
            }
            if (typeof seed2 !== "string") {
              seed2 = stringify(seed2, function(key, value) {
                if (typeof value === "function") {
                  return value.toString();
                }
                return value;
              });
            }
            random3.initState();
            random3.hashString(seed2);
          };
          random3.addEntropy = function() {
            var args = [];
            for (i = 0; i < arguments.length; i++) {
              args.push(arguments[i]);
            }
            hash(k++ + (/* @__PURE__ */ new Date()).getTime() + args.join("") + Math.random());
          };
          random3.initState = function() {
            mash();
            for (i = 0; i < o; i++) {
              s[i] = mash(" ");
            }
            c = 1;
            p = o;
          };
          random3.done = function() {
            mash = null;
          };
          if (typeof seed !== "undefined") {
            random3.seed(seed);
          }
          random3.range = function(range2) {
            return random3(range2);
          };
          random3.random = function() {
            return random3(Number.MAX_VALUE - 1) / Number.MAX_VALUE;
          };
          random3.floatBetween = function(min, max) {
            return random3.random() * (max - min) + min;
          };
          random3.intBetween = function(min, max) {
            return Math.floor(random3.random() * (max - min + 1)) + min;
          };
          return random3;
        }();
      }, "uheprng");
      uheprng.create = function(seed) {
        return new uheprng(seed);
      };
      module2.exports = uheprng;
    }
  });

  // ../boardzilla-core/node_modules/graphology/dist/graphology.umd.min.js
  var require_graphology_umd_min = __commonJS({
    "../boardzilla-core/node_modules/graphology/dist/graphology.umd.min.js"(exports2, module2) {
      !function(t, e) {
        "object" == typeof exports2 && "undefined" != typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).graphology = e();
      }(exports2, function() {
        "use strict";
        function t(e2) {
          return t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t2) {
            return typeof t2;
          } : function(t2) {
            return t2 && "function" == typeof Symbol && t2.constructor === Symbol && t2 !== Symbol.prototype ? "symbol" : typeof t2;
          }, t(e2);
        }
        __name(t, "t");
        function e(t2, e2) {
          t2.prototype = Object.create(e2.prototype), t2.prototype.constructor = t2, r(t2, e2);
        }
        __name(e, "e");
        function n(t2) {
          return n = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
            return t3.__proto__ || Object.getPrototypeOf(t3);
          }, n(t2);
        }
        __name(n, "n");
        function r(t2, e2) {
          return r = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
            return t3.__proto__ = e3, t3;
          }, r(t2, e2);
        }
        __name(r, "r");
        function i() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            })), true;
          } catch (t2) {
            return false;
          }
        }
        __name(i, "i");
        function o(t2, e2, n2) {
          return o = i() ? Reflect.construct.bind() : function(t3, e3, n3) {
            var i2 = [null];
            i2.push.apply(i2, e3);
            var o2 = new (Function.bind.apply(t3, i2))();
            return n3 && r(o2, n3.prototype), o2;
          }, o.apply(null, arguments);
        }
        __name(o, "o");
        function a(t2) {
          var e2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
          return a = /* @__PURE__ */ __name(function(t3) {
            if (null === t3 || (i2 = t3, -1 === Function.toString.call(i2).indexOf("[native code]")))
              return t3;
            var i2;
            if ("function" != typeof t3)
              throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== e2) {
              if (e2.has(t3))
                return e2.get(t3);
              e2.set(t3, a2);
            }
            function a2() {
              return o(t3, arguments, n(this).constructor);
            }
            __name(a2, "a");
            return a2.prototype = Object.create(t3.prototype, { constructor: { value: a2, enumerable: false, writable: true, configurable: true } }), r(a2, t3);
          }, "a"), a(t2);
        }
        __name(a, "a");
        function c(t2) {
          if (void 0 === t2)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return t2;
        }
        __name(c, "c");
        var u = /* @__PURE__ */ __name(function() {
          for (var t2 = arguments[0], e2 = 1, n2 = arguments.length; e2 < n2; e2++)
            if (arguments[e2])
              for (var r2 in arguments[e2])
                t2[r2] = arguments[e2][r2];
          return t2;
        }, "u");
        function d(t2, e2, n2, r2) {
          var i2 = t2._nodes.get(e2), o2 = null;
          return i2 ? o2 = "mixed" === r2 ? i2.out && i2.out[n2] || i2.undirected && i2.undirected[n2] : "directed" === r2 ? i2.out && i2.out[n2] : i2.undirected && i2.undirected[n2] : o2;
        }
        __name(d, "d");
        function s(e2) {
          return "object" === t(e2) && null !== e2;
        }
        __name(s, "s");
        function h(t2) {
          var e2;
          for (e2 in t2)
            return false;
          return true;
        }
        __name(h, "h");
        function p(t2, e2, n2) {
          Object.defineProperty(t2, e2, { enumerable: false, configurable: false, writable: true, value: n2 });
        }
        __name(p, "p");
        function f(t2, e2, n2) {
          var r2 = { enumerable: true, configurable: true };
          "function" == typeof n2 ? r2.get = n2 : (r2.value = n2, r2.writable = false), Object.defineProperty(t2, e2, r2);
        }
        __name(f, "f");
        function l(t2) {
          return !!s(t2) && !(t2.attributes && !Array.isArray(t2.attributes));
        }
        __name(l, "l");
        "function" == typeof Object.assign && (u = Object.assign);
        var g, y = { exports: {} }, w = "object" == typeof Reflect ? Reflect : null, v = w && "function" == typeof w.apply ? w.apply : function(t2, e2, n2) {
          return Function.prototype.apply.call(t2, e2, n2);
        };
        g = w && "function" == typeof w.ownKeys ? w.ownKeys : Object.getOwnPropertySymbols ? function(t2) {
          return Object.getOwnPropertyNames(t2).concat(Object.getOwnPropertySymbols(t2));
        } : function(t2) {
          return Object.getOwnPropertyNames(t2);
        };
        var b = Number.isNaN || function(t2) {
          return t2 != t2;
        };
        function m() {
          m.init.call(this);
        }
        __name(m, "m");
        y.exports = m, y.exports.once = function(t2, e2) {
          return new Promise(function(n2, r2) {
            function i2(n3) {
              t2.removeListener(e2, o2), r2(n3);
            }
            __name(i2, "i");
            function o2() {
              "function" == typeof t2.removeListener && t2.removeListener("error", i2), n2([].slice.call(arguments));
            }
            __name(o2, "o");
            U(t2, e2, o2, { once: true }), "error" !== e2 && function(t3, e3, n3) {
              "function" == typeof t3.on && U(t3, "error", e3, n3);
            }(t2, i2, { once: true });
          });
        }, m.EventEmitter = m, m.prototype._events = void 0, m.prototype._eventsCount = 0, m.prototype._maxListeners = void 0;
        var k = 10;
        function _(t2) {
          if ("function" != typeof t2)
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t2);
        }
        __name(_, "_");
        function G(t2) {
          return void 0 === t2._maxListeners ? m.defaultMaxListeners : t2._maxListeners;
        }
        __name(G, "G");
        function x(t2, e2, n2, r2) {
          var i2, o2, a2, c2;
          if (_(n2), void 0 === (o2 = t2._events) ? (o2 = t2._events = /* @__PURE__ */ Object.create(null), t2._eventsCount = 0) : (void 0 !== o2.newListener && (t2.emit("newListener", e2, n2.listener ? n2.listener : n2), o2 = t2._events), a2 = o2[e2]), void 0 === a2)
            a2 = o2[e2] = n2, ++t2._eventsCount;
          else if ("function" == typeof a2 ? a2 = o2[e2] = r2 ? [n2, a2] : [a2, n2] : r2 ? a2.unshift(n2) : a2.push(n2), (i2 = G(t2)) > 0 && a2.length > i2 && !a2.warned) {
            a2.warned = true;
            var u2 = new Error("Possible EventEmitter memory leak detected. " + a2.length + " " + String(e2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            u2.name = "MaxListenersExceededWarning", u2.emitter = t2, u2.type = e2, u2.count = a2.length, c2 = u2, console && console.warn && console.warn(c2);
          }
          return t2;
        }
        __name(x, "x");
        function E() {
          if (!this.fired)
            return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
        }
        __name(E, "E");
        function A(t2, e2, n2) {
          var r2 = { fired: false, wrapFn: void 0, target: t2, type: e2, listener: n2 }, i2 = E.bind(r2);
          return i2.listener = n2, r2.wrapFn = i2, i2;
        }
        __name(A, "A");
        function L(t2, e2, n2) {
          var r2 = t2._events;
          if (void 0 === r2)
            return [];
          var i2 = r2[e2];
          return void 0 === i2 ? [] : "function" == typeof i2 ? n2 ? [i2.listener || i2] : [i2] : n2 ? function(t3) {
            for (var e3 = new Array(t3.length), n3 = 0; n3 < e3.length; ++n3)
              e3[n3] = t3[n3].listener || t3[n3];
            return e3;
          }(i2) : D(i2, i2.length);
        }
        __name(L, "L");
        function S(t2) {
          var e2 = this._events;
          if (void 0 !== e2) {
            var n2 = e2[t2];
            if ("function" == typeof n2)
              return 1;
            if (void 0 !== n2)
              return n2.length;
          }
          return 0;
        }
        __name(S, "S");
        function D(t2, e2) {
          for (var n2 = new Array(e2), r2 = 0; r2 < e2; ++r2)
            n2[r2] = t2[r2];
          return n2;
        }
        __name(D, "D");
        function U(t2, e2, n2, r2) {
          if ("function" == typeof t2.on)
            r2.once ? t2.once(e2, n2) : t2.on(e2, n2);
          else {
            if ("function" != typeof t2.addEventListener)
              throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t2);
            t2.addEventListener(e2, /* @__PURE__ */ __name(function i2(o2) {
              r2.once && t2.removeEventListener(e2, i2), n2(o2);
            }, "i"));
          }
        }
        __name(U, "U");
        function N(t2) {
          if ("function" != typeof t2)
            throw new Error("obliterator/iterator: expecting a function!");
          this.next = t2;
        }
        __name(N, "N");
        Object.defineProperty(m, "defaultMaxListeners", { enumerable: true, get: function() {
          return k;
        }, set: function(t2) {
          if ("number" != typeof t2 || t2 < 0 || b(t2))
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t2 + ".");
          k = t2;
        } }), m.init = function() {
          void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
        }, m.prototype.setMaxListeners = function(t2) {
          if ("number" != typeof t2 || t2 < 0 || b(t2))
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t2 + ".");
          return this._maxListeners = t2, this;
        }, m.prototype.getMaxListeners = function() {
          return G(this);
        }, m.prototype.emit = function(t2) {
          for (var e2 = [], n2 = 1; n2 < arguments.length; n2++)
            e2.push(arguments[n2]);
          var r2 = "error" === t2, i2 = this._events;
          if (void 0 !== i2)
            r2 = r2 && void 0 === i2.error;
          else if (!r2)
            return false;
          if (r2) {
            var o2;
            if (e2.length > 0 && (o2 = e2[0]), o2 instanceof Error)
              throw o2;
            var a2 = new Error("Unhandled error." + (o2 ? " (" + o2.message + ")" : ""));
            throw a2.context = o2, a2;
          }
          var c2 = i2[t2];
          if (void 0 === c2)
            return false;
          if ("function" == typeof c2)
            v(c2, this, e2);
          else {
            var u2 = c2.length, d2 = D(c2, u2);
            for (n2 = 0; n2 < u2; ++n2)
              v(d2[n2], this, e2);
          }
          return true;
        }, m.prototype.addListener = function(t2, e2) {
          return x(this, t2, e2, false);
        }, m.prototype.on = m.prototype.addListener, m.prototype.prependListener = function(t2, e2) {
          return x(this, t2, e2, true);
        }, m.prototype.once = function(t2, e2) {
          return _(e2), this.on(t2, A(this, t2, e2)), this;
        }, m.prototype.prependOnceListener = function(t2, e2) {
          return _(e2), this.prependListener(t2, A(this, t2, e2)), this;
        }, m.prototype.removeListener = function(t2, e2) {
          var n2, r2, i2, o2, a2;
          if (_(e2), void 0 === (r2 = this._events))
            return this;
          if (void 0 === (n2 = r2[t2]))
            return this;
          if (n2 === e2 || n2.listener === e2)
            0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete r2[t2], r2.removeListener && this.emit("removeListener", t2, n2.listener || e2));
          else if ("function" != typeof n2) {
            for (i2 = -1, o2 = n2.length - 1; o2 >= 0; o2--)
              if (n2[o2] === e2 || n2[o2].listener === e2) {
                a2 = n2[o2].listener, i2 = o2;
                break;
              }
            if (i2 < 0)
              return this;
            0 === i2 ? n2.shift() : function(t3, e3) {
              for (; e3 + 1 < t3.length; e3++)
                t3[e3] = t3[e3 + 1];
              t3.pop();
            }(n2, i2), 1 === n2.length && (r2[t2] = n2[0]), void 0 !== r2.removeListener && this.emit("removeListener", t2, a2 || e2);
          }
          return this;
        }, m.prototype.off = m.prototype.removeListener, m.prototype.removeAllListeners = function(t2) {
          var e2, n2, r2;
          if (void 0 === (n2 = this._events))
            return this;
          if (void 0 === n2.removeListener)
            return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== n2[t2] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete n2[t2]), this;
          if (0 === arguments.length) {
            var i2, o2 = Object.keys(n2);
            for (r2 = 0; r2 < o2.length; ++r2)
              "removeListener" !== (i2 = o2[r2]) && this.removeAllListeners(i2);
            return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
          }
          if ("function" == typeof (e2 = n2[t2]))
            this.removeListener(t2, e2);
          else if (void 0 !== e2)
            for (r2 = e2.length - 1; r2 >= 0; r2--)
              this.removeListener(t2, e2[r2]);
          return this;
        }, m.prototype.listeners = function(t2) {
          return L(this, t2, true);
        }, m.prototype.rawListeners = function(t2) {
          return L(this, t2, false);
        }, m.listenerCount = function(t2, e2) {
          return "function" == typeof t2.listenerCount ? t2.listenerCount(e2) : S.call(t2, e2);
        }, m.prototype.listenerCount = S, m.prototype.eventNames = function() {
          return this._eventsCount > 0 ? g(this._events) : [];
        }, "undefined" != typeof Symbol && (N.prototype[Symbol.iterator] = function() {
          return this;
        }), N.of = function() {
          var t2 = arguments, e2 = t2.length, n2 = 0;
          return new N(function() {
            return n2 >= e2 ? { done: true } : { done: false, value: t2[n2++] };
          });
        }, N.empty = function() {
          return new N(function() {
            return { done: true };
          });
        }, N.fromSequence = function(t2) {
          var e2 = 0, n2 = t2.length;
          return new N(function() {
            return e2 >= n2 ? { done: true } : { done: false, value: t2[e2++] };
          });
        }, N.is = function(t2) {
          return t2 instanceof N || "object" == typeof t2 && null !== t2 && "function" == typeof t2.next;
        };
        var O = N, j = {};
        j.ARRAY_BUFFER_SUPPORT = "undefined" != typeof ArrayBuffer, j.SYMBOL_SUPPORT = "undefined" != typeof Symbol;
        var C = O, M = j, z = M.ARRAY_BUFFER_SUPPORT, W = M.SYMBOL_SUPPORT;
        var P = /* @__PURE__ */ __name(function(t2) {
          var e2 = function(t3) {
            return "string" == typeof t3 || Array.isArray(t3) || z && ArrayBuffer.isView(t3) ? C.fromSequence(t3) : "object" != typeof t3 || null === t3 ? null : W && "function" == typeof t3[Symbol.iterator] ? t3[Symbol.iterator]() : "function" == typeof t3.next ? t3 : null;
          }(t2);
          if (!e2)
            throw new Error("obliterator: target is not iterable nor a valid iterator.");
          return e2;
        }, "P"), R = P, K = /* @__PURE__ */ __name(function(t2, e2) {
          for (var n2, r2 = arguments.length > 1 ? e2 : 1 / 0, i2 = r2 !== 1 / 0 ? new Array(r2) : [], o2 = 0, a2 = R(t2); ; ) {
            if (o2 === r2)
              return i2;
            if ((n2 = a2.next()).done)
              return o2 !== e2 && (i2.length = o2), i2;
            i2[o2++] = n2.value;
          }
        }, "K"), T = function(t2) {
          function n2(e2) {
            var n3;
            return (n3 = t2.call(this) || this).name = "GraphError", n3.message = e2, n3;
          }
          __name(n2, "n");
          return e(n2, t2), n2;
        }(a(Error)), B = function(t2) {
          function n2(e2) {
            var r2;
            return (r2 = t2.call(this, e2) || this).name = "InvalidArgumentsGraphError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(c(r2), n2.prototype.constructor), r2;
          }
          __name(n2, "n");
          return e(n2, t2), n2;
        }(T), F = function(t2) {
          function n2(e2) {
            var r2;
            return (r2 = t2.call(this, e2) || this).name = "NotFoundGraphError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(c(r2), n2.prototype.constructor), r2;
          }
          __name(n2, "n");
          return e(n2, t2), n2;
        }(T), I = function(t2) {
          function n2(e2) {
            var r2;
            return (r2 = t2.call(this, e2) || this).name = "UsageGraphError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(c(r2), n2.prototype.constructor), r2;
          }
          __name(n2, "n");
          return e(n2, t2), n2;
        }(T);
        function Y(t2, e2) {
          this.key = t2, this.attributes = e2, this.clear();
        }
        __name(Y, "Y");
        function q(t2, e2) {
          this.key = t2, this.attributes = e2, this.clear();
        }
        __name(q, "q");
        function J(t2, e2) {
          this.key = t2, this.attributes = e2, this.clear();
        }
        __name(J, "J");
        function V(t2, e2, n2, r2, i2) {
          this.key = e2, this.attributes = i2, this.undirected = t2, this.source = n2, this.target = r2;
        }
        __name(V, "V");
        Y.prototype.clear = function() {
          this.inDegree = 0, this.outDegree = 0, this.undirectedDegree = 0, this.undirectedLoops = 0, this.directedLoops = 0, this.in = {}, this.out = {}, this.undirected = {};
        }, q.prototype.clear = function() {
          this.inDegree = 0, this.outDegree = 0, this.directedLoops = 0, this.in = {}, this.out = {};
        }, J.prototype.clear = function() {
          this.undirectedDegree = 0, this.undirectedLoops = 0, this.undirected = {};
        }, V.prototype.attach = function() {
          var t2 = "out", e2 = "in";
          this.undirected && (t2 = e2 = "undirected");
          var n2 = this.source.key, r2 = this.target.key;
          this.source[t2][r2] = this, this.undirected && n2 === r2 || (this.target[e2][n2] = this);
        }, V.prototype.attachMulti = function() {
          var t2 = "out", e2 = "in", n2 = this.source.key, r2 = this.target.key;
          this.undirected && (t2 = e2 = "undirected");
          var i2 = this.source[t2], o2 = i2[r2];
          if (void 0 === o2)
            return i2[r2] = this, void (this.undirected && n2 === r2 || (this.target[e2][n2] = this));
          o2.previous = this, this.next = o2, i2[r2] = this, this.target[e2][n2] = this;
        }, V.prototype.detach = function() {
          var t2 = this.source.key, e2 = this.target.key, n2 = "out", r2 = "in";
          this.undirected && (n2 = r2 = "undirected"), delete this.source[n2][e2], delete this.target[r2][t2];
        }, V.prototype.detachMulti = function() {
          var t2 = this.source.key, e2 = this.target.key, n2 = "out", r2 = "in";
          this.undirected && (n2 = r2 = "undirected"), void 0 === this.previous ? void 0 === this.next ? (delete this.source[n2][e2], delete this.target[r2][t2]) : (this.next.previous = void 0, this.source[n2][e2] = this.next, this.target[r2][t2] = this.next) : (this.previous.next = this.next, void 0 !== this.next && (this.next.previous = this.previous));
        };
        function H(t2, e2, n2, r2, i2, o2, a2) {
          var c2, u2, d2, s2;
          if (r2 = "" + r2, 0 === n2) {
            if (!(c2 = t2._nodes.get(r2)))
              throw new F("Graph.".concat(e2, ': could not find the "').concat(r2, '" node in the graph.'));
            d2 = i2, s2 = o2;
          } else if (3 === n2) {
            if (i2 = "" + i2, !(u2 = t2._edges.get(i2)))
              throw new F("Graph.".concat(e2, ': could not find the "').concat(i2, '" edge in the graph.'));
            var h2 = u2.source.key, p2 = u2.target.key;
            if (r2 === h2)
              c2 = u2.target;
            else {
              if (r2 !== p2)
                throw new F("Graph.".concat(e2, ': the "').concat(r2, '" node is not attached to the "').concat(i2, '" edge (').concat(h2, ", ").concat(p2, ")."));
              c2 = u2.source;
            }
            d2 = o2, s2 = a2;
          } else {
            if (!(u2 = t2._edges.get(r2)))
              throw new F("Graph.".concat(e2, ': could not find the "').concat(r2, '" edge in the graph.'));
            c2 = 1 === n2 ? u2.source : u2.target, d2 = i2, s2 = o2;
          }
          return [c2, d2, s2];
        }
        __name(H, "H");
        var Q = [{ name: function(t2) {
          return "get".concat(t2, "Attribute");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2, i2) {
            var o2 = H(this, e2, n2, t3, r2, i2), a2 = o2[0], c2 = o2[1];
            return a2.attributes[c2];
          };
        } }, { name: function(t2) {
          return "get".concat(t2, "Attributes");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2) {
            return H(this, e2, n2, t3, r2)[0].attributes;
          };
        } }, { name: function(t2) {
          return "has".concat(t2, "Attribute");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2, i2) {
            var o2 = H(this, e2, n2, t3, r2, i2), a2 = o2[0], c2 = o2[1];
            return a2.attributes.hasOwnProperty(c2);
          };
        } }, { name: function(t2) {
          return "set".concat(t2, "Attribute");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2, i2, o2) {
            var a2 = H(this, e2, n2, t3, r2, i2, o2), c2 = a2[0], u2 = a2[1], d2 = a2[2];
            return c2.attributes[u2] = d2, this.emit("nodeAttributesUpdated", { key: c2.key, type: "set", attributes: c2.attributes, name: u2 }), this;
          };
        } }, { name: function(t2) {
          return "update".concat(t2, "Attribute");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2, i2, o2) {
            var a2 = H(this, e2, n2, t3, r2, i2, o2), c2 = a2[0], u2 = a2[1], d2 = a2[2];
            if ("function" != typeof d2)
              throw new B("Graph.".concat(e2, ": updater should be a function."));
            var s2 = c2.attributes, h2 = d2(s2[u2]);
            return s2[u2] = h2, this.emit("nodeAttributesUpdated", { key: c2.key, type: "set", attributes: c2.attributes, name: u2 }), this;
          };
        } }, { name: function(t2) {
          return "remove".concat(t2, "Attribute");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2, i2) {
            var o2 = H(this, e2, n2, t3, r2, i2), a2 = o2[0], c2 = o2[1];
            return delete a2.attributes[c2], this.emit("nodeAttributesUpdated", { key: a2.key, type: "remove", attributes: a2.attributes, name: c2 }), this;
          };
        } }, { name: function(t2) {
          return "replace".concat(t2, "Attributes");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2, i2) {
            var o2 = H(this, e2, n2, t3, r2, i2), a2 = o2[0], c2 = o2[1];
            if (!s(c2))
              throw new B("Graph.".concat(e2, ": provided attributes are not a plain object."));
            return a2.attributes = c2, this.emit("nodeAttributesUpdated", { key: a2.key, type: "replace", attributes: a2.attributes }), this;
          };
        } }, { name: function(t2) {
          return "merge".concat(t2, "Attributes");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2, i2) {
            var o2 = H(this, e2, n2, t3, r2, i2), a2 = o2[0], c2 = o2[1];
            if (!s(c2))
              throw new B("Graph.".concat(e2, ": provided attributes are not a plain object."));
            return u(a2.attributes, c2), this.emit("nodeAttributesUpdated", { key: a2.key, type: "merge", attributes: a2.attributes, data: c2 }), this;
          };
        } }, { name: function(t2) {
          return "update".concat(t2, "Attributes");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2, i2) {
            var o2 = H(this, e2, n2, t3, r2, i2), a2 = o2[0], c2 = o2[1];
            if ("function" != typeof c2)
              throw new B("Graph.".concat(e2, ": provided updater is not a function."));
            return a2.attributes = c2(a2.attributes), this.emit("nodeAttributesUpdated", { key: a2.key, type: "update", attributes: a2.attributes }), this;
          };
        } }];
        var X = [{ name: function(t2) {
          return "get".concat(t2, "Attribute");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2) {
            var i2;
            if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type)
              throw new I("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new I("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var o2 = "" + t3, a2 = "" + r2;
              if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2)))
                throw new F("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
            } else {
              if ("mixed" !== n2)
                throw new I("Graph.".concat(e2, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              if (t3 = "" + t3, !(i2 = this._edges.get(t3)))
                throw new F("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
            }
            return i2.attributes[r2];
          };
        } }, { name: function(t2) {
          return "get".concat(t2, "Attributes");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3) {
            var r2;
            if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type)
              throw new I("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 1) {
              if (this.multi)
                throw new I("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var i2 = "" + t3, o2 = "" + arguments[1];
              if (!(r2 = d(this, i2, o2, n2)))
                throw new F("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(i2, '" - "').concat(o2, '").'));
            } else {
              if ("mixed" !== n2)
                throw new I("Graph.".concat(e2, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              if (t3 = "" + t3, !(r2 = this._edges.get(t3)))
                throw new F("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
            }
            return r2.attributes;
          };
        } }, { name: function(t2) {
          return "has".concat(t2, "Attribute");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2) {
            var i2;
            if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type)
              throw new I("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new I("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var o2 = "" + t3, a2 = "" + r2;
              if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2)))
                throw new F("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
            } else {
              if ("mixed" !== n2)
                throw new I("Graph.".concat(e2, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              if (t3 = "" + t3, !(i2 = this._edges.get(t3)))
                throw new F("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
            }
            return i2.attributes.hasOwnProperty(r2);
          };
        } }, { name: function(t2) {
          return "set".concat(t2, "Attribute");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2, i2) {
            var o2;
            if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type)
              throw new I("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 3) {
              if (this.multi)
                throw new I("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var a2 = "" + t3, c2 = "" + r2;
              if (r2 = arguments[2], i2 = arguments[3], !(o2 = d(this, a2, c2, n2)))
                throw new F("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(a2, '" - "').concat(c2, '").'));
            } else {
              if ("mixed" !== n2)
                throw new I("Graph.".concat(e2, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              if (t3 = "" + t3, !(o2 = this._edges.get(t3)))
                throw new F("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
            }
            return o2.attributes[r2] = i2, this.emit("edgeAttributesUpdated", { key: o2.key, type: "set", attributes: o2.attributes, name: r2 }), this;
          };
        } }, { name: function(t2) {
          return "update".concat(t2, "Attribute");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2, i2) {
            var o2;
            if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type)
              throw new I("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 3) {
              if (this.multi)
                throw new I("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var a2 = "" + t3, c2 = "" + r2;
              if (r2 = arguments[2], i2 = arguments[3], !(o2 = d(this, a2, c2, n2)))
                throw new F("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(a2, '" - "').concat(c2, '").'));
            } else {
              if ("mixed" !== n2)
                throw new I("Graph.".concat(e2, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              if (t3 = "" + t3, !(o2 = this._edges.get(t3)))
                throw new F("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
            }
            if ("function" != typeof i2)
              throw new B("Graph.".concat(e2, ": updater should be a function."));
            return o2.attributes[r2] = i2(o2.attributes[r2]), this.emit("edgeAttributesUpdated", { key: o2.key, type: "set", attributes: o2.attributes, name: r2 }), this;
          };
        } }, { name: function(t2) {
          return "remove".concat(t2, "Attribute");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2) {
            var i2;
            if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type)
              throw new I("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new I("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var o2 = "" + t3, a2 = "" + r2;
              if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2)))
                throw new F("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
            } else {
              if ("mixed" !== n2)
                throw new I("Graph.".concat(e2, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              if (t3 = "" + t3, !(i2 = this._edges.get(t3)))
                throw new F("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
            }
            return delete i2.attributes[r2], this.emit("edgeAttributesUpdated", { key: i2.key, type: "remove", attributes: i2.attributes, name: r2 }), this;
          };
        } }, { name: function(t2) {
          return "replace".concat(t2, "Attributes");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2) {
            var i2;
            if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type)
              throw new I("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new I("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var o2 = "" + t3, a2 = "" + r2;
              if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2)))
                throw new F("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
            } else {
              if ("mixed" !== n2)
                throw new I("Graph.".concat(e2, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              if (t3 = "" + t3, !(i2 = this._edges.get(t3)))
                throw new F("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
            }
            if (!s(r2))
              throw new B("Graph.".concat(e2, ": provided attributes are not a plain object."));
            return i2.attributes = r2, this.emit("edgeAttributesUpdated", { key: i2.key, type: "replace", attributes: i2.attributes }), this;
          };
        } }, { name: function(t2) {
          return "merge".concat(t2, "Attributes");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2) {
            var i2;
            if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type)
              throw new I("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new I("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var o2 = "" + t3, a2 = "" + r2;
              if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2)))
                throw new F("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
            } else {
              if ("mixed" !== n2)
                throw new I("Graph.".concat(e2, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              if (t3 = "" + t3, !(i2 = this._edges.get(t3)))
                throw new F("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
            }
            if (!s(r2))
              throw new B("Graph.".concat(e2, ": provided attributes are not a plain object."));
            return u(i2.attributes, r2), this.emit("edgeAttributesUpdated", { key: i2.key, type: "merge", attributes: i2.attributes, data: r2 }), this;
          };
        } }, { name: function(t2) {
          return "update".concat(t2, "Attributes");
        }, attacher: function(t2, e2, n2) {
          t2.prototype[e2] = function(t3, r2) {
            var i2;
            if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type)
              throw new I("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new I("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var o2 = "" + t3, a2 = "" + r2;
              if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2)))
                throw new F("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
            } else {
              if ("mixed" !== n2)
                throw new I("Graph.".concat(e2, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              if (t3 = "" + t3, !(i2 = this._edges.get(t3)))
                throw new F("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
            }
            if ("function" != typeof r2)
              throw new B("Graph.".concat(e2, ": provided updater is not a function."));
            return i2.attributes = r2(i2.attributes), this.emit("edgeAttributesUpdated", { key: i2.key, type: "update", attributes: i2.attributes }), this;
          };
        } }];
        var Z = O, $ = P, tt = /* @__PURE__ */ __name(function() {
          var t2 = arguments, e2 = null, n2 = -1;
          return new Z(function() {
            for (var r2 = null; ; ) {
              if (null === e2) {
                if (++n2 >= t2.length)
                  return { done: true };
                e2 = $(t2[n2]);
              }
              if (true !== (r2 = e2.next()).done)
                break;
              e2 = null;
            }
            return r2;
          });
        }, "tt"), et = [{ name: "edges", type: "mixed" }, { name: "inEdges", type: "directed", direction: "in" }, { name: "outEdges", type: "directed", direction: "out" }, { name: "inboundEdges", type: "mixed", direction: "in" }, { name: "outboundEdges", type: "mixed", direction: "out" }, { name: "directedEdges", type: "directed" }, { name: "undirectedEdges", type: "undirected" }];
        function nt(t2, e2, n2, r2) {
          var i2 = false;
          for (var o2 in e2)
            if (o2 !== r2) {
              var a2 = e2[o2];
              if (i2 = n2(a2.key, a2.attributes, a2.source.key, a2.target.key, a2.source.attributes, a2.target.attributes, a2.undirected), t2 && i2)
                return a2.key;
            }
        }
        __name(nt, "nt");
        function rt(t2, e2, n2, r2) {
          var i2, o2, a2, c2 = false;
          for (var u2 in e2)
            if (u2 !== r2) {
              i2 = e2[u2];
              do {
                if (o2 = i2.source, a2 = i2.target, c2 = n2(i2.key, i2.attributes, o2.key, a2.key, o2.attributes, a2.attributes, i2.undirected), t2 && c2)
                  return i2.key;
                i2 = i2.next;
              } while (void 0 !== i2);
            }
        }
        __name(rt, "rt");
        function it(t2, e2) {
          var n2, r2 = Object.keys(t2), i2 = r2.length, o2 = 0;
          return new O(function() {
            do {
              if (n2)
                n2 = n2.next;
              else {
                if (o2 >= i2)
                  return { done: true };
                var a2 = r2[o2++];
                if (a2 === e2) {
                  n2 = void 0;
                  continue;
                }
                n2 = t2[a2];
              }
            } while (!n2);
            return { done: false, value: { edge: n2.key, attributes: n2.attributes, source: n2.source.key, target: n2.target.key, sourceAttributes: n2.source.attributes, targetAttributes: n2.target.attributes, undirected: n2.undirected } };
          });
        }
        __name(it, "it");
        function ot(t2, e2, n2, r2) {
          var i2 = e2[n2];
          if (i2) {
            var o2 = i2.source, a2 = i2.target;
            return r2(i2.key, i2.attributes, o2.key, a2.key, o2.attributes, a2.attributes, i2.undirected) && t2 ? i2.key : void 0;
          }
        }
        __name(ot, "ot");
        function at(t2, e2, n2, r2) {
          var i2 = e2[n2];
          if (i2) {
            var o2 = false;
            do {
              if (o2 = r2(i2.key, i2.attributes, i2.source.key, i2.target.key, i2.source.attributes, i2.target.attributes, i2.undirected), t2 && o2)
                return i2.key;
              i2 = i2.next;
            } while (void 0 !== i2);
          }
        }
        __name(at, "at");
        function ct(t2, e2) {
          var n2 = t2[e2];
          return void 0 !== n2.next ? new O(function() {
            if (!n2)
              return { done: true };
            var t3 = { edge: n2.key, attributes: n2.attributes, source: n2.source.key, target: n2.target.key, sourceAttributes: n2.source.attributes, targetAttributes: n2.target.attributes, undirected: n2.undirected };
            return n2 = n2.next, { done: false, value: t3 };
          }) : O.of({ edge: n2.key, attributes: n2.attributes, source: n2.source.key, target: n2.target.key, sourceAttributes: n2.source.attributes, targetAttributes: n2.target.attributes, undirected: n2.undirected });
        }
        __name(ct, "ct");
        function ut(t2, e2) {
          if (0 === t2.size)
            return [];
          if ("mixed" === e2 || e2 === t2.type)
            return "function" == typeof Array.from ? Array.from(t2._edges.keys()) : K(t2._edges.keys(), t2._edges.size);
          for (var n2, r2, i2 = "undirected" === e2 ? t2.undirectedSize : t2.directedSize, o2 = new Array(i2), a2 = "undirected" === e2, c2 = t2._edges.values(), u2 = 0; true !== (n2 = c2.next()).done; )
            (r2 = n2.value).undirected === a2 && (o2[u2++] = r2.key);
          return o2;
        }
        __name(ut, "ut");
        function dt(t2, e2, n2, r2) {
          if (0 !== e2.size) {
            for (var i2, o2, a2 = "mixed" !== n2 && n2 !== e2.type, c2 = "undirected" === n2, u2 = false, d2 = e2._edges.values(); true !== (i2 = d2.next()).done; )
              if (o2 = i2.value, !a2 || o2.undirected === c2) {
                var s2 = o2, h2 = s2.key, p2 = s2.attributes, f2 = s2.source, l2 = s2.target;
                if (u2 = r2(h2, p2, f2.key, l2.key, f2.attributes, l2.attributes, o2.undirected), t2 && u2)
                  return h2;
              }
          }
        }
        __name(dt, "dt");
        function st(t2, e2) {
          if (0 === t2.size)
            return O.empty();
          var n2 = "mixed" !== e2 && e2 !== t2.type, r2 = "undirected" === e2, i2 = t2._edges.values();
          return new O(function() {
            for (var t3, e3; ; ) {
              if ((t3 = i2.next()).done)
                return t3;
              if (e3 = t3.value, !n2 || e3.undirected === r2)
                break;
            }
            return { value: { edge: e3.key, attributes: e3.attributes, source: e3.source.key, target: e3.target.key, sourceAttributes: e3.source.attributes, targetAttributes: e3.target.attributes, undirected: e3.undirected }, done: false };
          });
        }
        __name(st, "st");
        function ht(t2, e2, n2, r2, i2, o2) {
          var a2, c2 = e2 ? rt : nt;
          if ("undirected" !== n2) {
            if ("out" !== r2 && (a2 = c2(t2, i2.in, o2), t2 && a2))
              return a2;
            if ("in" !== r2 && (a2 = c2(t2, i2.out, o2, r2 ? void 0 : i2.key), t2 && a2))
              return a2;
          }
          if ("directed" !== n2 && (a2 = c2(t2, i2.undirected, o2), t2 && a2))
            return a2;
        }
        __name(ht, "ht");
        function pt(t2, e2, n2, r2) {
          var i2 = [];
          return ht(false, t2, e2, n2, r2, function(t3) {
            i2.push(t3);
          }), i2;
        }
        __name(pt, "pt");
        function ft(t2, e2, n2) {
          var r2 = O.empty();
          return "undirected" !== t2 && ("out" !== e2 && void 0 !== n2.in && (r2 = tt(r2, it(n2.in))), "in" !== e2 && void 0 !== n2.out && (r2 = tt(r2, it(n2.out, e2 ? void 0 : n2.key)))), "directed" !== t2 && void 0 !== n2.undirected && (r2 = tt(r2, it(n2.undirected))), r2;
        }
        __name(ft, "ft");
        function lt(t2, e2, n2, r2, i2, o2, a2) {
          var c2, u2 = n2 ? at : ot;
          if ("undirected" !== e2) {
            if (void 0 !== i2.in && "out" !== r2 && (c2 = u2(t2, i2.in, o2, a2), t2 && c2))
              return c2;
            if (void 0 !== i2.out && "in" !== r2 && (r2 || i2.key !== o2) && (c2 = u2(t2, i2.out, o2, a2), t2 && c2))
              return c2;
          }
          if ("directed" !== e2 && void 0 !== i2.undirected && (c2 = u2(t2, i2.undirected, o2, a2), t2 && c2))
            return c2;
        }
        __name(lt, "lt");
        function gt(t2, e2, n2, r2, i2) {
          var o2 = [];
          return lt(false, t2, e2, n2, r2, i2, function(t3) {
            o2.push(t3);
          }), o2;
        }
        __name(gt, "gt");
        function yt(t2, e2, n2, r2) {
          var i2 = O.empty();
          return "undirected" !== t2 && (void 0 !== n2.in && "out" !== e2 && r2 in n2.in && (i2 = tt(i2, ct(n2.in, r2))), void 0 !== n2.out && "in" !== e2 && r2 in n2.out && (e2 || n2.key !== r2) && (i2 = tt(i2, ct(n2.out, r2)))), "directed" !== t2 && void 0 !== n2.undirected && r2 in n2.undirected && (i2 = tt(i2, ct(n2.undirected, r2))), i2;
        }
        __name(yt, "yt");
        var wt = [{ name: "neighbors", type: "mixed" }, { name: "inNeighbors", type: "directed", direction: "in" }, { name: "outNeighbors", type: "directed", direction: "out" }, { name: "inboundNeighbors", type: "mixed", direction: "in" }, { name: "outboundNeighbors", type: "mixed", direction: "out" }, { name: "directedNeighbors", type: "directed" }, { name: "undirectedNeighbors", type: "undirected" }];
        function vt() {
          this.A = null, this.B = null;
        }
        __name(vt, "vt");
        function bt(t2, e2, n2, r2, i2) {
          for (var o2 in r2) {
            var a2 = r2[o2], c2 = a2.source, u2 = a2.target, d2 = c2 === n2 ? u2 : c2;
            if (!e2 || !e2.has(d2.key)) {
              var s2 = i2(d2.key, d2.attributes);
              if (t2 && s2)
                return d2.key;
            }
          }
        }
        __name(bt, "bt");
        function mt(t2, e2, n2, r2, i2) {
          if ("mixed" !== e2) {
            if ("undirected" === e2)
              return bt(t2, null, r2, r2.undirected, i2);
            if ("string" == typeof n2)
              return bt(t2, null, r2, r2[n2], i2);
          }
          var o2, a2 = new vt();
          if ("undirected" !== e2) {
            if ("out" !== n2) {
              if (o2 = bt(t2, null, r2, r2.in, i2), t2 && o2)
                return o2;
              a2.wrap(r2.in);
            }
            if ("in" !== n2) {
              if (o2 = bt(t2, a2, r2, r2.out, i2), t2 && o2)
                return o2;
              a2.wrap(r2.out);
            }
          }
          if ("directed" !== e2 && (o2 = bt(t2, a2, r2, r2.undirected, i2), t2 && o2))
            return o2;
        }
        __name(mt, "mt");
        function kt(t2, e2, n2) {
          var r2 = Object.keys(n2), i2 = r2.length, o2 = 0;
          return new O(function() {
            var a2 = null;
            do {
              if (o2 >= i2)
                return t2 && t2.wrap(n2), { done: true };
              var c2 = n2[r2[o2++]], u2 = c2.source, d2 = c2.target;
              a2 = u2 === e2 ? d2 : u2, t2 && t2.has(a2.key) && (a2 = null);
            } while (null === a2);
            return { done: false, value: { neighbor: a2.key, attributes: a2.attributes } };
          });
        }
        __name(kt, "kt");
        function _t(t2, e2) {
          var n2 = e2.name, r2 = e2.type, i2 = e2.direction;
          t2.prototype[n2] = function(t3) {
            if ("mixed" !== r2 && "mixed" !== this.type && r2 !== this.type)
              return [];
            t3 = "" + t3;
            var e3 = this._nodes.get(t3);
            if (void 0 === e3)
              throw new F("Graph.".concat(n2, ': could not find the "').concat(t3, '" node in the graph.'));
            return function(t4, e4, n3) {
              if ("mixed" !== t4) {
                if ("undirected" === t4)
                  return Object.keys(n3.undirected);
                if ("string" == typeof e4)
                  return Object.keys(n3[e4]);
              }
              var r3 = [];
              return mt(false, t4, e4, n3, function(t5) {
                r3.push(t5);
              }), r3;
            }("mixed" === r2 ? this.type : r2, i2, e3);
          };
        }
        __name(_t, "_t");
        function Gt(t2, e2) {
          var n2 = e2.name, r2 = e2.type, i2 = e2.direction, o2 = n2.slice(0, -1) + "Entries";
          t2.prototype[o2] = function(t3) {
            if ("mixed" !== r2 && "mixed" !== this.type && r2 !== this.type)
              return O.empty();
            t3 = "" + t3;
            var e3 = this._nodes.get(t3);
            if (void 0 === e3)
              throw new F("Graph.".concat(o2, ': could not find the "').concat(t3, '" node in the graph.'));
            return function(t4, e4, n3) {
              if ("mixed" !== t4) {
                if ("undirected" === t4)
                  return kt(null, n3, n3.undirected);
                if ("string" == typeof e4)
                  return kt(null, n3, n3[e4]);
              }
              var r3 = O.empty(), i3 = new vt();
              return "undirected" !== t4 && ("out" !== e4 && (r3 = tt(r3, kt(i3, n3, n3.in))), "in" !== e4 && (r3 = tt(r3, kt(i3, n3, n3.out)))), "directed" !== t4 && (r3 = tt(r3, kt(i3, n3, n3.undirected))), r3;
            }("mixed" === r2 ? this.type : r2, i2, e3);
          };
        }
        __name(Gt, "Gt");
        function xt(t2, e2, n2, r2, i2) {
          for (var o2, a2, c2, u2, d2, s2, h2, p2 = r2._nodes.values(), f2 = r2.type; true !== (o2 = p2.next()).done; ) {
            var l2 = false;
            if (a2 = o2.value, "undirected" !== f2)
              for (c2 in u2 = a2.out) {
                d2 = u2[c2];
                do {
                  if (s2 = d2.target, l2 = true, h2 = i2(a2.key, s2.key, a2.attributes, s2.attributes, d2.key, d2.attributes, d2.undirected), t2 && h2)
                    return d2;
                  d2 = d2.next;
                } while (d2);
              }
            if ("directed" !== f2) {
              for (c2 in u2 = a2.undirected)
                if (!(e2 && a2.key > c2)) {
                  d2 = u2[c2];
                  do {
                    if ((s2 = d2.target).key !== c2 && (s2 = d2.source), l2 = true, h2 = i2(a2.key, s2.key, a2.attributes, s2.attributes, d2.key, d2.attributes, d2.undirected), t2 && h2)
                      return d2;
                    d2 = d2.next;
                  } while (d2);
                }
            }
            if (n2 && !l2 && (h2 = i2(a2.key, null, a2.attributes, null, null, null, null), t2 && h2))
              return null;
          }
        }
        __name(xt, "xt");
        function Et(t2) {
          if (!s(t2))
            throw new B('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');
          if (!("key" in t2))
            throw new B("Graph.import: serialized node is missing its key.");
          if ("attributes" in t2 && (!s(t2.attributes) || null === t2.attributes))
            throw new B("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");
        }
        __name(Et, "Et");
        function At(t2) {
          if (!s(t2))
            throw new B('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');
          if (!("source" in t2))
            throw new B("Graph.import: serialized edge is missing its source.");
          if (!("target" in t2))
            throw new B("Graph.import: serialized edge is missing its target.");
          if ("attributes" in t2 && (!s(t2.attributes) || null === t2.attributes))
            throw new B("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");
          if ("undirected" in t2 && "boolean" != typeof t2.undirected)
            throw new B("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.");
        }
        __name(At, "At");
        vt.prototype.wrap = function(t2) {
          null === this.A ? this.A = t2 : null === this.B && (this.B = t2);
        }, vt.prototype.has = function(t2) {
          return null !== this.A && t2 in this.A || null !== this.B && t2 in this.B;
        };
        var Lt, St = (Lt = 255 & Math.floor(256 * Math.random()), function() {
          return Lt++;
        }), Dt = /* @__PURE__ */ new Set(["directed", "undirected", "mixed"]), Ut = /* @__PURE__ */ new Set(["domain", "_events", "_eventsCount", "_maxListeners"]), Nt = { allowSelfLoops: true, multi: false, type: "mixed" };
        function Ot(t2, e2, n2) {
          var r2 = new t2.NodeDataClass(e2, n2);
          return t2._nodes.set(e2, r2), t2.emit("nodeAdded", { key: e2, attributes: n2 }), r2;
        }
        __name(Ot, "Ot");
        function jt(t2, e2, n2, r2, i2, o2, a2, c2) {
          if (!r2 && "undirected" === t2.type)
            throw new I("Graph.".concat(e2, ": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));
          if (r2 && "directed" === t2.type)
            throw new I("Graph.".concat(e2, ": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));
          if (c2 && !s(c2))
            throw new B("Graph.".concat(e2, ': invalid attributes. Expecting an object but got "').concat(c2, '"'));
          if (o2 = "" + o2, a2 = "" + a2, c2 = c2 || {}, !t2.allowSelfLoops && o2 === a2)
            throw new I("Graph.".concat(e2, ': source & target are the same ("').concat(o2, `"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`));
          var u2 = t2._nodes.get(o2), d2 = t2._nodes.get(a2);
          if (!u2)
            throw new F("Graph.".concat(e2, ': source node "').concat(o2, '" not found.'));
          if (!d2)
            throw new F("Graph.".concat(e2, ': target node "').concat(a2, '" not found.'));
          var h2 = { key: null, undirected: r2, source: o2, target: a2, attributes: c2 };
          if (n2)
            i2 = t2._edgeKeyGenerator();
          else if (i2 = "" + i2, t2._edges.has(i2))
            throw new I("Graph.".concat(e2, ': the "').concat(i2, '" edge already exists in the graph.'));
          if (!t2.multi && (r2 ? void 0 !== u2.undirected[a2] : void 0 !== u2.out[a2]))
            throw new I("Graph.".concat(e2, ': an edge linking "').concat(o2, '" to "').concat(a2, `" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`));
          var p2 = new V(r2, i2, u2, d2, c2);
          t2._edges.set(i2, p2);
          var f2 = o2 === a2;
          return r2 ? (u2.undirectedDegree++, d2.undirectedDegree++, f2 && (u2.undirectedLoops++, t2._undirectedSelfLoopCount++)) : (u2.outDegree++, d2.inDegree++, f2 && (u2.directedLoops++, t2._directedSelfLoopCount++)), t2.multi ? p2.attachMulti() : p2.attach(), r2 ? t2._undirectedSize++ : t2._directedSize++, h2.key = i2, t2.emit("edgeAdded", h2), i2;
        }
        __name(jt, "jt");
        function Ct(t2, e2, n2, r2, i2, o2, a2, c2, d2) {
          if (!r2 && "undirected" === t2.type)
            throw new I("Graph.".concat(e2, ": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead."));
          if (r2 && "directed" === t2.type)
            throw new I("Graph.".concat(e2, ": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead."));
          if (c2) {
            if (d2) {
              if ("function" != typeof c2)
                throw new B("Graph.".concat(e2, ': invalid updater function. Expecting a function but got "').concat(c2, '"'));
            } else if (!s(c2))
              throw new B("Graph.".concat(e2, ': invalid attributes. Expecting an object but got "').concat(c2, '"'));
          }
          var h2;
          if (o2 = "" + o2, a2 = "" + a2, d2 && (h2 = c2, c2 = void 0), !t2.allowSelfLoops && o2 === a2)
            throw new I("Graph.".concat(e2, ': source & target are the same ("').concat(o2, `"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`));
          var p2, f2, l2 = t2._nodes.get(o2), g2 = t2._nodes.get(a2);
          if (!n2 && (p2 = t2._edges.get(i2))) {
            if (!(p2.source.key === o2 && p2.target.key === a2 || r2 && p2.source.key === a2 && p2.target.key === o2))
              throw new I("Graph.".concat(e2, ': inconsistency detected when attempting to merge the "').concat(i2, '" edge with "').concat(o2, '" source & "').concat(a2, '" target vs. ("').concat(p2.source.key, '", "').concat(p2.target.key, '").'));
            f2 = p2;
          }
          if (f2 || t2.multi || !l2 || (f2 = r2 ? l2.undirected[a2] : l2.out[a2]), f2) {
            var y2 = [f2.key, false, false, false];
            if (d2 ? !h2 : !c2)
              return y2;
            if (d2) {
              var w2 = f2.attributes;
              f2.attributes = h2(w2), t2.emit("edgeAttributesUpdated", { type: "replace", key: f2.key, attributes: f2.attributes });
            } else
              u(f2.attributes, c2), t2.emit("edgeAttributesUpdated", { type: "merge", key: f2.key, attributes: f2.attributes, data: c2 });
            return y2;
          }
          c2 = c2 || {}, d2 && h2 && (c2 = h2(c2));
          var v2 = { key: null, undirected: r2, source: o2, target: a2, attributes: c2 };
          if (n2)
            i2 = t2._edgeKeyGenerator();
          else if (i2 = "" + i2, t2._edges.has(i2))
            throw new I("Graph.".concat(e2, ': the "').concat(i2, '" edge already exists in the graph.'));
          var b2 = false, m2 = false;
          l2 || (l2 = Ot(t2, o2, {}), b2 = true, o2 === a2 && (g2 = l2, m2 = true)), g2 || (g2 = Ot(t2, a2, {}), m2 = true), p2 = new V(r2, i2, l2, g2, c2), t2._edges.set(i2, p2);
          var k2 = o2 === a2;
          return r2 ? (l2.undirectedDegree++, g2.undirectedDegree++, k2 && (l2.undirectedLoops++, t2._undirectedSelfLoopCount++)) : (l2.outDegree++, g2.inDegree++, k2 && (l2.directedLoops++, t2._directedSelfLoopCount++)), t2.multi ? p2.attachMulti() : p2.attach(), r2 ? t2._undirectedSize++ : t2._directedSize++, v2.key = i2, t2.emit("edgeAdded", v2), [i2, true, b2, m2];
        }
        __name(Ct, "Ct");
        function Mt(t2, e2) {
          t2._edges.delete(e2.key);
          var n2 = e2.source, r2 = e2.target, i2 = e2.attributes, o2 = e2.undirected, a2 = n2 === r2;
          o2 ? (n2.undirectedDegree--, r2.undirectedDegree--, a2 && (n2.undirectedLoops--, t2._undirectedSelfLoopCount--)) : (n2.outDegree--, r2.inDegree--, a2 && (n2.directedLoops--, t2._directedSelfLoopCount--)), t2.multi ? e2.detachMulti() : e2.detach(), o2 ? t2._undirectedSize-- : t2._directedSize--, t2.emit("edgeDropped", { key: e2.key, attributes: i2, source: n2.key, target: r2.key, undirected: o2 });
        }
        __name(Mt, "Mt");
        var zt = function(n2) {
          function r2(t2) {
            var e2;
            if (e2 = n2.call(this) || this, "boolean" != typeof (t2 = u({}, Nt, t2)).multi)
              throw new B(`Graph.constructor: invalid 'multi' option. Expecting a boolean but got "`.concat(t2.multi, '".'));
            if (!Dt.has(t2.type))
              throw new B(`Graph.constructor: invalid 'type' option. Should be one of "mixed", "directed" or "undirected" but got "`.concat(t2.type, '".'));
            if ("boolean" != typeof t2.allowSelfLoops)
              throw new B(`Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got "`.concat(t2.allowSelfLoops, '".'));
            var r3 = "mixed" === t2.type ? Y : "directed" === t2.type ? q : J;
            p(c(e2), "NodeDataClass", r3);
            var i3 = "geid_" + St() + "_", o2 = 0;
            return p(c(e2), "_attributes", {}), p(c(e2), "_nodes", /* @__PURE__ */ new Map()), p(c(e2), "_edges", /* @__PURE__ */ new Map()), p(c(e2), "_directedSize", 0), p(c(e2), "_undirectedSize", 0), p(c(e2), "_directedSelfLoopCount", 0), p(c(e2), "_undirectedSelfLoopCount", 0), p(c(e2), "_edgeKeyGenerator", function() {
              var t3;
              do {
                t3 = i3 + o2++;
              } while (e2._edges.has(t3));
              return t3;
            }), p(c(e2), "_options", t2), Ut.forEach(function(t3) {
              return p(c(e2), t3, e2[t3]);
            }), f(c(e2), "order", function() {
              return e2._nodes.size;
            }), f(c(e2), "size", function() {
              return e2._edges.size;
            }), f(c(e2), "directedSize", function() {
              return e2._directedSize;
            }), f(c(e2), "undirectedSize", function() {
              return e2._undirectedSize;
            }), f(c(e2), "selfLoopCount", function() {
              return e2._directedSelfLoopCount + e2._undirectedSelfLoopCount;
            }), f(c(e2), "directedSelfLoopCount", function() {
              return e2._directedSelfLoopCount;
            }), f(c(e2), "undirectedSelfLoopCount", function() {
              return e2._undirectedSelfLoopCount;
            }), f(c(e2), "multi", e2._options.multi), f(c(e2), "type", e2._options.type), f(c(e2), "allowSelfLoops", e2._options.allowSelfLoops), f(c(e2), "implementation", function() {
              return "graphology";
            }), e2;
          }
          __name(r2, "r");
          e(r2, n2);
          var i2 = r2.prototype;
          return i2._resetInstanceCounters = function() {
            this._directedSize = 0, this._undirectedSize = 0, this._directedSelfLoopCount = 0, this._undirectedSelfLoopCount = 0;
          }, i2.hasNode = function(t2) {
            return this._nodes.has("" + t2);
          }, i2.hasDirectedEdge = function(t2, e2) {
            if ("undirected" === this.type)
              return false;
            if (1 === arguments.length) {
              var n3 = "" + t2, r3 = this._edges.get(n3);
              return !!r3 && !r3.undirected;
            }
            if (2 === arguments.length) {
              t2 = "" + t2, e2 = "" + e2;
              var i3 = this._nodes.get(t2);
              return !!i3 && i3.out.hasOwnProperty(e2);
            }
            throw new B("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length, ", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));
          }, i2.hasUndirectedEdge = function(t2, e2) {
            if ("directed" === this.type)
              return false;
            if (1 === arguments.length) {
              var n3 = "" + t2, r3 = this._edges.get(n3);
              return !!r3 && r3.undirected;
            }
            if (2 === arguments.length) {
              t2 = "" + t2, e2 = "" + e2;
              var i3 = this._nodes.get(t2);
              return !!i3 && i3.undirected.hasOwnProperty(e2);
            }
            throw new B("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length, ", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));
          }, i2.hasEdge = function(t2, e2) {
            if (1 === arguments.length) {
              var n3 = "" + t2;
              return this._edges.has(n3);
            }
            if (2 === arguments.length) {
              t2 = "" + t2, e2 = "" + e2;
              var r3 = this._nodes.get(t2);
              return !!r3 && (void 0 !== r3.out && r3.out.hasOwnProperty(e2) || void 0 !== r3.undirected && r3.undirected.hasOwnProperty(e2));
            }
            throw new B("Graph.hasEdge: invalid arity (".concat(arguments.length, ", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));
          }, i2.directedEdge = function(t2, e2) {
            if ("undirected" !== this.type) {
              if (t2 = "" + t2, e2 = "" + e2, this.multi)
                throw new I("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");
              var n3 = this._nodes.get(t2);
              if (!n3)
                throw new F('Graph.directedEdge: could not find the "'.concat(t2, '" source node in the graph.'));
              if (!this._nodes.has(e2))
                throw new F('Graph.directedEdge: could not find the "'.concat(e2, '" target node in the graph.'));
              var r3 = n3.out && n3.out[e2] || void 0;
              return r3 ? r3.key : void 0;
            }
          }, i2.undirectedEdge = function(t2, e2) {
            if ("directed" !== this.type) {
              if (t2 = "" + t2, e2 = "" + e2, this.multi)
                throw new I("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");
              var n3 = this._nodes.get(t2);
              if (!n3)
                throw new F('Graph.undirectedEdge: could not find the "'.concat(t2, '" source node in the graph.'));
              if (!this._nodes.has(e2))
                throw new F('Graph.undirectedEdge: could not find the "'.concat(e2, '" target node in the graph.'));
              var r3 = n3.undirected && n3.undirected[e2] || void 0;
              return r3 ? r3.key : void 0;
            }
          }, i2.edge = function(t2, e2) {
            if (this.multi)
              throw new I("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");
            t2 = "" + t2, e2 = "" + e2;
            var n3 = this._nodes.get(t2);
            if (!n3)
              throw new F('Graph.edge: could not find the "'.concat(t2, '" source node in the graph.'));
            if (!this._nodes.has(e2))
              throw new F('Graph.edge: could not find the "'.concat(e2, '" target node in the graph.'));
            var r3 = n3.out && n3.out[e2] || n3.undirected && n3.undirected[e2] || void 0;
            if (r3)
              return r3.key;
          }, i2.areDirectedNeighbors = function(t2, e2) {
            t2 = "" + t2, e2 = "" + e2;
            var n3 = this._nodes.get(t2);
            if (!n3)
              throw new F('Graph.areDirectedNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" !== this.type && (e2 in n3.in || e2 in n3.out);
          }, i2.areOutNeighbors = function(t2, e2) {
            t2 = "" + t2, e2 = "" + e2;
            var n3 = this._nodes.get(t2);
            if (!n3)
              throw new F('Graph.areOutNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" !== this.type && e2 in n3.out;
          }, i2.areInNeighbors = function(t2, e2) {
            t2 = "" + t2, e2 = "" + e2;
            var n3 = this._nodes.get(t2);
            if (!n3)
              throw new F('Graph.areInNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" !== this.type && e2 in n3.in;
          }, i2.areUndirectedNeighbors = function(t2, e2) {
            t2 = "" + t2, e2 = "" + e2;
            var n3 = this._nodes.get(t2);
            if (!n3)
              throw new F('Graph.areUndirectedNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
            return "directed" !== this.type && e2 in n3.undirected;
          }, i2.areNeighbors = function(t2, e2) {
            t2 = "" + t2, e2 = "" + e2;
            var n3 = this._nodes.get(t2);
            if (!n3)
              throw new F('Graph.areNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" !== this.type && (e2 in n3.in || e2 in n3.out) || "directed" !== this.type && e2 in n3.undirected;
          }, i2.areInboundNeighbors = function(t2, e2) {
            t2 = "" + t2, e2 = "" + e2;
            var n3 = this._nodes.get(t2);
            if (!n3)
              throw new F('Graph.areInboundNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" !== this.type && e2 in n3.in || "directed" !== this.type && e2 in n3.undirected;
          }, i2.areOutboundNeighbors = function(t2, e2) {
            t2 = "" + t2, e2 = "" + e2;
            var n3 = this._nodes.get(t2);
            if (!n3)
              throw new F('Graph.areOutboundNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" !== this.type && e2 in n3.out || "directed" !== this.type && e2 in n3.undirected;
          }, i2.inDegree = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.inDegree: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" === this.type ? 0 : e2.inDegree;
          }, i2.outDegree = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.outDegree: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" === this.type ? 0 : e2.outDegree;
          }, i2.directedDegree = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.directedDegree: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" === this.type ? 0 : e2.inDegree + e2.outDegree;
          }, i2.undirectedDegree = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.undirectedDegree: could not find the "'.concat(t2, '" node in the graph.'));
            return "directed" === this.type ? 0 : e2.undirectedDegree;
          }, i2.inboundDegree = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.inboundDegree: could not find the "'.concat(t2, '" node in the graph.'));
            var n3 = 0;
            return "directed" !== this.type && (n3 += e2.undirectedDegree), "undirected" !== this.type && (n3 += e2.inDegree), n3;
          }, i2.outboundDegree = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.outboundDegree: could not find the "'.concat(t2, '" node in the graph.'));
            var n3 = 0;
            return "directed" !== this.type && (n3 += e2.undirectedDegree), "undirected" !== this.type && (n3 += e2.outDegree), n3;
          }, i2.degree = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.degree: could not find the "'.concat(t2, '" node in the graph.'));
            var n3 = 0;
            return "directed" !== this.type && (n3 += e2.undirectedDegree), "undirected" !== this.type && (n3 += e2.inDegree + e2.outDegree), n3;
          }, i2.inDegreeWithoutSelfLoops = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.inDegreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" === this.type ? 0 : e2.inDegree - e2.directedLoops;
          }, i2.outDegreeWithoutSelfLoops = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.outDegreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" === this.type ? 0 : e2.outDegree - e2.directedLoops;
          }, i2.directedDegreeWithoutSelfLoops = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.directedDegreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
            return "undirected" === this.type ? 0 : e2.inDegree + e2.outDegree - 2 * e2.directedLoops;
          }, i2.undirectedDegreeWithoutSelfLoops = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.undirectedDegreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
            return "directed" === this.type ? 0 : e2.undirectedDegree - 2 * e2.undirectedLoops;
          }, i2.inboundDegreeWithoutSelfLoops = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.inboundDegreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
            var n3 = 0, r3 = 0;
            return "directed" !== this.type && (n3 += e2.undirectedDegree, r3 += 2 * e2.undirectedLoops), "undirected" !== this.type && (n3 += e2.inDegree, r3 += e2.directedLoops), n3 - r3;
          }, i2.outboundDegreeWithoutSelfLoops = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.outboundDegreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
            var n3 = 0, r3 = 0;
            return "directed" !== this.type && (n3 += e2.undirectedDegree, r3 += 2 * e2.undirectedLoops), "undirected" !== this.type && (n3 += e2.outDegree, r3 += e2.directedLoops), n3 - r3;
          }, i2.degreeWithoutSelfLoops = function(t2) {
            t2 = "" + t2;
            var e2 = this._nodes.get(t2);
            if (!e2)
              throw new F('Graph.degreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
            var n3 = 0, r3 = 0;
            return "directed" !== this.type && (n3 += e2.undirectedDegree, r3 += 2 * e2.undirectedLoops), "undirected" !== this.type && (n3 += e2.inDegree + e2.outDegree, r3 += 2 * e2.directedLoops), n3 - r3;
          }, i2.source = function(t2) {
            t2 = "" + t2;
            var e2 = this._edges.get(t2);
            if (!e2)
              throw new F('Graph.source: could not find the "'.concat(t2, '" edge in the graph.'));
            return e2.source.key;
          }, i2.target = function(t2) {
            t2 = "" + t2;
            var e2 = this._edges.get(t2);
            if (!e2)
              throw new F('Graph.target: could not find the "'.concat(t2, '" edge in the graph.'));
            return e2.target.key;
          }, i2.extremities = function(t2) {
            t2 = "" + t2;
            var e2 = this._edges.get(t2);
            if (!e2)
              throw new F('Graph.extremities: could not find the "'.concat(t2, '" edge in the graph.'));
            return [e2.source.key, e2.target.key];
          }, i2.opposite = function(t2, e2) {
            t2 = "" + t2, e2 = "" + e2;
            var n3 = this._edges.get(e2);
            if (!n3)
              throw new F('Graph.opposite: could not find the "'.concat(e2, '" edge in the graph.'));
            var r3 = n3.source.key, i3 = n3.target.key;
            if (t2 === r3)
              return i3;
            if (t2 === i3)
              return r3;
            throw new F('Graph.opposite: the "'.concat(t2, '" node is not attached to the "').concat(e2, '" edge (').concat(r3, ", ").concat(i3, ")."));
          }, i2.hasExtremity = function(t2, e2) {
            t2 = "" + t2, e2 = "" + e2;
            var n3 = this._edges.get(t2);
            if (!n3)
              throw new F('Graph.hasExtremity: could not find the "'.concat(t2, '" edge in the graph.'));
            return n3.source.key === e2 || n3.target.key === e2;
          }, i2.isUndirected = function(t2) {
            t2 = "" + t2;
            var e2 = this._edges.get(t2);
            if (!e2)
              throw new F('Graph.isUndirected: could not find the "'.concat(t2, '" edge in the graph.'));
            return e2.undirected;
          }, i2.isDirected = function(t2) {
            t2 = "" + t2;
            var e2 = this._edges.get(t2);
            if (!e2)
              throw new F('Graph.isDirected: could not find the "'.concat(t2, '" edge in the graph.'));
            return !e2.undirected;
          }, i2.isSelfLoop = function(t2) {
            t2 = "" + t2;
            var e2 = this._edges.get(t2);
            if (!e2)
              throw new F('Graph.isSelfLoop: could not find the "'.concat(t2, '" edge in the graph.'));
            return e2.source === e2.target;
          }, i2.addNode = function(t2, e2) {
            var n3 = function(t3, e3, n4) {
              if (n4 && !s(n4))
                throw new B('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(n4, '"'));
              if (e3 = "" + e3, n4 = n4 || {}, t3._nodes.has(e3))
                throw new I('Graph.addNode: the "'.concat(e3, '" node already exist in the graph.'));
              var r3 = new t3.NodeDataClass(e3, n4);
              return t3._nodes.set(e3, r3), t3.emit("nodeAdded", { key: e3, attributes: n4 }), r3;
            }(this, t2, e2);
            return n3.key;
          }, i2.mergeNode = function(t2, e2) {
            if (e2 && !s(e2))
              throw new B('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(e2, '"'));
            t2 = "" + t2, e2 = e2 || {};
            var n3 = this._nodes.get(t2);
            return n3 ? (e2 && (u(n3.attributes, e2), this.emit("nodeAttributesUpdated", { type: "merge", key: t2, attributes: n3.attributes, data: e2 })), [t2, false]) : (n3 = new this.NodeDataClass(t2, e2), this._nodes.set(t2, n3), this.emit("nodeAdded", { key: t2, attributes: e2 }), [t2, true]);
          }, i2.updateNode = function(t2, e2) {
            if (e2 && "function" != typeof e2)
              throw new B('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(e2, '"'));
            t2 = "" + t2;
            var n3 = this._nodes.get(t2);
            if (n3) {
              if (e2) {
                var r3 = n3.attributes;
                n3.attributes = e2(r3), this.emit("nodeAttributesUpdated", { type: "replace", key: t2, attributes: n3.attributes });
              }
              return [t2, false];
            }
            var i3 = e2 ? e2({}) : {};
            return n3 = new this.NodeDataClass(t2, i3), this._nodes.set(t2, n3), this.emit("nodeAdded", { key: t2, attributes: i3 }), [t2, true];
          }, i2.dropNode = function(t2) {
            t2 = "" + t2;
            var e2, n3 = this._nodes.get(t2);
            if (!n3)
              throw new F('Graph.dropNode: could not find the "'.concat(t2, '" node in the graph.'));
            if ("undirected" !== this.type) {
              for (var r3 in n3.out) {
                e2 = n3.out[r3];
                do {
                  Mt(this, e2), e2 = e2.next;
                } while (e2);
              }
              for (var i3 in n3.in) {
                e2 = n3.in[i3];
                do {
                  Mt(this, e2), e2 = e2.next;
                } while (e2);
              }
            }
            if ("directed" !== this.type)
              for (var o2 in n3.undirected) {
                e2 = n3.undirected[o2];
                do {
                  Mt(this, e2), e2 = e2.next;
                } while (e2);
              }
            this._nodes.delete(t2), this.emit("nodeDropped", { key: t2, attributes: n3.attributes });
          }, i2.dropEdge = function(t2) {
            var e2;
            if (arguments.length > 1) {
              var n3 = "" + arguments[0], r3 = "" + arguments[1];
              if (!(e2 = d(this, n3, r3, this.type)))
                throw new F('Graph.dropEdge: could not find the "'.concat(n3, '" -> "').concat(r3, '" edge in the graph.'));
            } else if (t2 = "" + t2, !(e2 = this._edges.get(t2)))
              throw new F('Graph.dropEdge: could not find the "'.concat(t2, '" edge in the graph.'));
            return Mt(this, e2), this;
          }, i2.dropDirectedEdge = function(t2, e2) {
            if (arguments.length < 2)
              throw new I("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");
            if (this.multi)
              throw new I("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");
            var n3 = d(this, t2 = "" + t2, e2 = "" + e2, "directed");
            if (!n3)
              throw new F('Graph.dropDirectedEdge: could not find a "'.concat(t2, '" -> "').concat(e2, '" edge in the graph.'));
            return Mt(this, n3), this;
          }, i2.dropUndirectedEdge = function(t2, e2) {
            if (arguments.length < 2)
              throw new I("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");
            if (this.multi)
              throw new I("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");
            var n3 = d(this, t2, e2, "undirected");
            if (!n3)
              throw new F('Graph.dropUndirectedEdge: could not find a "'.concat(t2, '" -> "').concat(e2, '" edge in the graph.'));
            return Mt(this, n3), this;
          }, i2.clear = function() {
            this._edges.clear(), this._nodes.clear(), this._resetInstanceCounters(), this.emit("cleared");
          }, i2.clearEdges = function() {
            for (var t2, e2 = this._nodes.values(); true !== (t2 = e2.next()).done; )
              t2.value.clear();
            this._edges.clear(), this._resetInstanceCounters(), this.emit("edgesCleared");
          }, i2.getAttribute = function(t2) {
            return this._attributes[t2];
          }, i2.getAttributes = function() {
            return this._attributes;
          }, i2.hasAttribute = function(t2) {
            return this._attributes.hasOwnProperty(t2);
          }, i2.setAttribute = function(t2, e2) {
            return this._attributes[t2] = e2, this.emit("attributesUpdated", { type: "set", attributes: this._attributes, name: t2 }), this;
          }, i2.updateAttribute = function(t2, e2) {
            if ("function" != typeof e2)
              throw new B("Graph.updateAttribute: updater should be a function.");
            var n3 = this._attributes[t2];
            return this._attributes[t2] = e2(n3), this.emit("attributesUpdated", { type: "set", attributes: this._attributes, name: t2 }), this;
          }, i2.removeAttribute = function(t2) {
            return delete this._attributes[t2], this.emit("attributesUpdated", { type: "remove", attributes: this._attributes, name: t2 }), this;
          }, i2.replaceAttributes = function(t2) {
            if (!s(t2))
              throw new B("Graph.replaceAttributes: provided attributes are not a plain object.");
            return this._attributes = t2, this.emit("attributesUpdated", { type: "replace", attributes: this._attributes }), this;
          }, i2.mergeAttributes = function(t2) {
            if (!s(t2))
              throw new B("Graph.mergeAttributes: provided attributes are not a plain object.");
            return u(this._attributes, t2), this.emit("attributesUpdated", { type: "merge", attributes: this._attributes, data: t2 }), this;
          }, i2.updateAttributes = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.updateAttributes: provided updater is not a function.");
            return this._attributes = t2(this._attributes), this.emit("attributesUpdated", { type: "update", attributes: this._attributes }), this;
          }, i2.updateEachNodeAttributes = function(t2, e2) {
            if ("function" != typeof t2)
              throw new B("Graph.updateEachNodeAttributes: expecting an updater function.");
            if (e2 && !l(e2))
              throw new B("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");
            for (var n3, r3, i3 = this._nodes.values(); true !== (n3 = i3.next()).done; )
              (r3 = n3.value).attributes = t2(r3.key, r3.attributes);
            this.emit("eachNodeAttributesUpdated", { hints: e2 || null });
          }, i2.updateEachEdgeAttributes = function(t2, e2) {
            if ("function" != typeof t2)
              throw new B("Graph.updateEachEdgeAttributes: expecting an updater function.");
            if (e2 && !l(e2))
              throw new B("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");
            for (var n3, r3, i3, o2, a2 = this._edges.values(); true !== (n3 = a2.next()).done; )
              i3 = (r3 = n3.value).source, o2 = r3.target, r3.attributes = t2(r3.key, r3.attributes, i3.key, o2.key, i3.attributes, o2.attributes, r3.undirected);
            this.emit("eachEdgeAttributesUpdated", { hints: e2 || null });
          }, i2.forEachAdjacencyEntry = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.forEachAdjacencyEntry: expecting a callback.");
            xt(false, false, false, this, t2);
          }, i2.forEachAdjacencyEntryWithOrphans = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");
            xt(false, false, true, this, t2);
          }, i2.forEachAssymetricAdjacencyEntry = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");
            xt(false, true, false, this, t2);
          }, i2.forEachAssymetricAdjacencyEntryWithOrphans = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");
            xt(false, true, true, this, t2);
          }, i2.nodes = function() {
            return "function" == typeof Array.from ? Array.from(this._nodes.keys()) : K(this._nodes.keys(), this._nodes.size);
          }, i2.forEachNode = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.forEachNode: expecting a callback.");
            for (var e2, n3, r3 = this._nodes.values(); true !== (e2 = r3.next()).done; )
              t2((n3 = e2.value).key, n3.attributes);
          }, i2.findNode = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.findNode: expecting a callback.");
            for (var e2, n3, r3 = this._nodes.values(); true !== (e2 = r3.next()).done; )
              if (t2((n3 = e2.value).key, n3.attributes))
                return n3.key;
          }, i2.mapNodes = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.mapNode: expecting a callback.");
            for (var e2, n3, r3 = this._nodes.values(), i3 = new Array(this.order), o2 = 0; true !== (e2 = r3.next()).done; )
              n3 = e2.value, i3[o2++] = t2(n3.key, n3.attributes);
            return i3;
          }, i2.someNode = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.someNode: expecting a callback.");
            for (var e2, n3, r3 = this._nodes.values(); true !== (e2 = r3.next()).done; )
              if (t2((n3 = e2.value).key, n3.attributes))
                return true;
            return false;
          }, i2.everyNode = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.everyNode: expecting a callback.");
            for (var e2, n3, r3 = this._nodes.values(); true !== (e2 = r3.next()).done; )
              if (!t2((n3 = e2.value).key, n3.attributes))
                return false;
            return true;
          }, i2.filterNodes = function(t2) {
            if ("function" != typeof t2)
              throw new B("Graph.filterNodes: expecting a callback.");
            for (var e2, n3, r3 = this._nodes.values(), i3 = []; true !== (e2 = r3.next()).done; )
              t2((n3 = e2.value).key, n3.attributes) && i3.push(n3.key);
            return i3;
          }, i2.reduceNodes = function(t2, e2) {
            if ("function" != typeof t2)
              throw new B("Graph.reduceNodes: expecting a callback.");
            if (arguments.length < 2)
              throw new B("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");
            for (var n3, r3, i3 = e2, o2 = this._nodes.values(); true !== (n3 = o2.next()).done; )
              i3 = t2(i3, (r3 = n3.value).key, r3.attributes);
            return i3;
          }, i2.nodeEntries = function() {
            var t2 = this._nodes.values();
            return new O(function() {
              var e2 = t2.next();
              if (e2.done)
                return e2;
              var n3 = e2.value;
              return { value: { node: n3.key, attributes: n3.attributes }, done: false };
            });
          }, i2.export = function() {
            var t2 = this, e2 = new Array(this._nodes.size), n3 = 0;
            this._nodes.forEach(function(t3, r4) {
              e2[n3++] = function(t4, e3) {
                var n4 = { key: t4 };
                return h(e3.attributes) || (n4.attributes = u({}, e3.attributes)), n4;
              }(r4, t3);
            });
            var r3 = new Array(this._edges.size);
            return n3 = 0, this._edges.forEach(function(e3, i3) {
              r3[n3++] = function(t3, e4, n4) {
                var r4 = { key: e4, source: n4.source.key, target: n4.target.key };
                return h(n4.attributes) || (r4.attributes = u({}, n4.attributes)), "mixed" === t3 && n4.undirected && (r4.undirected = true), r4;
              }(t2.type, i3, e3);
            }), { options: { type: this.type, multi: this.multi, allowSelfLoops: this.allowSelfLoops }, attributes: this.getAttributes(), nodes: e2, edges: r3 };
          }, i2.import = function(t2) {
            var e2, n3, i3, o2, a2, c2 = this, u2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (t2 instanceof r2)
              return t2.forEachNode(function(t3, e3) {
                u2 ? c2.mergeNode(t3, e3) : c2.addNode(t3, e3);
              }), t2.forEachEdge(function(t3, e3, n4, r3, i4, o3, a3) {
                u2 ? a3 ? c2.mergeUndirectedEdgeWithKey(t3, n4, r3, e3) : c2.mergeDirectedEdgeWithKey(t3, n4, r3, e3) : a3 ? c2.addUndirectedEdgeWithKey(t3, n4, r3, e3) : c2.addDirectedEdgeWithKey(t3, n4, r3, e3);
              }), this;
            if (!s(t2))
              throw new B("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");
            if (t2.attributes) {
              if (!s(t2.attributes))
                throw new B("Graph.import: invalid attributes. Expecting a plain object.");
              u2 ? this.mergeAttributes(t2.attributes) : this.replaceAttributes(t2.attributes);
            }
            if (t2.nodes) {
              if (i3 = t2.nodes, !Array.isArray(i3))
                throw new B("Graph.import: invalid nodes. Expecting an array.");
              for (e2 = 0, n3 = i3.length; e2 < n3; e2++) {
                Et(o2 = i3[e2]);
                var d2 = o2, h2 = d2.key, p2 = d2.attributes;
                u2 ? this.mergeNode(h2, p2) : this.addNode(h2, p2);
              }
            }
            if (t2.edges) {
              var f2 = false;
              if ("undirected" === this.type && (f2 = true), i3 = t2.edges, !Array.isArray(i3))
                throw new B("Graph.import: invalid edges. Expecting an array.");
              for (e2 = 0, n3 = i3.length; e2 < n3; e2++) {
                At(a2 = i3[e2]);
                var l2 = a2, g2 = l2.source, y2 = l2.target, w2 = l2.attributes, v2 = l2.undirected, b2 = void 0 === v2 ? f2 : v2;
                "key" in a2 ? (u2 ? b2 ? this.mergeUndirectedEdgeWithKey : this.mergeDirectedEdgeWithKey : b2 ? this.addUndirectedEdgeWithKey : this.addDirectedEdgeWithKey).call(this, a2.key, g2, y2, w2) : (u2 ? b2 ? this.mergeUndirectedEdge : this.mergeDirectedEdge : b2 ? this.addUndirectedEdge : this.addDirectedEdge).call(this, g2, y2, w2);
              }
            }
            return this;
          }, i2.nullCopy = function(t2) {
            var e2 = new r2(u({}, this._options, t2));
            return e2.replaceAttributes(u({}, this.getAttributes())), e2;
          }, i2.emptyCopy = function(t2) {
            var e2 = this.nullCopy(t2);
            return this._nodes.forEach(function(t3, n3) {
              var r3 = u({}, t3.attributes);
              t3 = new e2.NodeDataClass(n3, r3), e2._nodes.set(n3, t3);
            }), e2;
          }, i2.copy = function(t2) {
            if ("string" == typeof (t2 = t2 || {}).type && t2.type !== this.type && "mixed" !== t2.type)
              throw new I('Graph.copy: cannot create an incompatible copy from "'.concat(this.type, '" type to "').concat(t2.type, '" because this would mean losing information about the current graph.'));
            if ("boolean" == typeof t2.multi && t2.multi !== this.multi && true !== t2.multi)
              throw new I("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");
            if ("boolean" == typeof t2.allowSelfLoops && t2.allowSelfLoops !== this.allowSelfLoops && true !== t2.allowSelfLoops)
              throw new I("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");
            for (var e2, n3, r3 = this.emptyCopy(t2), i3 = this._edges.values(); true !== (e2 = i3.next()).done; )
              jt(r3, "copy", false, (n3 = e2.value).undirected, n3.key, n3.source.key, n3.target.key, u({}, n3.attributes));
            return r3;
          }, i2.toJSON = function() {
            return this.export();
          }, i2.toString = function() {
            return "[object Graph]";
          }, i2.inspect = function() {
            var e2 = this, n3 = {};
            this._nodes.forEach(function(t2, e3) {
              n3[e3] = t2.attributes;
            });
            var r3 = {}, i3 = {};
            this._edges.forEach(function(t2, n4) {
              var o3, a3 = t2.undirected ? "--" : "->", c2 = "", u2 = t2.source.key, d2 = t2.target.key;
              t2.undirected && u2 > d2 && (o3 = u2, u2 = d2, d2 = o3);
              var s2 = "(".concat(u2, ")").concat(a3, "(").concat(d2, ")");
              n4.startsWith("geid_") ? e2.multi && (void 0 === i3[s2] ? i3[s2] = 0 : i3[s2]++, c2 += "".concat(i3[s2], ". ")) : c2 += "[".concat(n4, "]: "), r3[c2 += s2] = t2.attributes;
            });
            var o2 = {};
            for (var a2 in this)
              this.hasOwnProperty(a2) && !Ut.has(a2) && "function" != typeof this[a2] && "symbol" !== t(a2) && (o2[a2] = this[a2]);
            return o2.attributes = this._attributes, o2.nodes = n3, o2.edges = r3, p(o2, "constructor", this.constructor), o2;
          }, r2;
        }(y.exports.EventEmitter);
        "undefined" != typeof Symbol && (zt.prototype[Symbol.for("nodejs.util.inspect.custom")] = zt.prototype.inspect), [{ name: function(t2) {
          return "".concat(t2, "Edge");
        }, generateKey: true }, { name: function(t2) {
          return "".concat(t2, "DirectedEdge");
        }, generateKey: true, type: "directed" }, { name: function(t2) {
          return "".concat(t2, "UndirectedEdge");
        }, generateKey: true, type: "undirected" }, { name: function(t2) {
          return "".concat(t2, "EdgeWithKey");
        } }, { name: function(t2) {
          return "".concat(t2, "DirectedEdgeWithKey");
        }, type: "directed" }, { name: function(t2) {
          return "".concat(t2, "UndirectedEdgeWithKey");
        }, type: "undirected" }].forEach(function(t2) {
          ["add", "merge", "update"].forEach(function(e2) {
            var n2 = t2.name(e2), r2 = "add" === e2 ? jt : Ct;
            t2.generateKey ? zt.prototype[n2] = function(i2, o2, a2) {
              return r2(this, n2, true, "undirected" === (t2.type || this.type), null, i2, o2, a2, "update" === e2);
            } : zt.prototype[n2] = function(i2, o2, a2, c2) {
              return r2(this, n2, false, "undirected" === (t2.type || this.type), i2, o2, a2, c2, "update" === e2);
            };
          });
        }), function(t2) {
          Q.forEach(function(e2) {
            var n2 = e2.name, r2 = e2.attacher;
            r2(t2, n2("Node"), 0), r2(t2, n2("Source"), 1), r2(t2, n2("Target"), 2), r2(t2, n2("Opposite"), 3);
          });
        }(zt), function(t2) {
          X.forEach(function(e2) {
            var n2 = e2.name, r2 = e2.attacher;
            r2(t2, n2("Edge"), "mixed"), r2(t2, n2("DirectedEdge"), "directed"), r2(t2, n2("UndirectedEdge"), "undirected");
          });
        }(zt), function(t2) {
          et.forEach(function(e2) {
            !function(t3, e3) {
              var n2 = e3.name, r2 = e3.type, i2 = e3.direction;
              t3.prototype[n2] = function(t4, e4) {
                if ("mixed" !== r2 && "mixed" !== this.type && r2 !== this.type)
                  return [];
                if (!arguments.length)
                  return ut(this, r2);
                if (1 === arguments.length) {
                  t4 = "" + t4;
                  var o2 = this._nodes.get(t4);
                  if (void 0 === o2)
                    throw new F("Graph.".concat(n2, ': could not find the "').concat(t4, '" node in the graph.'));
                  return pt(this.multi, "mixed" === r2 ? this.type : r2, i2, o2);
                }
                if (2 === arguments.length) {
                  t4 = "" + t4, e4 = "" + e4;
                  var a2 = this._nodes.get(t4);
                  if (!a2)
                    throw new F("Graph.".concat(n2, ':  could not find the "').concat(t4, '" source node in the graph.'));
                  if (!this._nodes.has(e4))
                    throw new F("Graph.".concat(n2, ':  could not find the "').concat(e4, '" target node in the graph.'));
                  return gt(r2, this.multi, i2, a2, e4);
                }
                throw new B("Graph.".concat(n2, ": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length, ")."));
              };
            }(t2, e2), function(t3, e3) {
              var n2 = e3.name, r2 = e3.type, i2 = e3.direction, o2 = "forEach" + n2[0].toUpperCase() + n2.slice(1, -1);
              t3.prototype[o2] = function(t4, e4, n3) {
                if ("mixed" === r2 || "mixed" === this.type || r2 === this.type) {
                  if (1 === arguments.length)
                    return dt(false, this, r2, n3 = t4);
                  if (2 === arguments.length) {
                    t4 = "" + t4, n3 = e4;
                    var a3 = this._nodes.get(t4);
                    if (void 0 === a3)
                      throw new F("Graph.".concat(o2, ': could not find the "').concat(t4, '" node in the graph.'));
                    return ht(false, this.multi, "mixed" === r2 ? this.type : r2, i2, a3, n3);
                  }
                  if (3 === arguments.length) {
                    t4 = "" + t4, e4 = "" + e4;
                    var c3 = this._nodes.get(t4);
                    if (!c3)
                      throw new F("Graph.".concat(o2, ':  could not find the "').concat(t4, '" source node in the graph.'));
                    if (!this._nodes.has(e4))
                      throw new F("Graph.".concat(o2, ':  could not find the "').concat(e4, '" target node in the graph.'));
                    return lt(false, r2, this.multi, i2, c3, e4, n3);
                  }
                  throw new B("Graph.".concat(o2, ": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length, ")."));
                }
              };
              var a2 = "map" + n2[0].toUpperCase() + n2.slice(1);
              t3.prototype[a2] = function() {
                var t4, e4 = Array.prototype.slice.call(arguments), n3 = e4.pop();
                if (0 === e4.length) {
                  var i3 = 0;
                  "directed" !== r2 && (i3 += this.undirectedSize), "undirected" !== r2 && (i3 += this.directedSize), t4 = new Array(i3);
                  var a3 = 0;
                  e4.push(function(e5, r3, i4, o3, c3, u3, d2) {
                    t4[a3++] = n3(e5, r3, i4, o3, c3, u3, d2);
                  });
                } else
                  t4 = [], e4.push(function(e5, r3, i4, o3, a4, c3, u3) {
                    t4.push(n3(e5, r3, i4, o3, a4, c3, u3));
                  });
                return this[o2].apply(this, e4), t4;
              };
              var c2 = "filter" + n2[0].toUpperCase() + n2.slice(1);
              t3.prototype[c2] = function() {
                var t4 = Array.prototype.slice.call(arguments), e4 = t4.pop(), n3 = [];
                return t4.push(function(t5, r3, i3, o3, a3, c3, u3) {
                  e4(t5, r3, i3, o3, a3, c3, u3) && n3.push(t5);
                }), this[o2].apply(this, t4), n3;
              };
              var u2 = "reduce" + n2[0].toUpperCase() + n2.slice(1);
              t3.prototype[u2] = function() {
                var t4, e4, n3 = Array.prototype.slice.call(arguments);
                if (n3.length < 2 || n3.length > 4)
                  throw new B("Graph.".concat(u2, ": invalid number of arguments (expecting 2, 3 or 4 and got ").concat(n3.length, ")."));
                if ("function" == typeof n3[n3.length - 1] && "function" != typeof n3[n3.length - 2])
                  throw new B("Graph.".concat(u2, ": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));
                2 === n3.length ? (t4 = n3[0], e4 = n3[1], n3 = []) : 3 === n3.length ? (t4 = n3[1], e4 = n3[2], n3 = [n3[0]]) : 4 === n3.length && (t4 = n3[2], e4 = n3[3], n3 = [n3[0], n3[1]]);
                var r3 = e4;
                return n3.push(function(e5, n4, i3, o3, a3, c3, u3) {
                  r3 = t4(r3, e5, n4, i3, o3, a3, c3, u3);
                }), this[o2].apply(this, n3), r3;
              };
            }(t2, e2), function(t3, e3) {
              var n2 = e3.name, r2 = e3.type, i2 = e3.direction, o2 = "find" + n2[0].toUpperCase() + n2.slice(1, -1);
              t3.prototype[o2] = function(t4, e4, n3) {
                if ("mixed" !== r2 && "mixed" !== this.type && r2 !== this.type)
                  return false;
                if (1 === arguments.length)
                  return dt(true, this, r2, n3 = t4);
                if (2 === arguments.length) {
                  t4 = "" + t4, n3 = e4;
                  var a3 = this._nodes.get(t4);
                  if (void 0 === a3)
                    throw new F("Graph.".concat(o2, ': could not find the "').concat(t4, '" node in the graph.'));
                  return ht(true, this.multi, "mixed" === r2 ? this.type : r2, i2, a3, n3);
                }
                if (3 === arguments.length) {
                  t4 = "" + t4, e4 = "" + e4;
                  var c3 = this._nodes.get(t4);
                  if (!c3)
                    throw new F("Graph.".concat(o2, ':  could not find the "').concat(t4, '" source node in the graph.'));
                  if (!this._nodes.has(e4))
                    throw new F("Graph.".concat(o2, ':  could not find the "').concat(e4, '" target node in the graph.'));
                  return lt(true, r2, this.multi, i2, c3, e4, n3);
                }
                throw new B("Graph.".concat(o2, ": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length, ")."));
              };
              var a2 = "some" + n2[0].toUpperCase() + n2.slice(1, -1);
              t3.prototype[a2] = function() {
                var t4 = Array.prototype.slice.call(arguments), e4 = t4.pop();
                return t4.push(function(t5, n3, r3, i3, o3, a3, c3) {
                  return e4(t5, n3, r3, i3, o3, a3, c3);
                }), !!this[o2].apply(this, t4);
              };
              var c2 = "every" + n2[0].toUpperCase() + n2.slice(1, -1);
              t3.prototype[c2] = function() {
                var t4 = Array.prototype.slice.call(arguments), e4 = t4.pop();
                return t4.push(function(t5, n3, r3, i3, o3, a3, c3) {
                  return !e4(t5, n3, r3, i3, o3, a3, c3);
                }), !this[o2].apply(this, t4);
              };
            }(t2, e2), function(t3, e3) {
              var n2 = e3.name, r2 = e3.type, i2 = e3.direction, o2 = n2.slice(0, -1) + "Entries";
              t3.prototype[o2] = function(t4, e4) {
                if ("mixed" !== r2 && "mixed" !== this.type && r2 !== this.type)
                  return O.empty();
                if (!arguments.length)
                  return st(this, r2);
                if (1 === arguments.length) {
                  t4 = "" + t4;
                  var n3 = this._nodes.get(t4);
                  if (!n3)
                    throw new F("Graph.".concat(o2, ': could not find the "').concat(t4, '" node in the graph.'));
                  return ft(r2, i2, n3);
                }
                if (2 === arguments.length) {
                  t4 = "" + t4, e4 = "" + e4;
                  var a2 = this._nodes.get(t4);
                  if (!a2)
                    throw new F("Graph.".concat(o2, ':  could not find the "').concat(t4, '" source node in the graph.'));
                  if (!this._nodes.has(e4))
                    throw new F("Graph.".concat(o2, ':  could not find the "').concat(e4, '" target node in the graph.'));
                  return yt(r2, i2, a2, e4);
                }
                throw new B("Graph.".concat(o2, ": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length, ")."));
              };
            }(t2, e2);
          });
        }(zt), function(t2) {
          wt.forEach(function(e2) {
            _t(t2, e2), function(t3, e3) {
              var n2 = e3.name, r2 = e3.type, i2 = e3.direction, o2 = "forEach" + n2[0].toUpperCase() + n2.slice(1, -1);
              t3.prototype[o2] = function(t4, e4) {
                if ("mixed" === r2 || "mixed" === this.type || r2 === this.type) {
                  t4 = "" + t4;
                  var n3 = this._nodes.get(t4);
                  if (void 0 === n3)
                    throw new F("Graph.".concat(o2, ': could not find the "').concat(t4, '" node in the graph.'));
                  mt(false, "mixed" === r2 ? this.type : r2, i2, n3, e4);
                }
              };
              var a2 = "map" + n2[0].toUpperCase() + n2.slice(1);
              t3.prototype[a2] = function(t4, e4) {
                var n3 = [];
                return this[o2](t4, function(t5, r3) {
                  n3.push(e4(t5, r3));
                }), n3;
              };
              var c2 = "filter" + n2[0].toUpperCase() + n2.slice(1);
              t3.prototype[c2] = function(t4, e4) {
                var n3 = [];
                return this[o2](t4, function(t5, r3) {
                  e4(t5, r3) && n3.push(t5);
                }), n3;
              };
              var u2 = "reduce" + n2[0].toUpperCase() + n2.slice(1);
              t3.prototype[u2] = function(t4, e4, n3) {
                if (arguments.length < 3)
                  throw new B("Graph.".concat(u2, ": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));
                var r3 = n3;
                return this[o2](t4, function(t5, n4) {
                  r3 = e4(r3, t5, n4);
                }), r3;
              };
            }(t2, e2), function(t3, e3) {
              var n2 = e3.name, r2 = e3.type, i2 = e3.direction, o2 = n2[0].toUpperCase() + n2.slice(1, -1), a2 = "find" + o2;
              t3.prototype[a2] = function(t4, e4) {
                if ("mixed" === r2 || "mixed" === this.type || r2 === this.type) {
                  t4 = "" + t4;
                  var n3 = this._nodes.get(t4);
                  if (void 0 === n3)
                    throw new F("Graph.".concat(a2, ': could not find the "').concat(t4, '" node in the graph.'));
                  return mt(true, "mixed" === r2 ? this.type : r2, i2, n3, e4);
                }
              };
              var c2 = "some" + o2;
              t3.prototype[c2] = function(t4, e4) {
                return !!this[a2](t4, e4);
              };
              var u2 = "every" + o2;
              t3.prototype[u2] = function(t4, e4) {
                return !this[a2](t4, function(t5, n3) {
                  return !e4(t5, n3);
                });
              };
            }(t2, e2), Gt(t2, e2);
          });
        }(zt);
        var Wt = function(t2) {
          function n2(e2) {
            var n3 = u({ type: "directed" }, e2);
            if ("multi" in n3 && false !== n3.multi)
              throw new B("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");
            if ("directed" !== n3.type)
              throw new B('DirectedGraph.from: inconsistent "' + n3.type + '" type in given options!');
            return t2.call(this, n3) || this;
          }
          __name(n2, "n");
          return e(n2, t2), n2;
        }(zt), Pt = function(t2) {
          function n2(e2) {
            var n3 = u({ type: "undirected" }, e2);
            if ("multi" in n3 && false !== n3.multi)
              throw new B("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");
            if ("undirected" !== n3.type)
              throw new B('UndirectedGraph.from: inconsistent "' + n3.type + '" type in given options!');
            return t2.call(this, n3) || this;
          }
          __name(n2, "n");
          return e(n2, t2), n2;
        }(zt), Rt = function(t2) {
          function n2(e2) {
            var n3 = u({ multi: true }, e2);
            if ("multi" in n3 && true !== n3.multi)
              throw new B("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");
            return t2.call(this, n3) || this;
          }
          __name(n2, "n");
          return e(n2, t2), n2;
        }(zt), Kt = function(t2) {
          function n2(e2) {
            var n3 = u({ type: "directed", multi: true }, e2);
            if ("multi" in n3 && true !== n3.multi)
              throw new B("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");
            if ("directed" !== n3.type)
              throw new B('MultiDirectedGraph.from: inconsistent "' + n3.type + '" type in given options!');
            return t2.call(this, n3) || this;
          }
          __name(n2, "n");
          return e(n2, t2), n2;
        }(zt), Tt = function(t2) {
          function n2(e2) {
            var n3 = u({ type: "undirected", multi: true }, e2);
            if ("multi" in n3 && true !== n3.multi)
              throw new B("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");
            if ("undirected" !== n3.type)
              throw new B('MultiUndirectedGraph.from: inconsistent "' + n3.type + '" type in given options!');
            return t2.call(this, n3) || this;
          }
          __name(n2, "n");
          return e(n2, t2), n2;
        }(zt);
        function Bt(t2) {
          t2.from = function(e2, n2) {
            var r2 = u({}, e2.options, n2), i2 = new t2(r2);
            return i2.import(e2), i2;
          };
        }
        __name(Bt, "Bt");
        return Bt(zt), Bt(Wt), Bt(Pt), Bt(Rt), Bt(Kt), Bt(Tt), zt.Graph = zt, zt.DirectedGraph = Wt, zt.UndirectedGraph = Pt, zt.MultiGraph = Rt, zt.MultiDirectedGraph = Kt, zt.MultiUndirectedGraph = Tt, zt.InvalidArgumentsGraphError = B, zt.NotFoundGraphError = F, zt.UsageGraphError = I, zt;
      });
    }
  });

  // ../boardzilla-core/node_modules/graphology-utils/is-graph.js
  var require_is_graph = __commonJS({
    "../boardzilla-core/node_modules/graphology-utils/is-graph.js"(exports2, module2) {
      module2.exports = /* @__PURE__ */ __name(function isGraph(value) {
        return value !== null && typeof value === "object" && typeof value.addUndirectedEdgeWithKey === "function" && typeof value.dropNode === "function" && typeof value.multi === "boolean";
      }, "isGraph");
    }
  });

  // ../boardzilla-core/node_modules/obliterator/iterator.js
  var require_iterator = __commonJS({
    "../boardzilla-core/node_modules/obliterator/iterator.js"(exports2, module2) {
      function Iterator(next) {
        if (typeof next !== "function")
          throw new Error("obliterator/iterator: expecting a function!");
        this.next = next;
      }
      __name(Iterator, "Iterator");
      if (typeof Symbol !== "undefined")
        Iterator.prototype[Symbol.iterator] = function() {
          return this;
        };
      Iterator.of = function() {
        var args = arguments, l = args.length, i = 0;
        return new Iterator(function() {
          if (i >= l)
            return { done: true };
          return { done: false, value: args[i++] };
        });
      };
      Iterator.empty = function() {
        var iterator = new Iterator(function() {
          return { done: true };
        });
        return iterator;
      };
      Iterator.fromSequence = function(sequence) {
        var i = 0, l = sequence.length;
        return new Iterator(function() {
          if (i >= l)
            return { done: true };
          return { done: false, value: sequence[i++] };
        });
      };
      Iterator.is = function(value) {
        if (value instanceof Iterator)
          return true;
        return typeof value === "object" && value !== null && typeof value.next === "function";
      };
      module2.exports = Iterator;
    }
  });

  // ../boardzilla-core/node_modules/obliterator/support.js
  var require_support = __commonJS({
    "../boardzilla-core/node_modules/obliterator/support.js"(exports2) {
      exports2.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== "undefined";
      exports2.SYMBOL_SUPPORT = typeof Symbol !== "undefined";
    }
  });

  // ../boardzilla-core/node_modules/obliterator/foreach.js
  var require_foreach = __commonJS({
    "../boardzilla-core/node_modules/obliterator/foreach.js"(exports2, module2) {
      var support = require_support();
      var ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;
      var SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;
      module2.exports = /* @__PURE__ */ __name(function forEach3(iterable, callback) {
        var iterator, k, i, l, s;
        if (!iterable)
          throw new Error("obliterator/forEach: invalid iterable.");
        if (typeof callback !== "function")
          throw new Error("obliterator/forEach: expecting a callback.");
        if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
          for (i = 0, l = iterable.length; i < l; i++)
            callback(iterable[i], i);
          return;
        }
        if (typeof iterable.forEach === "function") {
          iterable.forEach(callback);
          return;
        }
        if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
          iterable = iterable[Symbol.iterator]();
        }
        if (typeof iterable.next === "function") {
          iterator = iterable;
          i = 0;
          while (s = iterator.next(), s.done !== true) {
            callback(s.value, i);
            i++;
          }
          return;
        }
        for (k in iterable) {
          if (iterable.hasOwnProperty(k)) {
            callback(iterable[k], k);
          }
        }
        return;
      }, "forEach");
    }
  });

  // ../boardzilla-core/node_modules/mnemonist/queue.js
  var require_queue = __commonJS({
    "../boardzilla-core/node_modules/mnemonist/queue.js"(exports2, module2) {
      var Iterator = require_iterator();
      var forEach3 = require_foreach();
      function Queue() {
        this.clear();
      }
      __name(Queue, "Queue");
      Queue.prototype.clear = function() {
        this.items = [];
        this.offset = 0;
        this.size = 0;
      };
      Queue.prototype.enqueue = function(item) {
        this.items.push(item);
        return ++this.size;
      };
      Queue.prototype.dequeue = function() {
        if (!this.size)
          return;
        var item = this.items[this.offset];
        if (++this.offset * 2 >= this.items.length) {
          this.items = this.items.slice(this.offset);
          this.offset = 0;
        }
        this.size--;
        return item;
      };
      Queue.prototype.peek = function() {
        if (!this.size)
          return;
        return this.items[this.offset];
      };
      Queue.prototype.forEach = function(callback, scope) {
        scope = arguments.length > 1 ? scope : this;
        for (var i = this.offset, j = 0, l = this.items.length; i < l; i++, j++)
          callback.call(scope, this.items[i], j, this);
      };
      Queue.prototype.toArray = function() {
        return this.items.slice(this.offset);
      };
      Queue.prototype.values = function() {
        var items = this.items, i = this.offset;
        return new Iterator(function() {
          if (i >= items.length)
            return {
              done: true
            };
          var value = items[i];
          i++;
          return {
            value,
            done: false
          };
        });
      };
      Queue.prototype.entries = function() {
        var items = this.items, i = this.offset, j = 0;
        return new Iterator(function() {
          if (i >= items.length)
            return {
              done: true
            };
          var value = items[i];
          i++;
          return {
            value: [j++, value],
            done: false
          };
        });
      };
      if (typeof Symbol !== "undefined")
        Queue.prototype[Symbol.iterator] = Queue.prototype.values;
      Queue.prototype.toString = function() {
        return this.toArray().join(",");
      };
      Queue.prototype.toJSON = function() {
        return this.toArray();
      };
      Queue.prototype.inspect = function() {
        var array = this.toArray();
        Object.defineProperty(array, "constructor", {
          value: Queue,
          enumerable: false
        });
        return array;
      };
      if (typeof Symbol !== "undefined")
        Queue.prototype[Symbol.for("nodejs.util.inspect.custom")] = Queue.prototype.inspect;
      Queue.from = function(iterable) {
        var queue = new Queue();
        forEach3(iterable, function(value) {
          queue.enqueue(value);
        });
        return queue;
      };
      Queue.of = function() {
        return Queue.from(arguments);
      };
      module2.exports = Queue;
    }
  });

  // ../boardzilla-core/node_modules/@yomguithereal/helpers/extend.js
  var require_extend = __commonJS({
    "../boardzilla-core/node_modules/@yomguithereal/helpers/extend.js"(exports2, module2) {
      module2.exports = /* @__PURE__ */ __name(function extend(array, values) {
        var l2 = values.length;
        if (l2 === 0)
          return;
        var l1 = array.length;
        array.length += l2;
        for (var i = 0; i < l2; i++)
          array[l1 + i] = values[i];
      }, "extend");
    }
  });

  // ../boardzilla-core/node_modules/graphology-shortest-path/unweighted.js
  var require_unweighted = __commonJS({
    "../boardzilla-core/node_modules/graphology-shortest-path/unweighted.js"(exports2) {
      var isGraph = require_is_graph();
      var Queue = require_queue();
      var extend = require_extend();
      function bidirectional(graph, source, target) {
        if (!isGraph(graph))
          throw new Error("graphology-shortest-path: invalid graphology instance.");
        if (arguments.length < 3)
          throw new Error(
            "graphology-shortest-path: invalid number of arguments. Expecting at least 3."
          );
        if (!graph.hasNode(source))
          throw new Error(
            'graphology-shortest-path: the "' + source + '" source node does not exist in the given graph.'
          );
        if (!graph.hasNode(target))
          throw new Error(
            'graphology-shortest-path: the "' + target + '" target node does not exist in the given graph.'
          );
        source = "" + source;
        target = "" + target;
        if (source === target) {
          return [source];
        }
        var getPredecessors = graph.inboundNeighbors.bind(graph), getSuccessors = graph.outboundNeighbors.bind(graph);
        var predecessor = {}, successor = {};
        predecessor[source] = null;
        successor[target] = null;
        var forwardFringe = [source], reverseFringe = [target], currentFringe, node, neighbors, neighbor, i, j, l, m;
        var found = false;
        outer:
          while (forwardFringe.length && reverseFringe.length) {
            if (forwardFringe.length <= reverseFringe.length) {
              currentFringe = forwardFringe;
              forwardFringe = [];
              for (i = 0, l = currentFringe.length; i < l; i++) {
                node = currentFringe[i];
                neighbors = getSuccessors(node);
                for (j = 0, m = neighbors.length; j < m; j++) {
                  neighbor = neighbors[j];
                  if (!(neighbor in predecessor)) {
                    forwardFringe.push(neighbor);
                    predecessor[neighbor] = node;
                  }
                  if (neighbor in successor) {
                    found = true;
                    break outer;
                  }
                }
              }
            } else {
              currentFringe = reverseFringe;
              reverseFringe = [];
              for (i = 0, l = currentFringe.length; i < l; i++) {
                node = currentFringe[i];
                neighbors = getPredecessors(node);
                for (j = 0, m = neighbors.length; j < m; j++) {
                  neighbor = neighbors[j];
                  if (!(neighbor in successor)) {
                    reverseFringe.push(neighbor);
                    successor[neighbor] = node;
                  }
                  if (neighbor in predecessor) {
                    found = true;
                    break outer;
                  }
                }
              }
            }
          }
        if (!found)
          return null;
        var path = [];
        while (neighbor) {
          path.unshift(neighbor);
          neighbor = predecessor[neighbor];
        }
        neighbor = successor[path[path.length - 1]];
        while (neighbor) {
          path.push(neighbor);
          neighbor = successor[neighbor];
        }
        return path.length ? path : null;
      }
      __name(bidirectional, "bidirectional");
      function singleSource(graph, source) {
        if (!isGraph(graph))
          throw new Error("graphology-shortest-path: invalid graphology instance.");
        if (arguments.length < 2)
          throw new Error(
            "graphology-shortest-path: invalid number of arguments. Expecting at least 2."
          );
        if (!graph.hasNode(source))
          throw new Error(
            'graphology-shortest-path: the "' + source + '" source node does not exist in the given graph.'
          );
        source = "" + source;
        var nextLevel = {}, paths = {}, currentLevel, neighbors, v, w, i, l;
        nextLevel[source] = true;
        paths[source] = [source];
        while (Object.keys(nextLevel).length) {
          currentLevel = nextLevel;
          nextLevel = {};
          for (v in currentLevel) {
            neighbors = graph.outboundNeighbors(v);
            for (i = 0, l = neighbors.length; i < l; i++) {
              w = neighbors[i];
              if (!paths[w]) {
                paths[w] = paths[v].concat(w);
                nextLevel[w] = true;
              }
            }
          }
        }
        return paths;
      }
      __name(singleSource, "singleSource");
      function asbtractSingleSourceLength(method, graph, source) {
        if (!isGraph(graph))
          throw new Error("graphology-shortest-path: invalid graphology instance.");
        if (!graph.hasNode(source))
          throw new Error(
            'graphology-shortest-path: the "' + source + '" source node does not exist in the given graph.'
          );
        source = "" + source;
        var seen = /* @__PURE__ */ new Set();
        var lengths = {}, level = 0;
        lengths[source] = 0;
        var currentLevel = [source];
        var i, l, node;
        while (currentLevel.length !== 0) {
          var nextLevel = [];
          for (i = 0, l = currentLevel.length; i < l; i++) {
            node = currentLevel[i];
            if (seen.has(node))
              continue;
            seen.add(node);
            extend(nextLevel, graph[method](node));
            lengths[node] = level;
          }
          level++;
          currentLevel = nextLevel;
        }
        return lengths;
      }
      __name(asbtractSingleSourceLength, "asbtractSingleSourceLength");
      var singleSourceLength = asbtractSingleSourceLength.bind(
        null,
        "outboundNeighbors"
      );
      var undirectedSingleSourceLength = asbtractSingleSourceLength.bind(
        null,
        "neighbors"
      );
      function brandes(graph, source) {
        source = "" + source;
        var S = [], P = {}, sigma = {};
        var nodes = graph.nodes(), Dv, sigmav, neighbors, v, w, i, j, l, m;
        for (i = 0, l = nodes.length; i < l; i++) {
          v = nodes[i];
          P[v] = [];
          sigma[v] = 0;
        }
        var D = {};
        sigma[source] = 1;
        D[source] = 0;
        var queue = Queue.of(source);
        while (queue.size) {
          v = queue.dequeue();
          S.push(v);
          Dv = D[v];
          sigmav = sigma[v];
          neighbors = graph.outboundNeighbors(v);
          for (j = 0, m = neighbors.length; j < m; j++) {
            w = neighbors[j];
            if (!(w in D)) {
              queue.enqueue(w);
              D[w] = Dv + 1;
            }
            if (D[w] === Dv + 1) {
              sigma[w] += sigmav;
              P[w].push(v);
            }
          }
        }
        return [S, P, sigma];
      }
      __name(brandes, "brandes");
      exports2.bidirectional = bidirectional;
      exports2.singleSource = singleSource;
      exports2.singleSourceLength = singleSourceLength;
      exports2.undirectedSingleSourceLength = undirectedSingleSourceLength;
      exports2.brandes = brandes;
    }
  });

  // ../boardzilla-core/node_modules/graphology-shortest-path/utils.js
  var require_utils = __commonJS({
    "../boardzilla-core/node_modules/graphology-shortest-path/utils.js"(exports2) {
      var returnTrue = /* @__PURE__ */ __name(function() {
        return true;
      }, "returnTrue");
      exports2.edgePathFromNodePath = function(graph, nodePath) {
        var l = nodePath.length;
        var i, source, target, edge;
        if (l < 2) {
          source = nodePath[0];
          edge = graph.multi ? graph.findEdge(source, source, returnTrue) : graph.edge(source, source);
          if (edge)
            return [edge];
          return [];
        }
        l--;
        var edgePath = new Array(l);
        for (i = 0; i < l; i++) {
          source = nodePath[i];
          target = nodePath[i + 1];
          edge = graph.multi ? graph.findOutboundEdge(source, target, returnTrue) : graph.edge(source, target);
          if (edge === void 0)
            throw new Error(
              "graphology-shortest-path: given path is impossible in given graph."
            );
          edgePath[i] = edge;
        }
        return edgePath;
      };
    }
  });

  // ../boardzilla-core/node_modules/graphology-utils/getters.js
  var require_getters = __commonJS({
    "../boardzilla-core/node_modules/graphology-utils/getters.js"(exports2) {
      function coerceWeight(value) {
        if (typeof value !== "number" || isNaN(value))
          return 1;
        return value;
      }
      __name(coerceWeight, "coerceWeight");
      function createNodeValueGetter(nameOrFunction, defaultValue) {
        var getter = {};
        var coerceToDefault = /* @__PURE__ */ __name(function(v) {
          if (typeof v === "undefined")
            return defaultValue;
          return v;
        }, "coerceToDefault");
        if (typeof defaultValue === "function")
          coerceToDefault = defaultValue;
        var get4 = /* @__PURE__ */ __name(function(attributes) {
          return coerceToDefault(attributes[nameOrFunction]);
        }, "get");
        var returnDefault = /* @__PURE__ */ __name(function() {
          return coerceToDefault(void 0);
        }, "returnDefault");
        if (typeof nameOrFunction === "string") {
          getter.fromAttributes = get4;
          getter.fromGraph = function(graph, node) {
            return get4(graph.getNodeAttributes(node));
          };
          getter.fromEntry = function(node, attributes) {
            return get4(attributes);
          };
        } else if (typeof nameOrFunction === "function") {
          getter.fromAttributes = function() {
            throw new Error(
              "graphology-utils/getters/createNodeValueGetter: irrelevant usage."
            );
          };
          getter.fromGraph = function(graph, node) {
            return coerceToDefault(
              nameOrFunction(node, graph.getNodeAttributes(node))
            );
          };
          getter.fromEntry = function(node, attributes) {
            return coerceToDefault(nameOrFunction(node, attributes));
          };
        } else {
          getter.fromAttributes = returnDefault;
          getter.fromGraph = returnDefault;
          getter.fromEntry = returnDefault;
        }
        return getter;
      }
      __name(createNodeValueGetter, "createNodeValueGetter");
      function createEdgeValueGetter(nameOrFunction, defaultValue) {
        var getter = {};
        var coerceToDefault = /* @__PURE__ */ __name(function(v) {
          if (typeof v === "undefined")
            return defaultValue;
          return v;
        }, "coerceToDefault");
        if (typeof defaultValue === "function")
          coerceToDefault = defaultValue;
        var get4 = /* @__PURE__ */ __name(function(attributes) {
          return coerceToDefault(attributes[nameOrFunction]);
        }, "get");
        var returnDefault = /* @__PURE__ */ __name(function() {
          return coerceToDefault(void 0);
        }, "returnDefault");
        if (typeof nameOrFunction === "string") {
          getter.fromAttributes = get4;
          getter.fromGraph = function(graph, edge) {
            return get4(graph.getEdgeAttributes(edge));
          };
          getter.fromEntry = function(edge, attributes) {
            return get4(attributes);
          };
          getter.fromPartialEntry = getter.fromEntry;
          getter.fromMinimalEntry = getter.fromEntry;
        } else if (typeof nameOrFunction === "function") {
          getter.fromAttributes = function() {
            throw new Error(
              "graphology-utils/getters/createEdgeValueGetter: irrelevant usage."
            );
          };
          getter.fromGraph = function(graph, edge) {
            var extremities = graph.extremities(edge);
            return coerceToDefault(
              nameOrFunction(
                edge,
                graph.getEdgeAttributes(edge),
                extremities[0],
                extremities[1],
                graph.getNodeAttributes(extremities[0]),
                graph.getNodeAttributes(extremities[1]),
                graph.isUndirected(edge)
              )
            );
          };
          getter.fromEntry = function(e, a, s, t, sa, ta, u) {
            return coerceToDefault(nameOrFunction(e, a, s, t, sa, ta, u));
          };
          getter.fromPartialEntry = function(e, a, s, t) {
            return coerceToDefault(nameOrFunction(e, a, s, t));
          };
          getter.fromMinimalEntry = function(e, a) {
            return coerceToDefault(nameOrFunction(e, a));
          };
        } else {
          getter.fromAttributes = returnDefault;
          getter.fromGraph = returnDefault;
          getter.fromEntry = returnDefault;
          getter.fromMinimalEntry = returnDefault;
        }
        return getter;
      }
      __name(createEdgeValueGetter, "createEdgeValueGetter");
      exports2.createNodeValueGetter = createNodeValueGetter;
      exports2.createEdgeValueGetter = createEdgeValueGetter;
      exports2.createEdgeWeightGetter = function(name) {
        return createEdgeValueGetter(name, coerceWeight);
      };
    }
  });

  // ../boardzilla-core/node_modules/mnemonist/utils/comparators.js
  var require_comparators = __commonJS({
    "../boardzilla-core/node_modules/mnemonist/utils/comparators.js"(exports2) {
      var DEFAULT_COMPARATOR = /* @__PURE__ */ __name(function(a, b) {
        if (a < b)
          return -1;
        if (a > b)
          return 1;
        return 0;
      }, "DEFAULT_COMPARATOR");
      var DEFAULT_REVERSE_COMPARATOR = /* @__PURE__ */ __name(function(a, b) {
        if (a < b)
          return 1;
        if (a > b)
          return -1;
        return 0;
      }, "DEFAULT_REVERSE_COMPARATOR");
      function reverseComparator(comparator) {
        return function(a, b) {
          return comparator(b, a);
        };
      }
      __name(reverseComparator, "reverseComparator");
      function createTupleComparator(size) {
        if (size === 2) {
          return function(a, b) {
            if (a[0] < b[0])
              return -1;
            if (a[0] > b[0])
              return 1;
            if (a[1] < b[1])
              return -1;
            if (a[1] > b[1])
              return 1;
            return 0;
          };
        }
        return function(a, b) {
          var i = 0;
          while (i < size) {
            if (a[i] < b[i])
              return -1;
            if (a[i] > b[i])
              return 1;
            i++;
          }
          return 0;
        };
      }
      __name(createTupleComparator, "createTupleComparator");
      exports2.DEFAULT_COMPARATOR = DEFAULT_COMPARATOR;
      exports2.DEFAULT_REVERSE_COMPARATOR = DEFAULT_REVERSE_COMPARATOR;
      exports2.reverseComparator = reverseComparator;
      exports2.createTupleComparator = createTupleComparator;
    }
  });

  // ../boardzilla-core/node_modules/mnemonist/utils/typed-arrays.js
  var require_typed_arrays = __commonJS({
    "../boardzilla-core/node_modules/mnemonist/utils/typed-arrays.js"(exports2) {
      var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
      var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
      var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
      var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
      var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
      var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
      exports2.getPointerArray = function(size) {
        var maxIndex = size - 1;
        if (maxIndex <= MAX_8BIT_INTEGER)
          return Uint8Array;
        if (maxIndex <= MAX_16BIT_INTEGER)
          return Uint16Array;
        if (maxIndex <= MAX_32BIT_INTEGER)
          return Uint32Array;
        throw new Error("mnemonist: Pointer Array of size > 4294967295 is not supported.");
      };
      exports2.getSignedPointerArray = function(size) {
        var maxIndex = size - 1;
        if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
          return Int8Array;
        if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
          return Int16Array;
        if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
          return Int32Array;
        return Float64Array;
      };
      exports2.getNumberType = function(value) {
        if (value === (value | 0)) {
          if (Math.sign(value) === -1) {
            if (value <= 127 && value >= -128)
              return Int8Array;
            if (value <= 32767 && value >= -32768)
              return Int16Array;
            return Int32Array;
          } else {
            if (value <= 255)
              return Uint8Array;
            if (value <= 65535)
              return Uint16Array;
            return Uint32Array;
          }
        }
        return Float64Array;
      };
      var TYPE_PRIORITY = {
        Uint8Array: 1,
        Int8Array: 2,
        Uint16Array: 3,
        Int16Array: 4,
        Uint32Array: 5,
        Int32Array: 6,
        Float32Array: 7,
        Float64Array: 8
      };
      exports2.getMinimalRepresentation = function(array, getter) {
        var maxType = null, maxPriority = 0, p, t, v, i, l;
        for (i = 0, l = array.length; i < l; i++) {
          v = getter ? getter(array[i]) : array[i];
          t = exports2.getNumberType(v);
          p = TYPE_PRIORITY[t.name];
          if (p > maxPriority) {
            maxPriority = p;
            maxType = t;
          }
        }
        return maxType;
      };
      exports2.isTypedArray = function(value) {
        return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
      };
      exports2.concat = function() {
        var length = 0, i, o, l;
        for (i = 0, l = arguments.length; i < l; i++)
          length += arguments[i].length;
        var array = new arguments[0].constructor(length);
        for (i = 0, o = 0; i < l; i++) {
          array.set(arguments[i], o);
          o += arguments[i].length;
        }
        return array;
      };
      exports2.indices = function(length) {
        var PointerArray = exports2.getPointerArray(length);
        var array = new PointerArray(length);
        for (var i = 0; i < length; i++)
          array[i] = i;
        return array;
      };
    }
  });

  // ../boardzilla-core/node_modules/mnemonist/utils/iterables.js
  var require_iterables = __commonJS({
    "../boardzilla-core/node_modules/mnemonist/utils/iterables.js"(exports2) {
      var forEach3 = require_foreach();
      var typed = require_typed_arrays();
      function isArrayLike2(target) {
        return Array.isArray(target) || typed.isTypedArray(target);
      }
      __name(isArrayLike2, "isArrayLike");
      function guessLength(target) {
        if (typeof target.length === "number")
          return target.length;
        if (typeof target.size === "number")
          return target.size;
        return;
      }
      __name(guessLength, "guessLength");
      function toArray(target) {
        var l = guessLength(target);
        var array = typeof l === "number" ? new Array(l) : [];
        var i = 0;
        forEach3(target, function(value) {
          array[i++] = value;
        });
        return array;
      }
      __name(toArray, "toArray");
      function toArrayWithIndices(target) {
        var l = guessLength(target);
        var IndexArray = typeof l === "number" ? typed.getPointerArray(l) : Array;
        var array = typeof l === "number" ? new Array(l) : [];
        var indices = typeof l === "number" ? new IndexArray(l) : [];
        var i = 0;
        forEach3(target, function(value) {
          array[i] = value;
          indices[i] = i++;
        });
        return [array, indices];
      }
      __name(toArrayWithIndices, "toArrayWithIndices");
      exports2.isArrayLike = isArrayLike2;
      exports2.guessLength = guessLength;
      exports2.toArray = toArray;
      exports2.toArrayWithIndices = toArrayWithIndices;
    }
  });

  // ../boardzilla-core/node_modules/mnemonist/heap.js
  var require_heap = __commonJS({
    "../boardzilla-core/node_modules/mnemonist/heap.js"(exports2, module2) {
      var forEach3 = require_foreach();
      var comparators = require_comparators();
      var iterables = require_iterables();
      var DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR;
      var reverseComparator = comparators.reverseComparator;
      function siftDown(compare, heap, startIndex, i) {
        var item = heap[i], parentIndex, parent;
        while (i > startIndex) {
          parentIndex = i - 1 >> 1;
          parent = heap[parentIndex];
          if (compare(item, parent) < 0) {
            heap[i] = parent;
            i = parentIndex;
            continue;
          }
          break;
        }
        heap[i] = item;
      }
      __name(siftDown, "siftDown");
      function siftUp(compare, heap, i) {
        var endIndex = heap.length, startIndex = i, item = heap[i], childIndex = 2 * i + 1, rightIndex;
        while (childIndex < endIndex) {
          rightIndex = childIndex + 1;
          if (rightIndex < endIndex && compare(heap[childIndex], heap[rightIndex]) >= 0) {
            childIndex = rightIndex;
          }
          heap[i] = heap[childIndex];
          i = childIndex;
          childIndex = 2 * i + 1;
        }
        heap[i] = item;
        siftDown(compare, heap, startIndex, i);
      }
      __name(siftUp, "siftUp");
      function push(compare, heap, item) {
        heap.push(item);
        siftDown(compare, heap, 0, heap.length - 1);
      }
      __name(push, "push");
      function pop(compare, heap) {
        var lastItem = heap.pop();
        if (heap.length !== 0) {
          var item = heap[0];
          heap[0] = lastItem;
          siftUp(compare, heap, 0);
          return item;
        }
        return lastItem;
      }
      __name(pop, "pop");
      function replace(compare, heap, item) {
        if (heap.length === 0)
          throw new Error("mnemonist/heap.replace: cannot pop an empty heap.");
        var popped = heap[0];
        heap[0] = item;
        siftUp(compare, heap, 0);
        return popped;
      }
      __name(replace, "replace");
      function pushpop(compare, heap, item) {
        var tmp;
        if (heap.length !== 0 && compare(heap[0], item) < 0) {
          tmp = heap[0];
          heap[0] = item;
          item = tmp;
          siftUp(compare, heap, 0);
        }
        return item;
      }
      __name(pushpop, "pushpop");
      function heapify(compare, array) {
        var n = array.length, l = n >> 1, i = l;
        while (--i >= 0)
          siftUp(compare, array, i);
      }
      __name(heapify, "heapify");
      function consume(compare, heap) {
        var l = heap.length, i = 0;
        var array = new Array(l);
        while (i < l)
          array[i++] = pop(compare, heap);
        return array;
      }
      __name(consume, "consume");
      function nsmallest(compare, n, iterable) {
        if (arguments.length === 2) {
          iterable = n;
          n = compare;
          compare = DEFAULT_COMPARATOR;
        }
        var reverseCompare = reverseComparator(compare);
        var i, l, v;
        var min = Infinity;
        var result;
        if (n === 1) {
          if (iterables.isArrayLike(iterable)) {
            for (i = 0, l = iterable.length; i < l; i++) {
              v = iterable[i];
              if (min === Infinity || compare(v, min) < 0)
                min = v;
            }
            result = new iterable.constructor(1);
            result[0] = min;
            return result;
          }
          forEach3(iterable, function(value) {
            if (min === Infinity || compare(value, min) < 0)
              min = value;
          });
          return [min];
        }
        if (iterables.isArrayLike(iterable)) {
          if (n >= iterable.length)
            return iterable.slice().sort(compare);
          result = iterable.slice(0, n);
          heapify(reverseCompare, result);
          for (i = n, l = iterable.length; i < l; i++)
            if (reverseCompare(iterable[i], result[0]) > 0)
              replace(reverseCompare, result, iterable[i]);
          return result.sort(compare);
        }
        var size = iterables.guessLength(iterable);
        if (size !== null && size < n)
          n = size;
        result = new Array(n);
        i = 0;
        forEach3(iterable, function(value) {
          if (i < n) {
            result[i] = value;
          } else {
            if (i === n)
              heapify(reverseCompare, result);
            if (reverseCompare(value, result[0]) > 0)
              replace(reverseCompare, result, value);
          }
          i++;
        });
        if (result.length > i)
          result.length = i;
        return result.sort(compare);
      }
      __name(nsmallest, "nsmallest");
      function nlargest(compare, n, iterable) {
        if (arguments.length === 2) {
          iterable = n;
          n = compare;
          compare = DEFAULT_COMPARATOR;
        }
        var reverseCompare = reverseComparator(compare);
        var i, l, v;
        var max = -Infinity;
        var result;
        if (n === 1) {
          if (iterables.isArrayLike(iterable)) {
            for (i = 0, l = iterable.length; i < l; i++) {
              v = iterable[i];
              if (max === -Infinity || compare(v, max) > 0)
                max = v;
            }
            result = new iterable.constructor(1);
            result[0] = max;
            return result;
          }
          forEach3(iterable, function(value) {
            if (max === -Infinity || compare(value, max) > 0)
              max = value;
          });
          return [max];
        }
        if (iterables.isArrayLike(iterable)) {
          if (n >= iterable.length)
            return iterable.slice().sort(reverseCompare);
          result = iterable.slice(0, n);
          heapify(compare, result);
          for (i = n, l = iterable.length; i < l; i++)
            if (compare(iterable[i], result[0]) > 0)
              replace(compare, result, iterable[i]);
          return result.sort(reverseCompare);
        }
        var size = iterables.guessLength(iterable);
        if (size !== null && size < n)
          n = size;
        result = new Array(n);
        i = 0;
        forEach3(iterable, function(value) {
          if (i < n) {
            result[i] = value;
          } else {
            if (i === n)
              heapify(compare, result);
            if (compare(value, result[0]) > 0)
              replace(compare, result, value);
          }
          i++;
        });
        if (result.length > i)
          result.length = i;
        return result.sort(reverseCompare);
      }
      __name(nlargest, "nlargest");
      function Heap(comparator) {
        this.clear();
        this.comparator = comparator || DEFAULT_COMPARATOR;
        if (typeof this.comparator !== "function")
          throw new Error("mnemonist/Heap.constructor: given comparator should be a function.");
      }
      __name(Heap, "Heap");
      Heap.prototype.clear = function() {
        this.items = [];
        this.size = 0;
      };
      Heap.prototype.push = function(item) {
        push(this.comparator, this.items, item);
        return ++this.size;
      };
      Heap.prototype.peek = function() {
        return this.items[0];
      };
      Heap.prototype.pop = function() {
        if (this.size !== 0)
          this.size--;
        return pop(this.comparator, this.items);
      };
      Heap.prototype.replace = function(item) {
        return replace(this.comparator, this.items, item);
      };
      Heap.prototype.pushpop = function(item) {
        return pushpop(this.comparator, this.items, item);
      };
      Heap.prototype.consume = function() {
        this.size = 0;
        return consume(this.comparator, this.items);
      };
      Heap.prototype.toArray = function() {
        return consume(this.comparator, this.items.slice());
      };
      Heap.prototype.inspect = function() {
        var proxy = this.toArray();
        Object.defineProperty(proxy, "constructor", {
          value: Heap,
          enumerable: false
        });
        return proxy;
      };
      if (typeof Symbol !== "undefined")
        Heap.prototype[Symbol.for("nodejs.util.inspect.custom")] = Heap.prototype.inspect;
      function MaxHeap(comparator) {
        this.clear();
        this.comparator = comparator || DEFAULT_COMPARATOR;
        if (typeof this.comparator !== "function")
          throw new Error("mnemonist/MaxHeap.constructor: given comparator should be a function.");
        this.comparator = reverseComparator(this.comparator);
      }
      __name(MaxHeap, "MaxHeap");
      MaxHeap.prototype = Heap.prototype;
      Heap.from = function(iterable, comparator) {
        var heap = new Heap(comparator);
        var items;
        if (iterables.isArrayLike(iterable))
          items = iterable.slice();
        else
          items = iterables.toArray(iterable);
        heapify(heap.comparator, items);
        heap.items = items;
        heap.size = items.length;
        return heap;
      };
      MaxHeap.from = function(iterable, comparator) {
        var heap = new MaxHeap(comparator);
        var items;
        if (iterables.isArrayLike(iterable))
          items = iterable.slice();
        else
          items = iterables.toArray(iterable);
        heapify(heap.comparator, items);
        heap.items = items;
        heap.size = items.length;
        return heap;
      };
      Heap.siftUp = siftUp;
      Heap.siftDown = siftDown;
      Heap.push = push;
      Heap.pop = pop;
      Heap.replace = replace;
      Heap.pushpop = pushpop;
      Heap.heapify = heapify;
      Heap.consume = consume;
      Heap.nsmallest = nsmallest;
      Heap.nlargest = nlargest;
      Heap.MinHeap = Heap;
      Heap.MaxHeap = MaxHeap;
      module2.exports = Heap;
    }
  });

  // ../boardzilla-core/node_modules/graphology-shortest-path/dijkstra.js
  var require_dijkstra = __commonJS({
    "../boardzilla-core/node_modules/graphology-shortest-path/dijkstra.js"(exports2) {
      var isGraph = require_is_graph();
      var createEdgeWeightGetter = require_getters().createEdgeWeightGetter;
      var Heap = require_heap();
      var DEFAULT_WEIGHT_ATTRIBUTE = "weight";
      function DIJKSTRA_HEAP_COMPARATOR(a, b) {
        if (a[0] > b[0])
          return 1;
        if (a[0] < b[0])
          return -1;
        if (a[1] > b[1])
          return 1;
        if (a[1] < b[1])
          return -1;
        if (a[2] > b[2])
          return 1;
        if (a[2] < b[2])
          return -1;
        return 0;
      }
      __name(DIJKSTRA_HEAP_COMPARATOR, "DIJKSTRA_HEAP_COMPARATOR");
      function BRANDES_DIJKSTRA_HEAP_COMPARATOR(a, b) {
        if (a[0] > b[0])
          return 1;
        if (a[0] < b[0])
          return -1;
        if (a[1] > b[1])
          return 1;
        if (a[1] < b[1])
          return -1;
        if (a[2] > b[2])
          return 1;
        if (a[2] < b[2])
          return -1;
        if (a[3] > b[3])
          return 1;
        if (a[3] < b[3])
          return -1;
        return 0;
      }
      __name(BRANDES_DIJKSTRA_HEAP_COMPARATOR, "BRANDES_DIJKSTRA_HEAP_COMPARATOR");
      function abstractBidirectionalDijkstra(graph, source, target, getEdgeWeight) {
        source = "" + source;
        target = "" + target;
        if (!isGraph(graph))
          throw new Error(
            "graphology-shortest-path/dijkstra: invalid graphology instance."
          );
        if (source && !graph.hasNode(source))
          throw new Error(
            'graphology-shortest-path/dijkstra: the "' + source + '" source node does not exist in the given graph.'
          );
        if (target && !graph.hasNode(target))
          throw new Error(
            'graphology-shortest-path/dijkstra: the "' + target + '" target node does not exist in the given graph.'
          );
        getEdgeWeight = createEdgeWeightGetter(
          getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE
        ).fromMinimalEntry;
        if (source === target)
          return [0, [source]];
        var distances = [{}, {}], paths = [{}, {}], fringe = [
          new Heap(DIJKSTRA_HEAP_COMPARATOR),
          new Heap(DIJKSTRA_HEAP_COMPARATOR)
        ], seen = [{}, {}];
        paths[0][source] = [source];
        paths[1][target] = [target];
        seen[0][source] = 0;
        seen[1][target] = 0;
        var finalPath = [], finalDistance = Infinity;
        var count = 0, dir = 1, item, edges, cost, d, v, u, e, i, l;
        fringe[0].push([0, count++, source]);
        fringe[1].push([0, count++, target]);
        while (fringe[0].size && fringe[1].size) {
          dir = 1 - dir;
          item = fringe[dir].pop();
          d = item[0];
          v = item[2];
          if (v in distances[dir])
            continue;
          distances[dir][v] = d;
          if (v in distances[1 - dir])
            return [finalDistance, finalPath];
          edges = dir === 1 ? graph.inboundEdges(v) : graph.outboundEdges(v);
          for (i = 0, l = edges.length; i < l; i++) {
            e = edges[i];
            u = graph.opposite(v, e);
            cost = distances[dir][v] + getEdgeWeight(e, graph.getEdgeAttributes(e));
            if (u in distances[dir] && cost < distances[dir][u]) {
              throw Error(
                "graphology-shortest-path/dijkstra: contradictory paths found. Do some of your edges have a negative weight?"
              );
            } else if (!(u in seen[dir]) || cost < seen[dir][u]) {
              seen[dir][u] = cost;
              fringe[dir].push([cost, count++, u]);
              paths[dir][u] = paths[dir][v].concat(u);
              if (u in seen[0] && u in seen[1]) {
                d = seen[0][u] + seen[1][u];
                if (finalPath.length === 0 || finalDistance > d) {
                  finalDistance = d;
                  finalPath = paths[0][u].concat(paths[1][u].slice(0, -1).reverse());
                }
              }
            }
          }
        }
        return [Infinity, null];
      }
      __name(abstractBidirectionalDijkstra, "abstractBidirectionalDijkstra");
      function abstractDijkstraMultisource(graph, sources, getEdgeWeight, cutoff, target, paths) {
        if (!isGraph(graph))
          throw new Error(
            "graphology-shortest-path/dijkstra: invalid graphology instance."
          );
        if (target && !graph.hasNode(target))
          throw new Error(
            'graphology-shortest-path/dijkstra: the "' + target + '" target node does not exist in the given graph.'
          );
        getEdgeWeight = createEdgeWeightGetter(
          getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE
        ).fromMinimalEntry;
        var distances = {}, seen = {}, fringe = new Heap(DIJKSTRA_HEAP_COMPARATOR);
        var count = 0, edges, item, cost, v, u, e, d, i, j, l, m;
        for (i = 0, l = sources.length; i < l; i++) {
          v = sources[i];
          seen[v] = 0;
          fringe.push([0, count++, v]);
          if (paths)
            paths[v] = [v];
        }
        while (fringe.size) {
          item = fringe.pop();
          d = item[0];
          v = item[2];
          if (v in distances)
            continue;
          distances[v] = d;
          if (v === target)
            break;
          edges = graph.outboundEdges(v);
          for (j = 0, m = edges.length; j < m; j++) {
            e = edges[j];
            u = graph.opposite(v, e);
            cost = getEdgeWeight(e, graph.getEdgeAttributes(e)) + distances[v];
            if (cutoff && cost > cutoff)
              continue;
            if (u in distances && cost < distances[u]) {
              throw Error(
                "graphology-shortest-path/dijkstra: contradictory paths found. Do some of your edges have a negative weight?"
              );
            } else if (!(u in seen) || cost < seen[u]) {
              seen[u] = cost;
              fringe.push([cost, count++, u]);
              if (paths)
                paths[u] = paths[v].concat(u);
            }
          }
        }
        return distances;
      }
      __name(abstractDijkstraMultisource, "abstractDijkstraMultisource");
      function singleSourceDijkstra(graph, source, getEdgeWeight) {
        var paths = {};
        abstractDijkstraMultisource(graph, [source], getEdgeWeight, 0, null, paths);
        return paths;
      }
      __name(singleSourceDijkstra, "singleSourceDijkstra");
      function bidirectionalDijkstra(graph, source, target, getEdgeWeight) {
        return abstractBidirectionalDijkstra(graph, source, target, getEdgeWeight)[1];
      }
      __name(bidirectionalDijkstra, "bidirectionalDijkstra");
      function brandes(graph, source, getEdgeWeight) {
        source = "" + source;
        getEdgeWeight = createEdgeWeightGetter(
          getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE
        ).fromMinimalEntry;
        var S = [], P = {}, sigma = {};
        var nodes = graph.nodes(), edges, item, pred, dist, cost, v, w, e, i, l;
        for (i = 0, l = nodes.length; i < l; i++) {
          v = nodes[i];
          P[v] = [];
          sigma[v] = 0;
        }
        var D = {};
        sigma[source] = 1;
        var seen = {};
        seen[source] = 0;
        var count = 0;
        var Q = new Heap(BRANDES_DIJKSTRA_HEAP_COMPARATOR);
        Q.push([0, count++, source, source]);
        while (Q.size) {
          item = Q.pop();
          dist = item[0];
          pred = item[2];
          v = item[3];
          if (v in D)
            continue;
          sigma[v] += sigma[pred];
          S.push(v);
          D[v] = dist;
          edges = graph.outboundEdges(v);
          for (i = 0, l = edges.length; i < l; i++) {
            e = edges[i];
            w = graph.opposite(v, e);
            cost = dist + getEdgeWeight(e, graph.getEdgeAttributes(e));
            if (!(w in D) && (!(w in seen) || cost < seen[w])) {
              seen[w] = cost;
              Q.push([cost, count++, v, w]);
              sigma[w] = 0;
              P[w] = [v];
            } else if (cost === seen[w]) {
              sigma[w] += sigma[v];
              P[w].push(v);
            }
          }
        }
        return [S, P, sigma];
      }
      __name(brandes, "brandes");
      exports2.bidirectional = bidirectionalDijkstra;
      exports2.singleSource = singleSourceDijkstra;
      exports2.brandes = brandes;
    }
  });

  // ../boardzilla-core/node_modules/graphology-shortest-path/index.js
  var require_graphology_shortest_path = __commonJS({
    "../boardzilla-core/node_modules/graphology-shortest-path/index.js"(exports2) {
      var unweighted = require_unweighted();
      var utils = require_utils();
      exports2.unweighted = unweighted;
      exports2.dijkstra = require_dijkstra();
      exports2.bidirectional = unweighted.bidirectional;
      exports2.singleSource = unweighted.singleSource;
      exports2.singleSourceLength = unweighted.singleSourceLength;
      exports2.undirectedSingleSourceLength = unweighted.undirectedSingleSourceLength;
      exports2.brandes = unweighted.brandes;
      exports2.edgePathFromNodePath = utils.edgePathFromNodePath;
    }
  });

  // ../boardzilla-core/node_modules/mnemonist/fixed-deque.js
  var require_fixed_deque = __commonJS({
    "../boardzilla-core/node_modules/mnemonist/fixed-deque.js"(exports2, module2) {
      var iterables = require_iterables();
      var Iterator = require_iterator();
      function FixedDeque(ArrayClass, capacity) {
        if (arguments.length < 2)
          throw new Error("mnemonist/fixed-deque: expecting an Array class and a capacity.");
        if (typeof capacity !== "number" || capacity <= 0)
          throw new Error("mnemonist/fixed-deque: `capacity` should be a positive number.");
        this.ArrayClass = ArrayClass;
        this.capacity = capacity;
        this.items = new ArrayClass(this.capacity);
        this.clear();
      }
      __name(FixedDeque, "FixedDeque");
      FixedDeque.prototype.clear = function() {
        this.start = 0;
        this.size = 0;
      };
      FixedDeque.prototype.push = function(item) {
        if (this.size === this.capacity)
          throw new Error("mnemonist/fixed-deque.push: deque capacity (" + this.capacity + ") exceeded!");
        var index = (this.start + this.size) % this.capacity;
        this.items[index] = item;
        return ++this.size;
      };
      FixedDeque.prototype.unshift = function(item) {
        if (this.size === this.capacity)
          throw new Error("mnemonist/fixed-deque.unshift: deque capacity (" + this.capacity + ") exceeded!");
        var index = this.start - 1;
        if (this.start === 0)
          index = this.capacity - 1;
        this.items[index] = item;
        this.start = index;
        return ++this.size;
      };
      FixedDeque.prototype.pop = function() {
        if (this.size === 0)
          return;
        const index = (this.start + this.size - 1) % this.capacity;
        this.size--;
        return this.items[index];
      };
      FixedDeque.prototype.shift = function() {
        if (this.size === 0)
          return;
        var index = this.start;
        this.size--;
        this.start++;
        if (this.start === this.capacity)
          this.start = 0;
        return this.items[index];
      };
      FixedDeque.prototype.peekFirst = function() {
        if (this.size === 0)
          return;
        return this.items[this.start];
      };
      FixedDeque.prototype.peekLast = function() {
        if (this.size === 0)
          return;
        var index = this.start + this.size - 1;
        if (index > this.capacity)
          index -= this.capacity;
        return this.items[index];
      };
      FixedDeque.prototype.get = function(index) {
        if (this.size === 0)
          return;
        index = this.start + index;
        if (index > this.capacity)
          index -= this.capacity;
        return this.items[index];
      };
      FixedDeque.prototype.forEach = function(callback, scope) {
        scope = arguments.length > 1 ? scope : this;
        var c = this.capacity, l = this.size, i = this.start, j = 0;
        while (j < l) {
          callback.call(scope, this.items[i], j, this);
          i++;
          j++;
          if (i === c)
            i = 0;
        }
      };
      FixedDeque.prototype.toArray = function() {
        var offset = this.start + this.size;
        if (offset < this.capacity)
          return this.items.slice(this.start, offset);
        var array = new this.ArrayClass(this.size), c = this.capacity, l = this.size, i = this.start, j = 0;
        while (j < l) {
          array[j] = this.items[i];
          i++;
          j++;
          if (i === c)
            i = 0;
        }
        return array;
      };
      FixedDeque.prototype.values = function() {
        var items = this.items, c = this.capacity, l = this.size, i = this.start, j = 0;
        return new Iterator(function() {
          if (j >= l)
            return {
              done: true
            };
          var value = items[i];
          i++;
          j++;
          if (i === c)
            i = 0;
          return {
            value,
            done: false
          };
        });
      };
      FixedDeque.prototype.entries = function() {
        var items = this.items, c = this.capacity, l = this.size, i = this.start, j = 0;
        return new Iterator(function() {
          if (j >= l)
            return {
              done: true
            };
          var value = items[i];
          i++;
          if (i === c)
            i = 0;
          return {
            value: [j++, value],
            done: false
          };
        });
      };
      if (typeof Symbol !== "undefined")
        FixedDeque.prototype[Symbol.iterator] = FixedDeque.prototype.values;
      FixedDeque.prototype.inspect = function() {
        var array = this.toArray();
        array.type = this.ArrayClass.name;
        array.capacity = this.capacity;
        Object.defineProperty(array, "constructor", {
          value: FixedDeque,
          enumerable: false
        });
        return array;
      };
      if (typeof Symbol !== "undefined")
        FixedDeque.prototype[Symbol.for("nodejs.util.inspect.custom")] = FixedDeque.prototype.inspect;
      FixedDeque.from = function(iterable, ArrayClass, capacity) {
        if (arguments.length < 3) {
          capacity = iterables.guessLength(iterable);
          if (typeof capacity !== "number")
            throw new Error("mnemonist/fixed-deque.from: could not guess iterable length. Please provide desired capacity as last argument.");
        }
        var deque = new FixedDeque(ArrayClass, capacity);
        if (iterables.isArrayLike(iterable)) {
          var i, l;
          for (i = 0, l = iterable.length; i < l; i++)
            deque.items[i] = iterable[i];
          deque.size = l;
          return deque;
        }
        iterables.forEach(iterable, function(value) {
          deque.push(value);
        });
        return deque;
      };
      module2.exports = FixedDeque;
    }
  });

  // ../boardzilla-core/node_modules/graphology-indices/bfs-queue.js
  var require_bfs_queue = __commonJS({
    "../boardzilla-core/node_modules/graphology-indices/bfs-queue.js"(exports2, module2) {
      var FixedDeque = require_fixed_deque();
      function BFSQueue(graph) {
        this.graph = graph;
        this.queue = new FixedDeque(Array, graph.order);
        this.seen = /* @__PURE__ */ new Set();
        this.size = 0;
      }
      __name(BFSQueue, "BFSQueue");
      BFSQueue.prototype.hasAlreadySeenEverything = function() {
        return this.seen.size === this.graph.order;
      };
      BFSQueue.prototype.countUnseenNodes = function() {
        return this.graph.order - this.seen.size;
      };
      BFSQueue.prototype.forEachNodeYetUnseen = function(callback) {
        var seen = this.seen;
        var graph = this.graph;
        graph.someNode(function(node, attr) {
          if (seen.size === graph.order)
            return true;
          if (seen.has(node))
            return false;
          var shouldBreak = callback(node, attr);
          if (shouldBreak)
            return true;
          return false;
        });
      };
      BFSQueue.prototype.has = function(node) {
        return this.seen.has(node);
      };
      BFSQueue.prototype.push = function(node) {
        var seenSizeBefore = this.seen.size;
        this.seen.add(node);
        if (seenSizeBefore === this.seen.size)
          return false;
        this.queue.push(node);
        this.size++;
        return true;
      };
      BFSQueue.prototype.pushWith = function(node, item) {
        var seenSizeBefore = this.seen.size;
        this.seen.add(node);
        if (seenSizeBefore === this.seen.size)
          return false;
        this.queue.push(item);
        this.size++;
        return true;
      };
      BFSQueue.prototype.shift = function() {
        var item = this.queue.shift();
        this.size = this.queue.size;
        return item;
      };
      module2.exports = BFSQueue;
    }
  });

  // ../boardzilla-core/node_modules/graphology-traversal/utils.js
  var require_utils2 = __commonJS({
    "../boardzilla-core/node_modules/graphology-traversal/utils.js"(exports2) {
      function TraversalRecord(node, attr, depth) {
        this.node = node;
        this.attributes = attr;
        this.depth = depth;
      }
      __name(TraversalRecord, "TraversalRecord");
      function capitalize(string) {
        return string[0].toUpperCase() + string.slice(1);
      }
      __name(capitalize, "capitalize");
      exports2.TraversalRecord = TraversalRecord;
      exports2.capitalize = capitalize;
    }
  });

  // ../boardzilla-core/node_modules/graphology-traversal/bfs.js
  var require_bfs = __commonJS({
    "../boardzilla-core/node_modules/graphology-traversal/bfs.js"(exports2) {
      var isGraph = require_is_graph();
      var BFSQueue = require_bfs_queue();
      var utils = require_utils2();
      var TraversalRecord = utils.TraversalRecord;
      var capitalize = utils.capitalize;
      function abstractBfs(graph, startingNode, callback, options) {
        options = options || {};
        if (!isGraph(graph))
          throw new Error(
            "graphology-traversal/bfs: expecting a graphology instance."
          );
        if (typeof callback !== "function")
          throw new Error(
            "graphology-traversal/bfs: given callback is not a function."
          );
        if (graph.order === 0)
          return;
        var queue = new BFSQueue(graph);
        var forEachNeighbor = graph["forEach" + capitalize(options.mode || "outbound") + "Neighbor"].bind(
          graph
        );
        var forEachNode;
        if (startingNode === null) {
          forEachNode = queue.forEachNodeYetUnseen.bind(queue);
        } else {
          forEachNode = /* @__PURE__ */ __name(function(fn) {
            startingNode = "" + startingNode;
            fn(startingNode, graph.getNodeAttributes(startingNode));
          }, "forEachNode");
        }
        var record, stop;
        function visit(neighbor, attr) {
          queue.pushWith(
            neighbor,
            new TraversalRecord(neighbor, attr, record.depth + 1)
          );
        }
        __name(visit, "visit");
        forEachNode(function(node, attr) {
          queue.pushWith(node, new TraversalRecord(node, attr, 0));
          while (queue.size !== 0) {
            record = queue.shift();
            stop = callback(record.node, record.attributes, record.depth);
            if (stop === true)
              continue;
            forEachNeighbor(record.node, visit);
          }
        });
      }
      __name(abstractBfs, "abstractBfs");
      exports2.bfs = function(graph, callback, options) {
        return abstractBfs(graph, null, callback, options);
      };
      exports2.bfsFromNode = abstractBfs;
    }
  });

  // ../boardzilla-core/node_modules/graphology-indices/dfs-stack.js
  var require_dfs_stack = __commonJS({
    "../boardzilla-core/node_modules/graphology-indices/dfs-stack.js"(exports2, module2) {
      function DFSStack(graph) {
        this.graph = graph;
        this.stack = new Array(graph.order);
        this.seen = /* @__PURE__ */ new Set();
        this.size = 0;
      }
      __name(DFSStack, "DFSStack");
      DFSStack.prototype.hasAlreadySeenEverything = function() {
        return this.seen.size === this.graph.order;
      };
      DFSStack.prototype.countUnseenNodes = function() {
        return this.graph.order - this.seen.size;
      };
      DFSStack.prototype.forEachNodeYetUnseen = function(callback) {
        var seen = this.seen;
        var graph = this.graph;
        graph.someNode(function(node, attr) {
          if (seen.size === graph.order)
            return true;
          if (seen.has(node))
            return false;
          var shouldBreak = callback(node, attr);
          if (shouldBreak)
            return true;
          return false;
        });
      };
      DFSStack.prototype.has = function(node) {
        return this.seen.has(node);
      };
      DFSStack.prototype.push = function(node) {
        var seenSizeBefore = this.seen.size;
        this.seen.add(node);
        if (seenSizeBefore === this.seen.size)
          return false;
        this.stack[this.size++] = node;
        return true;
      };
      DFSStack.prototype.pushWith = function(node, item) {
        var seenSizeBefore = this.seen.size;
        this.seen.add(node);
        if (seenSizeBefore === this.seen.size)
          return false;
        this.stack[this.size++] = item;
        return true;
      };
      DFSStack.prototype.pop = function() {
        if (this.size === 0)
          return;
        return this.stack[--this.size];
      };
      module2.exports = DFSStack;
    }
  });

  // ../boardzilla-core/node_modules/graphology-traversal/dfs.js
  var require_dfs = __commonJS({
    "../boardzilla-core/node_modules/graphology-traversal/dfs.js"(exports2) {
      var isGraph = require_is_graph();
      var DFSStack = require_dfs_stack();
      var utils = require_utils2();
      var TraversalRecord = utils.TraversalRecord;
      var capitalize = utils.capitalize;
      function abstractDfs(graph, startingNode, callback, options) {
        options = options || {};
        if (!isGraph(graph))
          throw new Error(
            "graphology-traversal/dfs: expecting a graphology instance."
          );
        if (typeof callback !== "function")
          throw new Error(
            "graphology-traversal/dfs: given callback is not a function."
          );
        if (graph.order === 0)
          return;
        var stack = new DFSStack(graph);
        var forEachNeighbor = graph["forEach" + capitalize(options.mode || "outbound") + "Neighbor"].bind(
          graph
        );
        var forEachNode;
        if (startingNode === null) {
          forEachNode = stack.forEachNodeYetUnseen.bind(stack);
        } else {
          forEachNode = /* @__PURE__ */ __name(function(fn) {
            startingNode = "" + startingNode;
            fn(startingNode, graph.getNodeAttributes(startingNode));
          }, "forEachNode");
        }
        var record, stop;
        function visit(neighbor, attr) {
          stack.pushWith(
            neighbor,
            new TraversalRecord(neighbor, attr, record.depth + 1)
          );
        }
        __name(visit, "visit");
        forEachNode(function(node, attr) {
          stack.pushWith(node, new TraversalRecord(node, attr, 0));
          while (stack.size !== 0) {
            record = stack.pop();
            stop = callback(record.node, record.attributes, record.depth);
            if (stop === true)
              continue;
            forEachNeighbor(record.node, visit);
          }
        });
      }
      __name(abstractDfs, "abstractDfs");
      exports2.dfs = function(graph, callback, options) {
        return abstractDfs(graph, null, callback, options);
      };
      exports2.dfsFromNode = abstractDfs;
    }
  });

  // ../boardzilla-core/node_modules/graphology-traversal/index.js
  var require_graphology_traversal = __commonJS({
    "../boardzilla-core/node_modules/graphology-traversal/index.js"(exports2) {
      var bfsModule = require_bfs();
      var dfsModule = require_dfs();
      exports2.bfs = bfsModule.bfs;
      exports2.bfsFromNode = bfsModule.bfsFromNode;
      exports2.dfs = dfsModule.dfs;
      exports2.dfsFromNode = dfsModule.dfsFromNode;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "../boardzilla-core/node_modules/lodash/_freeGlobal.js"(exports2, module2) {
      var freeGlobal2 = typeof global == "object" && global && global.Object === Object && global;
      module2.exports = freeGlobal2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_root.js
  var require_root = __commonJS({
    "../boardzilla-core/node_modules/lodash/_root.js"(exports2, module2) {
      var freeGlobal2 = require_freeGlobal();
      var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
      var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
      module2.exports = root2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "../boardzilla-core/node_modules/lodash/_Symbol.js"(exports2, module2) {
      var root2 = require_root();
      var Symbol3 = root2.Symbol;
      module2.exports = Symbol3;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getRawTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      var nativeObjectToString3 = objectProto16.toString;
      var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
      function getRawTag2(value) {
        var isOwn = hasOwnProperty13.call(value, symToStringTag3), tag = value[symToStringTag3];
        try {
          value[symToStringTag3] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString3.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag3] = tag;
          } else {
            delete value[symToStringTag3];
          }
        }
        return result;
      }
      __name(getRawTag2, "getRawTag");
      module2.exports = getRawTag2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "../boardzilla-core/node_modules/lodash/_objectToString.js"(exports2, module2) {
      var objectProto16 = Object.prototype;
      var nativeObjectToString3 = objectProto16.toString;
      function objectToString2(value) {
        return nativeObjectToString3.call(value);
      }
      __name(objectToString2, "objectToString");
      module2.exports = objectToString2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseGetTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var getRawTag2 = require_getRawTag();
      var objectToString2 = require_objectToString();
      var nullTag2 = "[object Null]";
      var undefinedTag2 = "[object Undefined]";
      var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
      function baseGetTag2(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag2 : nullTag2;
        }
        return symToStringTag3 && symToStringTag3 in Object(value) ? getRawTag2(value) : objectToString2(value);
      }
      __name(baseGetTag2, "baseGetTag");
      module2.exports = baseGetTag2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "../boardzilla-core/node_modules/lodash/isArray.js"(exports2, module2) {
      var isArray2 = Array.isArray;
      module2.exports = isArray2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "../boardzilla-core/node_modules/lodash/isObjectLike.js"(exports2, module2) {
      function isObjectLike2(value) {
        return value != null && typeof value == "object";
      }
      __name(isObjectLike2, "isObjectLike");
      module2.exports = isObjectLike2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isString.js
  var require_isString = __commonJS({
    "../boardzilla-core/node_modules/lodash/isString.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isArray2 = require_isArray();
      var isObjectLike2 = require_isObjectLike();
      var stringTag3 = "[object String]";
      function isString(value) {
        return typeof value == "string" || !isArray2(value) && isObjectLike2(value) && baseGetTag2(value) == stringTag3;
      }
      __name(isString, "isString");
      module2.exports = isString;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS({
    "../boardzilla-core/node_modules/lodash/_createBaseFor.js"(exports2, module2) {
      function createBaseFor2(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      __name(createBaseFor2, "createBaseFor");
      module2.exports = createBaseFor2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseFor.js"(exports2, module2) {
      var createBaseFor2 = require_createBaseFor();
      var baseFor2 = createBaseFor2();
      module2.exports = baseFor2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseTimes.js"(exports2, module2) {
      function baseTimes2(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      __name(baseTimes2, "baseTimes");
      module2.exports = baseTimes2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseIsArguments.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var argsTag4 = "[object Arguments]";
      function baseIsArguments2(value) {
        return isObjectLike2(value) && baseGetTag2(value) == argsTag4;
      }
      __name(baseIsArguments2, "baseIsArguments");
      module2.exports = baseIsArguments2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "../boardzilla-core/node_modules/lodash/isArguments.js"(exports2, module2) {
      var baseIsArguments2 = require_baseIsArguments();
      var isObjectLike2 = require_isObjectLike();
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      var propertyIsEnumerable3 = objectProto16.propertyIsEnumerable;
      var isArguments2 = baseIsArguments2(function() {
        return arguments;
      }()) ? baseIsArguments2 : function(value) {
        return isObjectLike2(value) && hasOwnProperty13.call(value, "callee") && !propertyIsEnumerable3.call(value, "callee");
      };
      module2.exports = isArguments2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "../boardzilla-core/node_modules/lodash/stubFalse.js"(exports2, module2) {
      function stubFalse2() {
        return false;
      }
      __name(stubFalse2, "stubFalse");
      module2.exports = stubFalse2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "../boardzilla-core/node_modules/lodash/isBuffer.js"(exports2, module2) {
      var root2 = require_root();
      var stubFalse2 = require_stubFalse();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var Buffer4 = moduleExports4 ? root2.Buffer : void 0;
      var nativeIsBuffer2 = Buffer4 ? Buffer4.isBuffer : void 0;
      var isBuffer2 = nativeIsBuffer2 || stubFalse2;
      module2.exports = isBuffer2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "../boardzilla-core/node_modules/lodash/_isIndex.js"(exports2, module2) {
      var MAX_SAFE_INTEGER3 = 9007199254740991;
      var reIsUint2 = /^(?:0|[1-9]\d*)$/;
      function isIndex2(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER3 : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint2.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      __name(isIndex2, "isIndex");
      module2.exports = isIndex2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "../boardzilla-core/node_modules/lodash/isLength.js"(exports2, module2) {
      var MAX_SAFE_INTEGER3 = 9007199254740991;
      function isLength2(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER3;
      }
      __name(isLength2, "isLength");
      module2.exports = isLength2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseIsTypedArray.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isLength2 = require_isLength();
      var isObjectLike2 = require_isObjectLike();
      var argsTag4 = "[object Arguments]";
      var arrayTag3 = "[object Array]";
      var boolTag3 = "[object Boolean]";
      var dateTag3 = "[object Date]";
      var errorTag3 = "[object Error]";
      var funcTag3 = "[object Function]";
      var mapTag4 = "[object Map]";
      var numberTag3 = "[object Number]";
      var objectTag5 = "[object Object]";
      var regexpTag3 = "[object RegExp]";
      var setTag4 = "[object Set]";
      var stringTag3 = "[object String]";
      var weakMapTag3 = "[object WeakMap]";
      var arrayBufferTag3 = "[object ArrayBuffer]";
      var dataViewTag4 = "[object DataView]";
      var float32Tag2 = "[object Float32Array]";
      var float64Tag2 = "[object Float64Array]";
      var int8Tag2 = "[object Int8Array]";
      var int16Tag2 = "[object Int16Array]";
      var int32Tag2 = "[object Int32Array]";
      var uint8Tag2 = "[object Uint8Array]";
      var uint8ClampedTag2 = "[object Uint8ClampedArray]";
      var uint16Tag2 = "[object Uint16Array]";
      var uint32Tag2 = "[object Uint32Array]";
      var typedArrayTags2 = {};
      typedArrayTags2[float32Tag2] = typedArrayTags2[float64Tag2] = typedArrayTags2[int8Tag2] = typedArrayTags2[int16Tag2] = typedArrayTags2[int32Tag2] = typedArrayTags2[uint8Tag2] = typedArrayTags2[uint8ClampedTag2] = typedArrayTags2[uint16Tag2] = typedArrayTags2[uint32Tag2] = true;
      typedArrayTags2[argsTag4] = typedArrayTags2[arrayTag3] = typedArrayTags2[arrayBufferTag3] = typedArrayTags2[boolTag3] = typedArrayTags2[dataViewTag4] = typedArrayTags2[dateTag3] = typedArrayTags2[errorTag3] = typedArrayTags2[funcTag3] = typedArrayTags2[mapTag4] = typedArrayTags2[numberTag3] = typedArrayTags2[objectTag5] = typedArrayTags2[regexpTag3] = typedArrayTags2[setTag4] = typedArrayTags2[stringTag3] = typedArrayTags2[weakMapTag3] = false;
      function baseIsTypedArray2(value) {
        return isObjectLike2(value) && isLength2(value.length) && !!typedArrayTags2[baseGetTag2(value)];
      }
      __name(baseIsTypedArray2, "baseIsTypedArray");
      module2.exports = baseIsTypedArray2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseUnary.js"(exports2, module2) {
      function baseUnary2(func) {
        return function(value) {
          return func(value);
        };
      }
      __name(baseUnary2, "baseUnary");
      module2.exports = baseUnary2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "../boardzilla-core/node_modules/lodash/_nodeUtil.js"(exports2, module2) {
      var freeGlobal2 = require_freeGlobal();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var freeProcess2 = moduleExports4 && freeGlobal2.process;
      var nodeUtil2 = function() {
        try {
          var types = freeModule4 && freeModule4.require && freeModule4.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
        } catch (e) {
        }
      }();
      module2.exports = nodeUtil2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "../boardzilla-core/node_modules/lodash/isTypedArray.js"(exports2, module2) {
      var baseIsTypedArray2 = require_baseIsTypedArray();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsTypedArray2 = nodeUtil2 && nodeUtil2.isTypedArray;
      var isTypedArray2 = nodeIsTypedArray2 ? baseUnary2(nodeIsTypedArray2) : baseIsTypedArray2;
      module2.exports = isTypedArray2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "../boardzilla-core/node_modules/lodash/_arrayLikeKeys.js"(exports2, module2) {
      var baseTimes2 = require_baseTimes();
      var isArguments2 = require_isArguments();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isIndex2 = require_isIndex();
      var isTypedArray2 = require_isTypedArray();
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      function arrayLikeKeys2(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes2(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty13.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex2(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      __name(arrayLikeKeys2, "arrayLikeKeys");
      module2.exports = arrayLikeKeys2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "../boardzilla-core/node_modules/lodash/_isPrototype.js"(exports2, module2) {
      var objectProto16 = Object.prototype;
      function isPrototype2(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto16;
        return value === proto;
      }
      __name(isPrototype2, "isPrototype");
      module2.exports = isPrototype2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "../boardzilla-core/node_modules/lodash/_overArg.js"(exports2, module2) {
      function overArg2(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      __name(overArg2, "overArg");
      module2.exports = overArg2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "../boardzilla-core/node_modules/lodash/_nativeKeys.js"(exports2, module2) {
      var overArg2 = require_overArg();
      var nativeKeys2 = overArg2(Object.keys, Object);
      module2.exports = nativeKeys2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseKeys.js"(exports2, module2) {
      var isPrototype2 = require_isPrototype();
      var nativeKeys2 = require_nativeKeys();
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      function baseKeys2(object) {
        if (!isPrototype2(object)) {
          return nativeKeys2(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty13.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      __name(baseKeys2, "baseKeys");
      module2.exports = baseKeys2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "../boardzilla-core/node_modules/lodash/isObject.js"(exports2, module2) {
      function isObject2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      __name(isObject2, "isObject");
      module2.exports = isObject2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "../boardzilla-core/node_modules/lodash/isFunction.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObject2 = require_isObject();
      var asyncTag2 = "[object AsyncFunction]";
      var funcTag3 = "[object Function]";
      var genTag2 = "[object GeneratorFunction]";
      var proxyTag2 = "[object Proxy]";
      function isFunction2(value) {
        if (!isObject2(value)) {
          return false;
        }
        var tag = baseGetTag2(value);
        return tag == funcTag3 || tag == genTag2 || tag == asyncTag2 || tag == proxyTag2;
      }
      __name(isFunction2, "isFunction");
      module2.exports = isFunction2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "../boardzilla-core/node_modules/lodash/isArrayLike.js"(exports2, module2) {
      var isFunction2 = require_isFunction();
      var isLength2 = require_isLength();
      function isArrayLike2(value) {
        return value != null && isLength2(value.length) && !isFunction2(value);
      }
      __name(isArrayLike2, "isArrayLike");
      module2.exports = isArrayLike2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "../boardzilla-core/node_modules/lodash/keys.js"(exports2, module2) {
      var arrayLikeKeys2 = require_arrayLikeKeys();
      var baseKeys2 = require_baseKeys();
      var isArrayLike2 = require_isArrayLike();
      function keys2(object) {
        return isArrayLike2(object) ? arrayLikeKeys2(object) : baseKeys2(object);
      }
      __name(keys2, "keys");
      module2.exports = keys2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseForOwn.js
  var require_baseForOwn = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseForOwn.js"(exports2, module2) {
      var baseFor2 = require_baseFor();
      var keys2 = require_keys();
      function baseForOwn2(object, iteratee) {
        return object && baseFor2(object, iteratee, keys2);
      }
      __name(baseForOwn2, "baseForOwn");
      module2.exports = baseForOwn2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "../boardzilla-core/node_modules/lodash/identity.js"(exports2, module2) {
      function identity2(value) {
        return value;
      }
      __name(identity2, "identity");
      module2.exports = identity2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_castFunction.js
  var require_castFunction = __commonJS({
    "../boardzilla-core/node_modules/lodash/_castFunction.js"(exports2, module2) {
      var identity2 = require_identity();
      function castFunction2(value) {
        return typeof value == "function" ? value : identity2;
      }
      __name(castFunction2, "castFunction");
      module2.exports = castFunction2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/forOwn.js
  var require_forOwn = __commonJS({
    "../boardzilla-core/node_modules/lodash/forOwn.js"(exports2, module2) {
      var baseForOwn2 = require_baseForOwn();
      var castFunction2 = require_castFunction();
      function forOwn(object, iteratee) {
        return object && baseForOwn2(object, castFunction2(iteratee));
      }
      __name(forOwn, "forOwn");
      module2.exports = forOwn;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getPrototype.js
  var require_getPrototype = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getPrototype.js"(exports2, module2) {
      var overArg2 = require_overArg();
      var getPrototype2 = overArg2(Object.getPrototypeOf, Object);
      module2.exports = getPrototype2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isPlainObject.js
  var require_isPlainObject = __commonJS({
    "../boardzilla-core/node_modules/lodash/isPlainObject.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var getPrototype2 = require_getPrototype();
      var isObjectLike2 = require_isObjectLike();
      var objectTag5 = "[object Object]";
      var funcProto4 = Function.prototype;
      var objectProto16 = Object.prototype;
      var funcToString4 = funcProto4.toString;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      var objectCtorString2 = funcToString4.call(Object);
      function isPlainObject2(value) {
        if (!isObjectLike2(value) || baseGetTag2(value) != objectTag5) {
          return false;
        }
        var proto = getPrototype2(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty13.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString4.call(Ctor) == objectCtorString2;
      }
      __name(isPlainObject2, "isPlainObject");
      module2.exports = isPlainObject2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "../boardzilla-core/node_modules/lodash/_arrayMap.js"(exports2, module2) {
      function arrayMap2(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      __name(arrayMap2, "arrayMap");
      module2.exports = arrayMap2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "../boardzilla-core/node_modules/lodash/_listCacheClear.js"(exports2, module2) {
      function listCacheClear2() {
        this.__data__ = [];
        this.size = 0;
      }
      __name(listCacheClear2, "listCacheClear");
      module2.exports = listCacheClear2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "../boardzilla-core/node_modules/lodash/eq.js"(exports2, module2) {
      function eq2(value, other) {
        return value === other || value !== value && other !== other;
      }
      __name(eq2, "eq");
      module2.exports = eq2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "../boardzilla-core/node_modules/lodash/_assocIndexOf.js"(exports2, module2) {
      var eq2 = require_eq();
      function assocIndexOf2(array, key) {
        var length = array.length;
        while (length--) {
          if (eq2(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      __name(assocIndexOf2, "assocIndexOf");
      module2.exports = assocIndexOf2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "../boardzilla-core/node_modules/lodash/_listCacheDelete.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      var arrayProto2 = Array.prototype;
      var splice2 = arrayProto2.splice;
      function listCacheDelete2(key) {
        var data = this.__data__, index = assocIndexOf2(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice2.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      __name(listCacheDelete2, "listCacheDelete");
      module2.exports = listCacheDelete2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "../boardzilla-core/node_modules/lodash/_listCacheGet.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheGet2(key) {
        var data = this.__data__, index = assocIndexOf2(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      __name(listCacheGet2, "listCacheGet");
      module2.exports = listCacheGet2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "../boardzilla-core/node_modules/lodash/_listCacheHas.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheHas2(key) {
        return assocIndexOf2(this.__data__, key) > -1;
      }
      __name(listCacheHas2, "listCacheHas");
      module2.exports = listCacheHas2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "../boardzilla-core/node_modules/lodash/_listCacheSet.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheSet2(key, value) {
        var data = this.__data__, index = assocIndexOf2(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      __name(listCacheSet2, "listCacheSet");
      module2.exports = listCacheSet2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "../boardzilla-core/node_modules/lodash/_ListCache.js"(exports2, module2) {
      var listCacheClear2 = require_listCacheClear();
      var listCacheDelete2 = require_listCacheDelete();
      var listCacheGet2 = require_listCacheGet();
      var listCacheHas2 = require_listCacheHas();
      var listCacheSet2 = require_listCacheSet();
      function ListCache2(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      __name(ListCache2, "ListCache");
      ListCache2.prototype.clear = listCacheClear2;
      ListCache2.prototype["delete"] = listCacheDelete2;
      ListCache2.prototype.get = listCacheGet2;
      ListCache2.prototype.has = listCacheHas2;
      ListCache2.prototype.set = listCacheSet2;
      module2.exports = ListCache2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "../boardzilla-core/node_modules/lodash/_stackClear.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      function stackClear2() {
        this.__data__ = new ListCache2();
        this.size = 0;
      }
      __name(stackClear2, "stackClear");
      module2.exports = stackClear2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "../boardzilla-core/node_modules/lodash/_stackDelete.js"(exports2, module2) {
      function stackDelete2(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      __name(stackDelete2, "stackDelete");
      module2.exports = stackDelete2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "../boardzilla-core/node_modules/lodash/_stackGet.js"(exports2, module2) {
      function stackGet2(key) {
        return this.__data__.get(key);
      }
      __name(stackGet2, "stackGet");
      module2.exports = stackGet2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "../boardzilla-core/node_modules/lodash/_stackHas.js"(exports2, module2) {
      function stackHas2(key) {
        return this.__data__.has(key);
      }
      __name(stackHas2, "stackHas");
      module2.exports = stackHas2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "../boardzilla-core/node_modules/lodash/_coreJsData.js"(exports2, module2) {
      var root2 = require_root();
      var coreJsData2 = root2["__core-js_shared__"];
      module2.exports = coreJsData2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "../boardzilla-core/node_modules/lodash/_isMasked.js"(exports2, module2) {
      var coreJsData2 = require_coreJsData();
      var maskSrcKey2 = function() {
        var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked2(func) {
        return !!maskSrcKey2 && maskSrcKey2 in func;
      }
      __name(isMasked2, "isMasked");
      module2.exports = isMasked2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "../boardzilla-core/node_modules/lodash/_toSource.js"(exports2, module2) {
      var funcProto4 = Function.prototype;
      var funcToString4 = funcProto4.toString;
      function toSource2(func) {
        if (func != null) {
          try {
            return funcToString4.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      __name(toSource2, "toSource");
      module2.exports = toSource2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseIsNative.js"(exports2, module2) {
      var isFunction2 = require_isFunction();
      var isMasked2 = require_isMasked();
      var isObject2 = require_isObject();
      var toSource2 = require_toSource();
      var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
      var funcProto4 = Function.prototype;
      var objectProto16 = Object.prototype;
      var funcToString4 = funcProto4.toString;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      var reIsNative2 = RegExp(
        "^" + funcToString4.call(hasOwnProperty13).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative2(value) {
        if (!isObject2(value) || isMasked2(value)) {
          return false;
        }
        var pattern = isFunction2(value) ? reIsNative2 : reIsHostCtor2;
        return pattern.test(toSource2(value));
      }
      __name(baseIsNative2, "baseIsNative");
      module2.exports = baseIsNative2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getValue.js"(exports2, module2) {
      function getValue2(object, key) {
        return object == null ? void 0 : object[key];
      }
      __name(getValue2, "getValue");
      module2.exports = getValue2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getNative.js"(exports2, module2) {
      var baseIsNative2 = require_baseIsNative();
      var getValue2 = require_getValue();
      function getNative2(object, key) {
        var value = getValue2(object, key);
        return baseIsNative2(value) ? value : void 0;
      }
      __name(getNative2, "getNative");
      module2.exports = getNative2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "../boardzilla-core/node_modules/lodash/_Map.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var Map3 = getNative2(root2, "Map");
      module2.exports = Map3;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "../boardzilla-core/node_modules/lodash/_nativeCreate.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var nativeCreate2 = getNative2(Object, "create");
      module2.exports = nativeCreate2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "../boardzilla-core/node_modules/lodash/_hashClear.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      function hashClear2() {
        this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
        this.size = 0;
      }
      __name(hashClear2, "hashClear");
      module2.exports = hashClear2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "../boardzilla-core/node_modules/lodash/_hashDelete.js"(exports2, module2) {
      function hashDelete2(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      __name(hashDelete2, "hashDelete");
      module2.exports = hashDelete2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "../boardzilla-core/node_modules/lodash/_hashGet.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      function hashGet2(key) {
        var data = this.__data__;
        if (nativeCreate2) {
          var result = data[key];
          return result === HASH_UNDEFINED4 ? void 0 : result;
        }
        return hasOwnProperty13.call(data, key) ? data[key] : void 0;
      }
      __name(hashGet2, "hashGet");
      module2.exports = hashGet2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "../boardzilla-core/node_modules/lodash/_hashHas.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      function hashHas2(key) {
        var data = this.__data__;
        return nativeCreate2 ? data[key] !== void 0 : hasOwnProperty13.call(data, key);
      }
      __name(hashHas2, "hashHas");
      module2.exports = hashHas2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "../boardzilla-core/node_modules/lodash/_hashSet.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      function hashSet2(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate2 && value === void 0 ? HASH_UNDEFINED4 : value;
        return this;
      }
      __name(hashSet2, "hashSet");
      module2.exports = hashSet2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "../boardzilla-core/node_modules/lodash/_Hash.js"(exports2, module2) {
      var hashClear2 = require_hashClear();
      var hashDelete2 = require_hashDelete();
      var hashGet2 = require_hashGet();
      var hashHas2 = require_hashHas();
      var hashSet2 = require_hashSet();
      function Hash2(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      __name(Hash2, "Hash");
      Hash2.prototype.clear = hashClear2;
      Hash2.prototype["delete"] = hashDelete2;
      Hash2.prototype.get = hashGet2;
      Hash2.prototype.has = hashHas2;
      Hash2.prototype.set = hashSet2;
      module2.exports = Hash2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "../boardzilla-core/node_modules/lodash/_mapCacheClear.js"(exports2, module2) {
      var Hash2 = require_Hash();
      var ListCache2 = require_ListCache();
      var Map3 = require_Map();
      function mapCacheClear2() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash2(),
          "map": new (Map3 || ListCache2)(),
          "string": new Hash2()
        };
      }
      __name(mapCacheClear2, "mapCacheClear");
      module2.exports = mapCacheClear2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "../boardzilla-core/node_modules/lodash/_isKeyable.js"(exports2, module2) {
      function isKeyable2(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      __name(isKeyable2, "isKeyable");
      module2.exports = isKeyable2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getMapData.js"(exports2, module2) {
      var isKeyable2 = require_isKeyable();
      function getMapData2(map2, key) {
        var data = map2.__data__;
        return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      __name(getMapData2, "getMapData");
      module2.exports = getMapData2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "../boardzilla-core/node_modules/lodash/_mapCacheDelete.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheDelete2(key) {
        var result = getMapData2(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      __name(mapCacheDelete2, "mapCacheDelete");
      module2.exports = mapCacheDelete2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "../boardzilla-core/node_modules/lodash/_mapCacheGet.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheGet2(key) {
        return getMapData2(this, key).get(key);
      }
      __name(mapCacheGet2, "mapCacheGet");
      module2.exports = mapCacheGet2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "../boardzilla-core/node_modules/lodash/_mapCacheHas.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheHas2(key) {
        return getMapData2(this, key).has(key);
      }
      __name(mapCacheHas2, "mapCacheHas");
      module2.exports = mapCacheHas2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "../boardzilla-core/node_modules/lodash/_mapCacheSet.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheSet2(key, value) {
        var data = getMapData2(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      __name(mapCacheSet2, "mapCacheSet");
      module2.exports = mapCacheSet2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "../boardzilla-core/node_modules/lodash/_MapCache.js"(exports2, module2) {
      var mapCacheClear2 = require_mapCacheClear();
      var mapCacheDelete2 = require_mapCacheDelete();
      var mapCacheGet2 = require_mapCacheGet();
      var mapCacheHas2 = require_mapCacheHas();
      var mapCacheSet2 = require_mapCacheSet();
      function MapCache2(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      __name(MapCache2, "MapCache");
      MapCache2.prototype.clear = mapCacheClear2;
      MapCache2.prototype["delete"] = mapCacheDelete2;
      MapCache2.prototype.get = mapCacheGet2;
      MapCache2.prototype.has = mapCacheHas2;
      MapCache2.prototype.set = mapCacheSet2;
      module2.exports = MapCache2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "../boardzilla-core/node_modules/lodash/_stackSet.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      var Map3 = require_Map();
      var MapCache2 = require_MapCache();
      var LARGE_ARRAY_SIZE2 = 200;
      function stackSet2(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache2) {
          var pairs = data.__data__;
          if (!Map3 || pairs.length < LARGE_ARRAY_SIZE2 - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache2(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      __name(stackSet2, "stackSet");
      module2.exports = stackSet2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "../boardzilla-core/node_modules/lodash/_Stack.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      var stackClear2 = require_stackClear();
      var stackDelete2 = require_stackDelete();
      var stackGet2 = require_stackGet();
      var stackHas2 = require_stackHas();
      var stackSet2 = require_stackSet();
      function Stack2(entries) {
        var data = this.__data__ = new ListCache2(entries);
        this.size = data.size;
      }
      __name(Stack2, "Stack");
      Stack2.prototype.clear = stackClear2;
      Stack2.prototype["delete"] = stackDelete2;
      Stack2.prototype.get = stackGet2;
      Stack2.prototype.has = stackHas2;
      Stack2.prototype.set = stackSet2;
      module2.exports = Stack2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "../boardzilla-core/node_modules/lodash/_setCacheAdd.js"(exports2, module2) {
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      function setCacheAdd2(value) {
        this.__data__.set(value, HASH_UNDEFINED4);
        return this;
      }
      __name(setCacheAdd2, "setCacheAdd");
      module2.exports = setCacheAdd2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "../boardzilla-core/node_modules/lodash/_setCacheHas.js"(exports2, module2) {
      function setCacheHas2(value) {
        return this.__data__.has(value);
      }
      __name(setCacheHas2, "setCacheHas");
      module2.exports = setCacheHas2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "../boardzilla-core/node_modules/lodash/_SetCache.js"(exports2, module2) {
      var MapCache2 = require_MapCache();
      var setCacheAdd2 = require_setCacheAdd();
      var setCacheHas2 = require_setCacheHas();
      function SetCache2(values) {
        var index = -1, length = values == null ? 0 : values.length;
        this.__data__ = new MapCache2();
        while (++index < length) {
          this.add(values[index]);
        }
      }
      __name(SetCache2, "SetCache");
      SetCache2.prototype.add = SetCache2.prototype.push = setCacheAdd2;
      SetCache2.prototype.has = setCacheHas2;
      module2.exports = SetCache2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "../boardzilla-core/node_modules/lodash/_arraySome.js"(exports2, module2) {
      function arraySome2(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      __name(arraySome2, "arraySome");
      module2.exports = arraySome2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "../boardzilla-core/node_modules/lodash/_cacheHas.js"(exports2, module2) {
      function cacheHas2(cache, key) {
        return cache.has(key);
      }
      __name(cacheHas2, "cacheHas");
      module2.exports = cacheHas2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "../boardzilla-core/node_modules/lodash/_equalArrays.js"(exports2, module2) {
      var SetCache2 = require_SetCache();
      var arraySome2 = require_arraySome();
      var cacheHas2 = require_cacheHas();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      function equalArrays2(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG7, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG5 ? new SetCache2() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome2(other, function(othValue2, othIndex) {
              if (!cacheHas2(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      __name(equalArrays2, "equalArrays");
      module2.exports = equalArrays2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "../boardzilla-core/node_modules/lodash/_Uint8Array.js"(exports2, module2) {
      var root2 = require_root();
      var Uint8Array3 = root2.Uint8Array;
      module2.exports = Uint8Array3;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "../boardzilla-core/node_modules/lodash/_mapToArray.js"(exports2, module2) {
      function mapToArray2(map2) {
        var index = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      __name(mapToArray2, "mapToArray");
      module2.exports = mapToArray2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "../boardzilla-core/node_modules/lodash/_setToArray.js"(exports2, module2) {
      function setToArray2(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      __name(setToArray2, "setToArray");
      module2.exports = setToArray2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "../boardzilla-core/node_modules/lodash/_equalByTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var Uint8Array3 = require_Uint8Array();
      var eq2 = require_eq();
      var equalArrays2 = require_equalArrays();
      var mapToArray2 = require_mapToArray();
      var setToArray2 = require_setToArray();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      var boolTag3 = "[object Boolean]";
      var dateTag3 = "[object Date]";
      var errorTag3 = "[object Error]";
      var mapTag4 = "[object Map]";
      var numberTag3 = "[object Number]";
      var regexpTag3 = "[object RegExp]";
      var setTag4 = "[object Set]";
      var stringTag3 = "[object String]";
      var symbolTag3 = "[object Symbol]";
      var arrayBufferTag3 = "[object ArrayBuffer]";
      var dataViewTag4 = "[object DataView]";
      var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
      function equalByTag2(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag4:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag3:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array3(object), new Uint8Array3(other))) {
              return false;
            }
            return true;
          case boolTag3:
          case dateTag3:
          case numberTag3:
            return eq2(+object, +other);
          case errorTag3:
            return object.name == other.name && object.message == other.message;
          case regexpTag3:
          case stringTag3:
            return object == other + "";
          case mapTag4:
            var convert = mapToArray2;
          case setTag4:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG7;
            convert || (convert = setToArray2);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG5;
            stack.set(object, other);
            var result = equalArrays2(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag3:
            if (symbolValueOf2) {
              return symbolValueOf2.call(object) == symbolValueOf2.call(other);
            }
        }
        return false;
      }
      __name(equalByTag2, "equalByTag");
      module2.exports = equalByTag2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "../boardzilla-core/node_modules/lodash/_arrayPush.js"(exports2, module2) {
      function arrayPush2(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      __name(arrayPush2, "arrayPush");
      module2.exports = arrayPush2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseGetAllKeys.js"(exports2, module2) {
      var arrayPush2 = require_arrayPush();
      var isArray2 = require_isArray();
      function baseGetAllKeys2(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray2(object) ? result : arrayPush2(result, symbolsFunc(object));
      }
      __name(baseGetAllKeys2, "baseGetAllKeys");
      module2.exports = baseGetAllKeys2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "../boardzilla-core/node_modules/lodash/_arrayFilter.js"(exports2, module2) {
      function arrayFilter2(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      __name(arrayFilter2, "arrayFilter");
      module2.exports = arrayFilter2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "../boardzilla-core/node_modules/lodash/stubArray.js"(exports2, module2) {
      function stubArray2() {
        return [];
      }
      __name(stubArray2, "stubArray");
      module2.exports = stubArray2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getSymbols.js"(exports2, module2) {
      var arrayFilter2 = require_arrayFilter();
      var stubArray2 = require_stubArray();
      var objectProto16 = Object.prototype;
      var propertyIsEnumerable3 = objectProto16.propertyIsEnumerable;
      var nativeGetSymbols2 = Object.getOwnPropertySymbols;
      var getSymbols2 = !nativeGetSymbols2 ? stubArray2 : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter2(nativeGetSymbols2(object), function(symbol) {
          return propertyIsEnumerable3.call(object, symbol);
        });
      };
      module2.exports = getSymbols2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getAllKeys.js"(exports2, module2) {
      var baseGetAllKeys2 = require_baseGetAllKeys();
      var getSymbols2 = require_getSymbols();
      var keys2 = require_keys();
      function getAllKeys2(object) {
        return baseGetAllKeys2(object, keys2, getSymbols2);
      }
      __name(getAllKeys2, "getAllKeys");
      module2.exports = getAllKeys2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "../boardzilla-core/node_modules/lodash/_equalObjects.js"(exports2, module2) {
      var getAllKeys2 = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      function equalObjects2(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG7, objProps = getAllKeys2(object), objLength = objProps.length, othProps = getAllKeys2(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty13.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      __name(equalObjects2, "equalObjects");
      module2.exports = equalObjects2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "../boardzilla-core/node_modules/lodash/_DataView.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var DataView2 = getNative2(root2, "DataView");
      module2.exports = DataView2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "../boardzilla-core/node_modules/lodash/_Promise.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var Promise3 = getNative2(root2, "Promise");
      module2.exports = Promise3;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "../boardzilla-core/node_modules/lodash/_Set.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var Set3 = getNative2(root2, "Set");
      module2.exports = Set3;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "../boardzilla-core/node_modules/lodash/_WeakMap.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var WeakMap3 = getNative2(root2, "WeakMap");
      module2.exports = WeakMap3;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getTag.js"(exports2, module2) {
      var DataView2 = require_DataView();
      var Map3 = require_Map();
      var Promise3 = require_Promise();
      var Set3 = require_Set();
      var WeakMap3 = require_WeakMap();
      var baseGetTag2 = require_baseGetTag();
      var toSource2 = require_toSource();
      var mapTag4 = "[object Map]";
      var objectTag5 = "[object Object]";
      var promiseTag2 = "[object Promise]";
      var setTag4 = "[object Set]";
      var weakMapTag3 = "[object WeakMap]";
      var dataViewTag4 = "[object DataView]";
      var dataViewCtorString2 = toSource2(DataView2);
      var mapCtorString2 = toSource2(Map3);
      var promiseCtorString2 = toSource2(Promise3);
      var setCtorString2 = toSource2(Set3);
      var weakMapCtorString2 = toSource2(WeakMap3);
      var getTag2 = baseGetTag2;
      if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag4 || Map3 && getTag2(new Map3()) != mapTag4 || Promise3 && getTag2(Promise3.resolve()) != promiseTag2 || Set3 && getTag2(new Set3()) != setTag4 || WeakMap3 && getTag2(new WeakMap3()) != weakMapTag3) {
        getTag2 = /* @__PURE__ */ __name(function(value) {
          var result = baseGetTag2(value), Ctor = result == objectTag5 ? value.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString2:
                return dataViewTag4;
              case mapCtorString2:
                return mapTag4;
              case promiseCtorString2:
                return promiseTag2;
              case setCtorString2:
                return setTag4;
              case weakMapCtorString2:
                return weakMapTag3;
            }
          }
          return result;
        }, "getTag");
      }
      module2.exports = getTag2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseIsEqualDeep.js"(exports2, module2) {
      var Stack2 = require_Stack();
      var equalArrays2 = require_equalArrays();
      var equalByTag2 = require_equalByTag();
      var equalObjects2 = require_equalObjects();
      var getTag2 = require_getTag();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isTypedArray2 = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var argsTag4 = "[object Arguments]";
      var arrayTag3 = "[object Array]";
      var objectTag5 = "[object Object]";
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      function baseIsEqualDeep2(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag3 : getTag2(object), othTag = othIsArr ? arrayTag3 : getTag2(other);
        objTag = objTag == argsTag4 ? objectTag5 : objTag;
        othTag = othTag == argsTag4 ? objectTag5 : othTag;
        var objIsObj = objTag == objectTag5, othIsObj = othTag == objectTag5, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer2(object)) {
          if (!isBuffer2(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack2());
          return objIsArr || isTypedArray2(object) ? equalArrays2(object, other, bitmask, customizer, equalFunc, stack) : equalByTag2(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG7)) {
          var objIsWrapped = objIsObj && hasOwnProperty13.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty13.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack2());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack2());
        return equalObjects2(object, other, bitmask, customizer, equalFunc, stack);
      }
      __name(baseIsEqualDeep2, "baseIsEqualDeep");
      module2.exports = baseIsEqualDeep2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseIsEqual.js"(exports2, module2) {
      var baseIsEqualDeep2 = require_baseIsEqualDeep();
      var isObjectLike2 = require_isObjectLike();
      function baseIsEqual2(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep2(value, other, bitmask, customizer, baseIsEqual2, stack);
      }
      __name(baseIsEqual2, "baseIsEqual");
      module2.exports = baseIsEqual2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseIsMatch.js"(exports2, module2) {
      var Stack2 = require_Stack();
      var baseIsEqual2 = require_baseIsEqual();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      function baseIsMatch2(object, source, matchData, customizer) {
        var index = matchData.length, length = index, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack2();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG7 | COMPARE_UNORDERED_FLAG5, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      __name(baseIsMatch2, "baseIsMatch");
      module2.exports = baseIsMatch2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS({
    "../boardzilla-core/node_modules/lodash/_isStrictComparable.js"(exports2, module2) {
      var isObject2 = require_isObject();
      function isStrictComparable2(value) {
        return value === value && !isObject2(value);
      }
      __name(isStrictComparable2, "isStrictComparable");
      module2.exports = isStrictComparable2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getMatchData.js"(exports2, module2) {
      var isStrictComparable2 = require_isStrictComparable();
      var keys2 = require_keys();
      function getMatchData2(object) {
        var result = keys2(object), length = result.length;
        while (length--) {
          var key = result[length], value = object[key];
          result[length] = [key, value, isStrictComparable2(value)];
        }
        return result;
      }
      __name(getMatchData2, "getMatchData");
      module2.exports = getMatchData2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS({
    "../boardzilla-core/node_modules/lodash/_matchesStrictComparable.js"(exports2, module2) {
      function matchesStrictComparable2(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      __name(matchesStrictComparable2, "matchesStrictComparable");
      module2.exports = matchesStrictComparable2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseMatches.js"(exports2, module2) {
      var baseIsMatch2 = require_baseIsMatch();
      var getMatchData2 = require_getMatchData();
      var matchesStrictComparable2 = require_matchesStrictComparable();
      function baseMatches2(source) {
        var matchData = getMatchData2(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable2(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch2(object, source, matchData);
        };
      }
      __name(baseMatches2, "baseMatches");
      module2.exports = baseMatches2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "../boardzilla-core/node_modules/lodash/isSymbol.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var symbolTag3 = "[object Symbol]";
      function isSymbol2(value) {
        return typeof value == "symbol" || isObjectLike2(value) && baseGetTag2(value) == symbolTag3;
      }
      __name(isSymbol2, "isSymbol");
      module2.exports = isSymbol2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_isKey.js
  var require_isKey = __commonJS({
    "../boardzilla-core/node_modules/lodash/_isKey.js"(exports2, module2) {
      var isArray2 = require_isArray();
      var isSymbol2 = require_isSymbol();
      var reIsDeepProp2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp2 = /^\w*$/;
      function isKey2(value, object) {
        if (isArray2(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol2(value)) {
          return true;
        }
        return reIsPlainProp2.test(value) || !reIsDeepProp2.test(value) || object != null && value in Object(object);
      }
      __name(isKey2, "isKey");
      module2.exports = isKey2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/memoize.js
  var require_memoize = __commonJS({
    "../boardzilla-core/node_modules/lodash/memoize.js"(exports2, module2) {
      var MapCache2 = require_MapCache();
      var FUNC_ERROR_TEXT4 = "Expected a function";
      function memoize2(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT4);
        }
        var memoized = /* @__PURE__ */ __name(function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        }, "memoized");
        memoized.cache = new (memoize2.Cache || MapCache2)();
        return memoized;
      }
      __name(memoize2, "memoize");
      memoize2.Cache = MapCache2;
      module2.exports = memoize2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS({
    "../boardzilla-core/node_modules/lodash/_memoizeCapped.js"(exports2, module2) {
      var memoize2 = require_memoize();
      var MAX_MEMOIZE_SIZE2 = 500;
      function memoizeCapped2(func) {
        var result = memoize2(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE2) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      __name(memoizeCapped2, "memoizeCapped");
      module2.exports = memoizeCapped2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS({
    "../boardzilla-core/node_modules/lodash/_stringToPath.js"(exports2, module2) {
      var memoizeCapped2 = require_memoizeCapped();
      var rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar2 = /\\(\\)?/g;
      var stringToPath2 = memoizeCapped2(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46) {
          result.push("");
        }
        string.replace(rePropName2, function(match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar2, "$1") : number || match);
        });
        return result;
      });
      module2.exports = stringToPath2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseToString.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var arrayMap2 = require_arrayMap();
      var isArray2 = require_isArray();
      var isSymbol2 = require_isSymbol();
      var INFINITY3 = 1 / 0;
      var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolToString2 = symbolProto3 ? symbolProto3.toString : void 0;
      function baseToString2(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap2(value, baseToString2) + "";
        }
        if (isSymbol2(value)) {
          return symbolToString2 ? symbolToString2.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
      }
      __name(baseToString2, "baseToString");
      module2.exports = baseToString2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "../boardzilla-core/node_modules/lodash/toString.js"(exports2, module2) {
      var baseToString2 = require_baseToString();
      function toString3(value) {
        return value == null ? "" : baseToString2(value);
      }
      __name(toString3, "toString");
      module2.exports = toString3;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_castPath.js
  var require_castPath = __commonJS({
    "../boardzilla-core/node_modules/lodash/_castPath.js"(exports2, module2) {
      var isArray2 = require_isArray();
      var isKey2 = require_isKey();
      var stringToPath2 = require_stringToPath();
      var toString3 = require_toString();
      function castPath2(value, object) {
        if (isArray2(value)) {
          return value;
        }
        return isKey2(value, object) ? [value] : stringToPath2(toString3(value));
      }
      __name(castPath2, "castPath");
      module2.exports = castPath2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_toKey.js
  var require_toKey = __commonJS({
    "../boardzilla-core/node_modules/lodash/_toKey.js"(exports2, module2) {
      var isSymbol2 = require_isSymbol();
      var INFINITY3 = 1 / 0;
      function toKey2(value) {
        if (typeof value == "string" || isSymbol2(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
      }
      __name(toKey2, "toKey");
      module2.exports = toKey2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseGet.js"(exports2, module2) {
      var castPath2 = require_castPath();
      var toKey2 = require_toKey();
      function baseGet2(object, path) {
        path = castPath2(path, object);
        var index = 0, length = path.length;
        while (object != null && index < length) {
          object = object[toKey2(path[index++])];
        }
        return index && index == length ? object : void 0;
      }
      __name(baseGet2, "baseGet");
      module2.exports = baseGet2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/get.js
  var require_get = __commonJS({
    "../boardzilla-core/node_modules/lodash/get.js"(exports2, module2) {
      var baseGet2 = require_baseGet();
      function get4(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet2(object, path);
        return result === void 0 ? defaultValue : result;
      }
      __name(get4, "get");
      module2.exports = get4;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseHasIn.js"(exports2, module2) {
      function baseHasIn2(object, key) {
        return object != null && key in Object(object);
      }
      __name(baseHasIn2, "baseHasIn");
      module2.exports = baseHasIn2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS({
    "../boardzilla-core/node_modules/lodash/_hasPath.js"(exports2, module2) {
      var castPath2 = require_castPath();
      var isArguments2 = require_isArguments();
      var isArray2 = require_isArray();
      var isIndex2 = require_isIndex();
      var isLength2 = require_isLength();
      var toKey2 = require_toKey();
      function hasPath2(object, path, hasFunc) {
        path = castPath2(path, object);
        var index = -1, length = path.length, result = false;
        while (++index < length) {
          var key = toKey2(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength2(length) && isIndex2(key, length) && (isArray2(object) || isArguments2(object));
      }
      __name(hasPath2, "hasPath");
      module2.exports = hasPath2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS({
    "../boardzilla-core/node_modules/lodash/hasIn.js"(exports2, module2) {
      var baseHasIn2 = require_baseHasIn();
      var hasPath2 = require_hasPath();
      function hasIn2(object, path) {
        return object != null && hasPath2(object, path, baseHasIn2);
      }
      __name(hasIn2, "hasIn");
      module2.exports = hasIn2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseMatchesProperty.js"(exports2, module2) {
      var baseIsEqual2 = require_baseIsEqual();
      var get4 = require_get();
      var hasIn2 = require_hasIn();
      var isKey2 = require_isKey();
      var isStrictComparable2 = require_isStrictComparable();
      var matchesStrictComparable2 = require_matchesStrictComparable();
      var toKey2 = require_toKey();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      function baseMatchesProperty2(path, srcValue) {
        if (isKey2(path) && isStrictComparable2(srcValue)) {
          return matchesStrictComparable2(toKey2(path), srcValue);
        }
        return function(object) {
          var objValue = get4(object, path);
          return objValue === void 0 && objValue === srcValue ? hasIn2(object, path) : baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG7 | COMPARE_UNORDERED_FLAG5);
        };
      }
      __name(baseMatchesProperty2, "baseMatchesProperty");
      module2.exports = baseMatchesProperty2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseProperty.js"(exports2, module2) {
      function baseProperty2(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      __name(baseProperty2, "baseProperty");
      module2.exports = baseProperty2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS({
    "../boardzilla-core/node_modules/lodash/_basePropertyDeep.js"(exports2, module2) {
      var baseGet2 = require_baseGet();
      function basePropertyDeep2(path) {
        return function(object) {
          return baseGet2(object, path);
        };
      }
      __name(basePropertyDeep2, "basePropertyDeep");
      module2.exports = basePropertyDeep2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/property.js
  var require_property = __commonJS({
    "../boardzilla-core/node_modules/lodash/property.js"(exports2, module2) {
      var baseProperty2 = require_baseProperty();
      var basePropertyDeep2 = require_basePropertyDeep();
      var isKey2 = require_isKey();
      var toKey2 = require_toKey();
      function property2(path) {
        return isKey2(path) ? baseProperty2(toKey2(path)) : basePropertyDeep2(path);
      }
      __name(property2, "property");
      module2.exports = property2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseIteratee.js"(exports2, module2) {
      var baseMatches2 = require_baseMatches();
      var baseMatchesProperty2 = require_baseMatchesProperty();
      var identity2 = require_identity();
      var isArray2 = require_isArray();
      var property2 = require_property();
      function baseIteratee2(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity2;
        }
        if (typeof value == "object") {
          return isArray2(value) ? baseMatchesProperty2(value[0], value[1]) : baseMatches2(value);
        }
        return property2(value);
      }
      __name(baseIteratee2, "baseIteratee");
      module2.exports = baseIteratee2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_createBaseEach.js
  var require_createBaseEach = __commonJS({
    "../boardzilla-core/node_modules/lodash/_createBaseEach.js"(exports2, module2) {
      var isArrayLike2 = require_isArrayLike();
      function createBaseEach2(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike2(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      __name(createBaseEach2, "createBaseEach");
      module2.exports = createBaseEach2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseEach.js
  var require_baseEach = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseEach.js"(exports2, module2) {
      var baseForOwn2 = require_baseForOwn();
      var createBaseEach2 = require_createBaseEach();
      var baseEach2 = createBaseEach2(baseForOwn2);
      module2.exports = baseEach2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseMap.js
  var require_baseMap = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseMap.js"(exports2, module2) {
      var baseEach2 = require_baseEach();
      var isArrayLike2 = require_isArrayLike();
      function baseMap2(collection, iteratee) {
        var index = -1, result = isArrayLike2(collection) ? Array(collection.length) : [];
        baseEach2(collection, function(value, key, collection2) {
          result[++index] = iteratee(value, key, collection2);
        });
        return result;
      }
      __name(baseMap2, "baseMap");
      module2.exports = baseMap2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/map.js
  var require_map = __commonJS({
    "../boardzilla-core/node_modules/lodash/map.js"(exports2, module2) {
      var arrayMap2 = require_arrayMap();
      var baseIteratee2 = require_baseIteratee();
      var baseMap2 = require_baseMap();
      var isArray2 = require_isArray();
      function map2(collection, iteratee) {
        var func = isArray2(collection) ? arrayMap2 : baseMap2;
        return func(collection, baseIteratee2(iteratee, 3));
      }
      __name(map2, "map");
      module2.exports = map2;
    }
  });

  // ../boardzilla-core/node_modules/reactcss/lib/flattenNames.js
  var require_flattenNames = __commonJS({
    "../boardzilla-core/node_modules/reactcss/lib/flattenNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.flattenNames = void 0;
      var _isString2 = require_isString();
      var _isString3 = _interopRequireDefault(_isString2);
      var _forOwn2 = require_forOwn();
      var _forOwn3 = _interopRequireDefault(_forOwn2);
      var _isPlainObject2 = require_isPlainObject();
      var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);
      var _map2 = require_map();
      var _map3 = _interopRequireDefault(_map2);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      var flattenNames = exports2.flattenNames = /* @__PURE__ */ __name(function flattenNames2() {
        var things = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        var names2 = [];
        (0, _map3.default)(things, function(thing) {
          if (Array.isArray(thing)) {
            flattenNames2(thing).map(function(name) {
              return names2.push(name);
            });
          } else if ((0, _isPlainObject3.default)(thing)) {
            (0, _forOwn3.default)(thing, function(value, key) {
              value === true && names2.push(key);
              names2.push(key + "-" + value);
            });
          } else if ((0, _isString3.default)(thing)) {
            names2.push(thing);
          }
        });
        return names2;
      }, "flattenNames");
      exports2.default = flattenNames;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_arrayEach.js
  var require_arrayEach = __commonJS({
    "../boardzilla-core/node_modules/lodash/_arrayEach.js"(exports2, module2) {
      function arrayEach2(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      __name(arrayEach2, "arrayEach");
      module2.exports = arrayEach2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS({
    "../boardzilla-core/node_modules/lodash/_defineProperty.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var defineProperty2 = function() {
        try {
          var func = getNative2(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      module2.exports = defineProperty2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseAssignValue.js"(exports2, module2) {
      var defineProperty2 = require_defineProperty();
      function baseAssignValue2(object, key, value) {
        if (key == "__proto__" && defineProperty2) {
          defineProperty2(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      __name(baseAssignValue2, "baseAssignValue");
      module2.exports = baseAssignValue2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_assignValue.js
  var require_assignValue = __commonJS({
    "../boardzilla-core/node_modules/lodash/_assignValue.js"(exports2, module2) {
      var baseAssignValue2 = require_baseAssignValue();
      var eq2 = require_eq();
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      function assignValue2(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty13.call(object, key) && eq2(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue2(object, key, value);
        }
      }
      __name(assignValue2, "assignValue");
      module2.exports = assignValue2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_copyObject.js
  var require_copyObject = __commonJS({
    "../boardzilla-core/node_modules/lodash/_copyObject.js"(exports2, module2) {
      var assignValue2 = require_assignValue();
      var baseAssignValue2 = require_baseAssignValue();
      function copyObject2(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue2(object, key, newValue);
          } else {
            assignValue2(object, key, newValue);
          }
        }
        return object;
      }
      __name(copyObject2, "copyObject");
      module2.exports = copyObject2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseAssign.js
  var require_baseAssign = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseAssign.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var keys2 = require_keys();
      function baseAssign(object, source) {
        return object && copyObject2(source, keys2(source), object);
      }
      __name(baseAssign, "baseAssign");
      module2.exports = baseAssign;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_nativeKeysIn.js
  var require_nativeKeysIn = __commonJS({
    "../boardzilla-core/node_modules/lodash/_nativeKeysIn.js"(exports2, module2) {
      function nativeKeysIn2(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      __name(nativeKeysIn2, "nativeKeysIn");
      module2.exports = nativeKeysIn2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseKeysIn.js
  var require_baseKeysIn = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseKeysIn.js"(exports2, module2) {
      var isObject2 = require_isObject();
      var isPrototype2 = require_isPrototype();
      var nativeKeysIn2 = require_nativeKeysIn();
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      function baseKeysIn2(object) {
        if (!isObject2(object)) {
          return nativeKeysIn2(object);
        }
        var isProto = isPrototype2(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty13.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      __name(baseKeysIn2, "baseKeysIn");
      module2.exports = baseKeysIn2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/keysIn.js
  var require_keysIn = __commonJS({
    "../boardzilla-core/node_modules/lodash/keysIn.js"(exports2, module2) {
      var arrayLikeKeys2 = require_arrayLikeKeys();
      var baseKeysIn2 = require_baseKeysIn();
      var isArrayLike2 = require_isArrayLike();
      function keysIn2(object) {
        return isArrayLike2(object) ? arrayLikeKeys2(object, true) : baseKeysIn2(object);
      }
      __name(keysIn2, "keysIn");
      module2.exports = keysIn2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseAssignIn.js
  var require_baseAssignIn = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseAssignIn.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var keysIn2 = require_keysIn();
      function baseAssignIn(object, source) {
        return object && copyObject2(source, keysIn2(source), object);
      }
      __name(baseAssignIn, "baseAssignIn");
      module2.exports = baseAssignIn;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_cloneBuffer.js
  var require_cloneBuffer = __commonJS({
    "../boardzilla-core/node_modules/lodash/_cloneBuffer.js"(exports2, module2) {
      var root2 = require_root();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var Buffer4 = moduleExports4 ? root2.Buffer : void 0;
      var allocUnsafe2 = Buffer4 ? Buffer4.allocUnsafe : void 0;
      function cloneBuffer2(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result = allocUnsafe2 ? allocUnsafe2(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      __name(cloneBuffer2, "cloneBuffer");
      module2.exports = cloneBuffer2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_copyArray.js
  var require_copyArray = __commonJS({
    "../boardzilla-core/node_modules/lodash/_copyArray.js"(exports2, module2) {
      function copyArray2(source, array) {
        var index = -1, length = source.length;
        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      __name(copyArray2, "copyArray");
      module2.exports = copyArray2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_copySymbols.js
  var require_copySymbols = __commonJS({
    "../boardzilla-core/node_modules/lodash/_copySymbols.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var getSymbols2 = require_getSymbols();
      function copySymbols(source, object) {
        return copyObject2(source, getSymbols2(source), object);
      }
      __name(copySymbols, "copySymbols");
      module2.exports = copySymbols;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getSymbolsIn.js
  var require_getSymbolsIn = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getSymbolsIn.js"(exports2, module2) {
      var arrayPush2 = require_arrayPush();
      var getPrototype2 = require_getPrototype();
      var getSymbols2 = require_getSymbols();
      var stubArray2 = require_stubArray();
      var nativeGetSymbols2 = Object.getOwnPropertySymbols;
      var getSymbolsIn = !nativeGetSymbols2 ? stubArray2 : function(object) {
        var result = [];
        while (object) {
          arrayPush2(result, getSymbols2(object));
          object = getPrototype2(object);
        }
        return result;
      };
      module2.exports = getSymbolsIn;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_copySymbolsIn.js
  var require_copySymbolsIn = __commonJS({
    "../boardzilla-core/node_modules/lodash/_copySymbolsIn.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var getSymbolsIn = require_getSymbolsIn();
      function copySymbolsIn(source, object) {
        return copyObject2(source, getSymbolsIn(source), object);
      }
      __name(copySymbolsIn, "copySymbolsIn");
      module2.exports = copySymbolsIn;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_getAllKeysIn.js
  var require_getAllKeysIn = __commonJS({
    "../boardzilla-core/node_modules/lodash/_getAllKeysIn.js"(exports2, module2) {
      var baseGetAllKeys2 = require_baseGetAllKeys();
      var getSymbolsIn = require_getSymbolsIn();
      var keysIn2 = require_keysIn();
      function getAllKeysIn(object) {
        return baseGetAllKeys2(object, keysIn2, getSymbolsIn);
      }
      __name(getAllKeysIn, "getAllKeysIn");
      module2.exports = getAllKeysIn;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_initCloneArray.js
  var require_initCloneArray = __commonJS({
    "../boardzilla-core/node_modules/lodash/_initCloneArray.js"(exports2, module2) {
      var objectProto16 = Object.prototype;
      var hasOwnProperty13 = objectProto16.hasOwnProperty;
      function initCloneArray(array) {
        var length = array.length, result = new array.constructor(length);
        if (length && typeof array[0] == "string" && hasOwnProperty13.call(array, "index")) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
      __name(initCloneArray, "initCloneArray");
      module2.exports = initCloneArray;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_cloneArrayBuffer.js
  var require_cloneArrayBuffer = __commonJS({
    "../boardzilla-core/node_modules/lodash/_cloneArrayBuffer.js"(exports2, module2) {
      var Uint8Array3 = require_Uint8Array();
      function cloneArrayBuffer2(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array3(result).set(new Uint8Array3(arrayBuffer));
        return result;
      }
      __name(cloneArrayBuffer2, "cloneArrayBuffer");
      module2.exports = cloneArrayBuffer2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_cloneDataView.js
  var require_cloneDataView = __commonJS({
    "../boardzilla-core/node_modules/lodash/_cloneDataView.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      __name(cloneDataView, "cloneDataView");
      module2.exports = cloneDataView;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_cloneRegExp.js
  var require_cloneRegExp = __commonJS({
    "../boardzilla-core/node_modules/lodash/_cloneRegExp.js"(exports2, module2) {
      var reFlags = /\w*$/;
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
      __name(cloneRegExp, "cloneRegExp");
      module2.exports = cloneRegExp;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_cloneSymbol.js
  var require_cloneSymbol = __commonJS({
    "../boardzilla-core/node_modules/lodash/_cloneSymbol.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
      function cloneSymbol(symbol) {
        return symbolValueOf2 ? Object(symbolValueOf2.call(symbol)) : {};
      }
      __name(cloneSymbol, "cloneSymbol");
      module2.exports = cloneSymbol;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_cloneTypedArray.js
  var require_cloneTypedArray = __commonJS({
    "../boardzilla-core/node_modules/lodash/_cloneTypedArray.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      function cloneTypedArray2(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      __name(cloneTypedArray2, "cloneTypedArray");
      module2.exports = cloneTypedArray2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_initCloneByTag.js
  var require_initCloneByTag = __commonJS({
    "../boardzilla-core/node_modules/lodash/_initCloneByTag.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      var cloneDataView = require_cloneDataView();
      var cloneRegExp = require_cloneRegExp();
      var cloneSymbol = require_cloneSymbol();
      var cloneTypedArray2 = require_cloneTypedArray();
      var boolTag3 = "[object Boolean]";
      var dateTag3 = "[object Date]";
      var mapTag4 = "[object Map]";
      var numberTag3 = "[object Number]";
      var regexpTag3 = "[object RegExp]";
      var setTag4 = "[object Set]";
      var stringTag3 = "[object String]";
      var symbolTag3 = "[object Symbol]";
      var arrayBufferTag3 = "[object ArrayBuffer]";
      var dataViewTag4 = "[object DataView]";
      var float32Tag2 = "[object Float32Array]";
      var float64Tag2 = "[object Float64Array]";
      var int8Tag2 = "[object Int8Array]";
      var int16Tag2 = "[object Int16Array]";
      var int32Tag2 = "[object Int32Array]";
      var uint8Tag2 = "[object Uint8Array]";
      var uint8ClampedTag2 = "[object Uint8ClampedArray]";
      var uint16Tag2 = "[object Uint16Array]";
      var uint32Tag2 = "[object Uint32Array]";
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag3:
            return cloneArrayBuffer2(object);
          case boolTag3:
          case dateTag3:
            return new Ctor(+object);
          case dataViewTag4:
            return cloneDataView(object, isDeep);
          case float32Tag2:
          case float64Tag2:
          case int8Tag2:
          case int16Tag2:
          case int32Tag2:
          case uint8Tag2:
          case uint8ClampedTag2:
          case uint16Tag2:
          case uint32Tag2:
            return cloneTypedArray2(object, isDeep);
          case mapTag4:
            return new Ctor();
          case numberTag3:
          case stringTag3:
            return new Ctor(object);
          case regexpTag3:
            return cloneRegExp(object);
          case setTag4:
            return new Ctor();
          case symbolTag3:
            return cloneSymbol(object);
        }
      }
      __name(initCloneByTag, "initCloneByTag");
      module2.exports = initCloneByTag;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseCreate.js
  var require_baseCreate = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseCreate.js"(exports2, module2) {
      var isObject2 = require_isObject();
      var objectCreate2 = Object.create;
      var baseCreate2 = function() {
        function object() {
        }
        __name(object, "object");
        return function(proto) {
          if (!isObject2(proto)) {
            return {};
          }
          if (objectCreate2) {
            return objectCreate2(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      module2.exports = baseCreate2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_initCloneObject.js
  var require_initCloneObject = __commonJS({
    "../boardzilla-core/node_modules/lodash/_initCloneObject.js"(exports2, module2) {
      var baseCreate2 = require_baseCreate();
      var getPrototype2 = require_getPrototype();
      var isPrototype2 = require_isPrototype();
      function initCloneObject2(object) {
        return typeof object.constructor == "function" && !isPrototype2(object) ? baseCreate2(getPrototype2(object)) : {};
      }
      __name(initCloneObject2, "initCloneObject");
      module2.exports = initCloneObject2;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseIsMap.js
  var require_baseIsMap = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseIsMap.js"(exports2, module2) {
      var getTag2 = require_getTag();
      var isObjectLike2 = require_isObjectLike();
      var mapTag4 = "[object Map]";
      function baseIsMap(value) {
        return isObjectLike2(value) && getTag2(value) == mapTag4;
      }
      __name(baseIsMap, "baseIsMap");
      module2.exports = baseIsMap;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isMap.js
  var require_isMap = __commonJS({
    "../boardzilla-core/node_modules/lodash/isMap.js"(exports2, module2) {
      var baseIsMap = require_baseIsMap();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsMap = nodeUtil2 && nodeUtil2.isMap;
      var isMap = nodeIsMap ? baseUnary2(nodeIsMap) : baseIsMap;
      module2.exports = isMap;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseIsSet.js
  var require_baseIsSet = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseIsSet.js"(exports2, module2) {
      var getTag2 = require_getTag();
      var isObjectLike2 = require_isObjectLike();
      var setTag4 = "[object Set]";
      function baseIsSet(value) {
        return isObjectLike2(value) && getTag2(value) == setTag4;
      }
      __name(baseIsSet, "baseIsSet");
      module2.exports = baseIsSet;
    }
  });

  // ../boardzilla-core/node_modules/lodash/isSet.js
  var require_isSet = __commonJS({
    "../boardzilla-core/node_modules/lodash/isSet.js"(exports2, module2) {
      var baseIsSet = require_baseIsSet();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsSet = nodeUtil2 && nodeUtil2.isSet;
      var isSet = nodeIsSet ? baseUnary2(nodeIsSet) : baseIsSet;
      module2.exports = isSet;
    }
  });

  // ../boardzilla-core/node_modules/lodash/_baseClone.js
  var require_baseClone = __commonJS({
    "../boardzilla-core/node_modules/lodash/_baseClone.js"(exports2, module2) {
      var Stack2 = require_Stack();
      var arrayEach2 = require_arrayEach();
      var assignValue2 = require_assignValue();
      var baseAssign = require_baseAssign();
      var baseAssignIn = require_baseAssignIn();
      var cloneBuffer2 = require_cloneBuffer();
      var copyArray2 = require_copyArray();
      var copySymbols = require_copySymbols();
      var copySymbolsIn = require_copySymbolsIn();
      var getAllKeys2 = require_getAllKeys();
      var getAllKeysIn = require_getAllKeysIn();
      var getTag2 = require_getTag();
      var initCloneArray = require_initCloneArray();
      var initCloneByTag = require_initCloneByTag();
      var initCloneObject2 = require_initCloneObject();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isMap = require_isMap();
      var isObject2 = require_isObject();
      var isSet = require_isSet();
      var keys2 = require_keys();
      var keysIn2 = require_keysIn();
      var CLONE_DEEP_FLAG = 1;
      var CLONE_FLAT_FLAG = 2;
      var CLONE_SYMBOLS_FLAG = 4;
      var argsTag4 = "[object Arguments]";
      var arrayTag3 = "[object Array]";
      var boolTag3 = "[object Boolean]";
      var dateTag3 = "[object Date]";
      var errorTag3 = "[object Error]";
      var funcTag3 = "[object Function]";
      var genTag2 = "[object GeneratorFunction]";
      var mapTag4 = "[object Map]";
      var numberTag3 = "[object Number]";
      var objectTag5 = "[object Object]";
      var regexpTag3 = "[object RegExp]";
      var setTag4 = "[object Set]";
      var stringTag3 = "[object String]";
      var symbolTag3 = "[object Symbol]";
      var weakMapTag3 = "[object WeakMap]";
      var arrayBufferTag3 = "[object ArrayBuffer]";
      var dataViewTag4 = "[object DataView]";
      var float32Tag2 = "[object Float32Array]";
      var float64Tag2 = "[object Float64Array]";
      var int8Tag2 = "[object Int8Array]";
      var int16Tag2 = "[object Int16Array]";
      var int32Tag2 = "[object Int32Array]";
      var uint8Tag2 = "[object Uint8Array]";
      var uint8ClampedTag2 = "[object Uint8ClampedArray]";
      var uint16Tag2 = "[object Uint16Array]";
      var uint32Tag2 = "[object Uint32Array]";
      var cloneableTags = {};
      cloneableTags[argsTag4] = cloneableTags[arrayTag3] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag2] = cloneableTags[float64Tag2] = cloneableTags[int8Tag2] = cloneableTags[int16Tag2] = cloneableTags[int32Tag2] = cloneableTags[mapTag4] = cloneableTags[numberTag3] = cloneableTags[objectTag5] = cloneableTags[regexpTag3] = cloneableTags[setTag4] = cloneableTags[stringTag3] = cloneableTags[symbolTag3] = cloneableTags[uint8Tag2] = cloneableTags[uint8ClampedTag2] = cloneableTags[uint16Tag2] = cloneableTags[uint32Tag2] = true;
      cloneableTags[errorTag3] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== void 0) {
          return result;
        }
        if (!isObject2(value)) {
          return value;
        }
        var isArr = isArray2(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray2(value, result);
          }
        } else {
          var tag = getTag2(value), isFunc = tag == funcTag3 || tag == genTag2;
          if (isBuffer2(value)) {
            return cloneBuffer2(value, isDeep);
          }
          if (tag == objectTag5 || tag == argsTag4 || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject2(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack2());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);
        if (isSet(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key2) {
            result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys2 : isFlat ? keysIn2 : keys2;
        var props = isArr ? void 0 : keysFunc(value);
        arrayEach2(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue2(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
        return result;
      }
      __name(baseClone, "baseClone");
      module2.exports = baseClone;
    }
  });

  // ../boardzilla-core/node_modules/lodash/cloneDeep.js
  var require_cloneDeep = __commonJS({
    "../boardzilla-core/node_modules/lodash/cloneDeep.js"(exports2, module2) {
      var baseClone = require_baseClone();
      var CLONE_DEEP_FLAG = 1;
      var CLONE_SYMBOLS_FLAG = 4;
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
      __name(cloneDeep, "cloneDeep");
      module2.exports = cloneDeep;
    }
  });

  // ../boardzilla-core/node_modules/reactcss/lib/mergeClasses.js
  var require_mergeClasses = __commonJS({
    "../boardzilla-core/node_modules/reactcss/lib/mergeClasses.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.mergeClasses = void 0;
      var _forOwn2 = require_forOwn();
      var _forOwn3 = _interopRequireDefault(_forOwn2);
      var _cloneDeep2 = require_cloneDeep();
      var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);
      var _extends10 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      var mergeClasses = exports2.mergeClasses = /* @__PURE__ */ __name(function mergeClasses2(classes) {
        var activeNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        var styles = classes.default && (0, _cloneDeep3.default)(classes.default) || {};
        activeNames.map(function(name) {
          var toMerge = classes[name];
          if (toMerge) {
            (0, _forOwn3.default)(toMerge, function(value, key) {
              if (!styles[key]) {
                styles[key] = {};
              }
              styles[key] = _extends10({}, styles[key], toMerge[key]);
            });
          }
          return name;
        });
        return styles;
      }, "mergeClasses");
      exports2.default = mergeClasses;
    }
  });

  // ../boardzilla-core/node_modules/reactcss/lib/autoprefix.js
  var require_autoprefix = __commonJS({
    "../boardzilla-core/node_modules/reactcss/lib/autoprefix.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.autoprefix = void 0;
      var _forOwn2 = require_forOwn();
      var _forOwn3 = _interopRequireDefault(_forOwn2);
      var _extends10 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      var transforms = {
        borderRadius: /* @__PURE__ */ __name(function borderRadius(value) {
          return {
            msBorderRadius: value,
            MozBorderRadius: value,
            OBorderRadius: value,
            WebkitBorderRadius: value,
            borderRadius: value
          };
        }, "borderRadius"),
        boxShadow: /* @__PURE__ */ __name(function boxShadow(value) {
          return {
            msBoxShadow: value,
            MozBoxShadow: value,
            OBoxShadow: value,
            WebkitBoxShadow: value,
            boxShadow: value
          };
        }, "boxShadow"),
        userSelect: /* @__PURE__ */ __name(function userSelect(value) {
          return {
            WebkitTouchCallout: value,
            KhtmlUserSelect: value,
            MozUserSelect: value,
            msUserSelect: value,
            WebkitUserSelect: value,
            userSelect: value
          };
        }, "userSelect"),
        flex: /* @__PURE__ */ __name(function flex(value) {
          return {
            WebkitBoxFlex: value,
            MozBoxFlex: value,
            WebkitFlex: value,
            msFlex: value,
            flex: value
          };
        }, "flex"),
        flexBasis: /* @__PURE__ */ __name(function flexBasis(value) {
          return {
            WebkitFlexBasis: value,
            flexBasis: value
          };
        }, "flexBasis"),
        justifyContent: /* @__PURE__ */ __name(function justifyContent(value) {
          return {
            WebkitJustifyContent: value,
            justifyContent: value
          };
        }, "justifyContent"),
        transition: /* @__PURE__ */ __name(function transition(value) {
          return {
            msTransition: value,
            MozTransition: value,
            OTransition: value,
            WebkitTransition: value,
            transition: value
          };
        }, "transition"),
        transform: /* @__PURE__ */ __name(function transform(value) {
          return {
            msTransform: value,
            MozTransform: value,
            OTransform: value,
            WebkitTransform: value,
            transform: value
          };
        }, "transform"),
        absolute: /* @__PURE__ */ __name(function absolute(value) {
          var direction = value && value.split(" ");
          return {
            position: "absolute",
            top: direction && direction[0],
            right: direction && direction[1],
            bottom: direction && direction[2],
            left: direction && direction[3]
          };
        }, "absolute"),
        extend: /* @__PURE__ */ __name(function extend(name, otherElementStyles) {
          var otherStyle = otherElementStyles[name];
          if (otherStyle) {
            return otherStyle;
          }
          return {
            "extend": name
          };
        }, "extend")
      };
      var autoprefix = exports2.autoprefix = /* @__PURE__ */ __name(function autoprefix2(elements) {
        var prefixed = {};
        (0, _forOwn3.default)(elements, function(styles, element) {
          var expanded = {};
          (0, _forOwn3.default)(styles, function(value, key) {
            var transform = transforms[key];
            if (transform) {
              expanded = _extends10({}, expanded, transform(value));
            } else {
              expanded[key] = value;
            }
          });
          prefixed[element] = expanded;
        });
        return prefixed;
      }, "autoprefix");
      exports2.default = autoprefix;
    }
  });

  // ../boardzilla-core/node_modules/reactcss/lib/components/hover.js
  var require_hover = __commonJS({
    "../boardzilla-core/node_modules/reactcss/lib/components/hover.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.hover = void 0;
      var _extends10 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function _classCallCheck9(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      __name(_classCallCheck9, "_classCallCheck");
      function _possibleConstructorReturn9(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      __name(_possibleConstructorReturn9, "_possibleConstructorReturn");
      function _inherits9(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      __name(_inherits9, "_inherits");
      var hover = exports2.hover = /* @__PURE__ */ __name(function hover2(Component6) {
        var Span = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
        return function(_React$Component) {
          _inherits9(Hover, _React$Component);
          function Hover() {
            var _ref;
            var _temp, _this, _ret;
            _classCallCheck9(this, Hover);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return _ret = (_temp = (_this = _possibleConstructorReturn9(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = { hover: false }, _this.handleMouseOver = function() {
              return _this.setState({ hover: true });
            }, _this.handleMouseOut = function() {
              return _this.setState({ hover: false });
            }, _this.render = function() {
              return _react2.default.createElement(
                Span,
                { onMouseOver: _this.handleMouseOver, onMouseOut: _this.handleMouseOut },
                _react2.default.createElement(Component6, _extends10({}, _this.props, _this.state))
              );
            }, _temp), _possibleConstructorReturn9(_this, _ret);
          }
          __name(Hover, "Hover");
          return Hover;
        }(_react2.default.Component);
      }, "hover");
      exports2.default = hover;
    }
  });

  // ../boardzilla-core/node_modules/reactcss/lib/components/active.js
  var require_active = __commonJS({
    "../boardzilla-core/node_modules/reactcss/lib/components/active.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.active = void 0;
      var _extends10 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function _classCallCheck9(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      __name(_classCallCheck9, "_classCallCheck");
      function _possibleConstructorReturn9(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      __name(_possibleConstructorReturn9, "_possibleConstructorReturn");
      function _inherits9(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      __name(_inherits9, "_inherits");
      var active = exports2.active = /* @__PURE__ */ __name(function active2(Component6) {
        var Span = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
        return function(_React$Component) {
          _inherits9(Active, _React$Component);
          function Active() {
            var _ref;
            var _temp, _this, _ret;
            _classCallCheck9(this, Active);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return _ret = (_temp = (_this = _possibleConstructorReturn9(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = { active: false }, _this.handleMouseDown = function() {
              return _this.setState({ active: true });
            }, _this.handleMouseUp = function() {
              return _this.setState({ active: false });
            }, _this.render = function() {
              return _react2.default.createElement(
                Span,
                { onMouseDown: _this.handleMouseDown, onMouseUp: _this.handleMouseUp },
                _react2.default.createElement(Component6, _extends10({}, _this.props, _this.state))
              );
            }, _temp), _possibleConstructorReturn9(_this, _ret);
          }
          __name(Active, "Active");
          return Active;
        }(_react2.default.Component);
      }, "active");
      exports2.default = active;
    }
  });

  // ../boardzilla-core/node_modules/reactcss/lib/loop.js
  var require_loop = __commonJS({
    "../boardzilla-core/node_modules/reactcss/lib/loop.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var loopable = /* @__PURE__ */ __name(function loopable2(i, length) {
        var props = {};
        var setProp = /* @__PURE__ */ __name(function setProp2(name) {
          var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          props[name] = value;
        }, "setProp");
        i === 0 && setProp("first-child");
        i === length - 1 && setProp("last-child");
        (i === 0 || i % 2 === 0) && setProp("even");
        Math.abs(i % 2) === 1 && setProp("odd");
        setProp("nth-child", i);
        return props;
      }, "loopable");
      exports2.default = loopable;
    }
  });

  // ../boardzilla-core/node_modules/reactcss/lib/index.js
  var require_lib = __commonJS({
    "../boardzilla-core/node_modules/reactcss/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.ReactCSS = exports2.loop = exports2.handleActive = exports2.handleHover = exports2.hover = void 0;
      var _flattenNames = require_flattenNames();
      var _flattenNames2 = _interopRequireDefault(_flattenNames);
      var _mergeClasses = require_mergeClasses();
      var _mergeClasses2 = _interopRequireDefault(_mergeClasses);
      var _autoprefix = require_autoprefix();
      var _autoprefix2 = _interopRequireDefault(_autoprefix);
      var _hover2 = require_hover();
      var _hover3 = _interopRequireDefault(_hover2);
      var _active = require_active();
      var _active2 = _interopRequireDefault(_active);
      var _loop2 = require_loop();
      var _loop3 = _interopRequireDefault(_loop2);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      exports2.hover = _hover3.default;
      exports2.handleHover = _hover3.default;
      exports2.handleActive = _active2.default;
      exports2.loop = _loop3.default;
      var ReactCSS = exports2.ReactCSS = /* @__PURE__ */ __name(function ReactCSS2(classes) {
        for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          activations[_key - 1] = arguments[_key];
        }
        var activeNames = (0, _flattenNames2.default)(activations);
        var merged = (0, _mergeClasses2.default)(classes, activeNames);
        return (0, _autoprefix2.default)(merged);
      }, "ReactCSS");
      exports2.default = ReactCSS;
    }
  });

  // ../boardzilla-core/node_modules/@icons/material/UnfoldMoreHorizontalIcon.js
  var require_UnfoldMoreHorizontalIcon = __commonJS({
    "../boardzilla-core/node_modules/@icons/material/UnfoldMoreHorizontalIcon.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends10 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function _objectWithoutProperties(obj, keys2) {
        var target = {};
        for (var i in obj) {
          if (keys2.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      __name(_objectWithoutProperties, "_objectWithoutProperties");
      var DEFAULT_SIZE = 24;
      exports2.default = function(_ref) {
        var _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? "currentColor" : _ref$fill, _ref$width = _ref.width, width = _ref$width === void 0 ? DEFAULT_SIZE : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? DEFAULT_SIZE : _ref$height, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, props = _objectWithoutProperties(_ref, ["fill", "width", "height", "style"]);
        return _react2.default.createElement(
          "svg",
          _extends10({
            viewBox: "0 0 " + DEFAULT_SIZE + " " + DEFAULT_SIZE,
            style: _extends10({ fill, width, height }, style)
          }, props),
          _react2.default.createElement("path", { d: "M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z" })
        );
      };
    }
  });

  // ../boardzilla-core/node_modules/@icons/material/CheckIcon.js
  var require_CheckIcon = __commonJS({
    "../boardzilla-core/node_modules/@icons/material/CheckIcon.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends10 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function _objectWithoutProperties(obj, keys2) {
        var target = {};
        for (var i in obj) {
          if (keys2.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      __name(_objectWithoutProperties, "_objectWithoutProperties");
      var DEFAULT_SIZE = 24;
      exports2.default = function(_ref) {
        var _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? "currentColor" : _ref$fill, _ref$width = _ref.width, width = _ref$width === void 0 ? DEFAULT_SIZE : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? DEFAULT_SIZE : _ref$height, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, props = _objectWithoutProperties(_ref, ["fill", "width", "height", "style"]);
        return _react2.default.createElement(
          "svg",
          _extends10({
            viewBox: "0 0 " + DEFAULT_SIZE + " " + DEFAULT_SIZE,
            style: _extends10({ fill, width, height }, style)
          }, props),
          _react2.default.createElement("path", { d: "M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" })
        );
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development2 = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports2, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          __name(getIteratorFn, "getIteratorFn");
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          __name(setExtraStackFrame, "setExtraStackFrame");
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          __name(warn, "warn");
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          __name(error, "error");
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          __name(printWarning, "printWarning");
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          __name(warnNoop, "warnNoop");
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component6(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          __name(Component6, "Component");
          Component6.prototype.isReactComponent = {};
          Component6.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component6.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = /* @__PURE__ */ __name(function(methodName, info) {
              Object.defineProperty(Component6.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            }, "defineDeprecationWarning");
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          __name(ComponentDummy, "ComponentDummy");
          ComponentDummy.prototype = Component6.prototype;
          function PureComponent6(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          __name(PureComponent6, "PureComponent");
          var pureComponentPrototype = PureComponent6.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent6;
          assign(pureComponentPrototype, Component6.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          __name(createRef, "createRef");
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          __name(isArray2, "isArray");
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          __name(typeName, "typeName");
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          __name(willCoercionThrow, "willCoercionThrow");
          function testStringCoercion(value) {
            return "" + value;
          }
          __name(testStringCoercion, "testStringCoercion");
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          __name(checkKeyStringCoercion, "checkKeyStringCoercion");
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          __name(getWrappedName, "getWrappedName");
          function getContextName(type) {
            return type.displayName || "Context";
          }
          __name(getContextName, "getContextName");
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          __name(getComponentNameFromType, "getComponentNameFromType");
          var hasOwnProperty13 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty13.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          __name(hasValidRef, "hasValidRef");
          function hasValidKey(config) {
            {
              if (hasOwnProperty13.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          __name(hasValidKey, "hasValidKey");
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = /* @__PURE__ */ __name(function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            }, "warnAboutAccessingKey");
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          __name(defineKeyPropWarningGetter, "defineKeyPropWarningGetter");
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = /* @__PURE__ */ __name(function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            }, "warnAboutAccessingRef");
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          __name(defineRefPropWarningGetter, "defineRefPropWarningGetter");
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          __name(warnIfStringRefCannotBeAutoConverted, "warnIfStringRefCannotBeAutoConverted");
          var ReactElement = /* @__PURE__ */ __name(function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          }, "ReactElement");
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty13.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          __name(createElement, "createElement");
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          __name(cloneAndReplaceKey, "cloneAndReplaceKey");
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty13.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          __name(cloneElement, "cloneElement");
          function isValidElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          __name(isValidElement2, "isValidElement");
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          __name(escape, "escape");
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          __name(escapeUserProvidedKey, "escapeUserProvidedKey");
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          __name(getElementKey, "getElementKey");
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement2(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          __name(mapIntoArray, "mapIntoArray");
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          __name(mapChildren, "mapChildren");
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          __name(countChildren, "countChildren");
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          __name(forEachChildren, "forEachChildren");
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          __name(toArray, "toArray");
          function onlyChild(children) {
            if (!isValidElement2(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          __name(onlyChild, "onlyChild");
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          __name(createContext, "createContext");
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          __name(lazyInitializer, "lazyInitializer");
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          __name(lazy, "lazy");
          function forwardRef(render3) {
            {
              if (render3 != null && render3.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render3 !== "function") {
                error("forwardRef requires a render function but was given %s.", render3 === null ? "null" : typeof render3);
              } else {
                if (render3.length !== 0 && render3.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render3.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render3 != null) {
                if (render3.defaultProps != null || render3.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render3
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render3.name && !render3.displayName) {
                    render3.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          __name(forwardRef, "forwardRef");
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          __name(isValidElementType, "isValidElementType");
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          __name(memo, "memo");
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          __name(resolveDispatcher, "resolveDispatcher");
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          __name(useContext, "useContext");
          function useState5(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          __name(useState5, "useState");
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          __name(useReducer, "useReducer");
          function useRef3(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          __name(useRef3, "useRef");
          function useEffect4(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          __name(useEffect4, "useEffect");
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          __name(useInsertionEffect, "useInsertionEffect");
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          __name(useLayoutEffect, "useLayoutEffect");
          function useCallback4(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          __name(useCallback4, "useCallback");
          function useMemo3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          __name(useMemo3, "useMemo");
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          __name(useImperativeHandle, "useImperativeHandle");
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          __name(useDebugValue2, "useDebugValue");
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          __name(useTransition, "useTransition");
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          __name(useDeferredValue, "useDeferredValue");
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          __name(useId, "useId");
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          __name(useSyncExternalStore, "useSyncExternalStore");
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          __name(disabledLog, "disabledLog");
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          __name(disableLogs, "disableLogs");
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          __name(reenableLogs, "reenableLogs");
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          __name(describeBuiltInComponentFrame, "describeBuiltInComponentFrame");
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = /* @__PURE__ */ __name(function() {
                  throw Error();
                }, "Fake");
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          __name(describeNativeComponentFrame, "describeNativeComponentFrame");
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          __name(describeFunctionComponentFrame, "describeFunctionComponentFrame");
          function shouldConstruct(Component7) {
            var prototype = Component7.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          __name(shouldConstruct, "shouldConstruct");
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          __name(describeUnknownElementTypeFrameInDEV, "describeUnknownElementTypeFrameInDEV");
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement, "setCurrentlyValidatingElement");
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty13);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          __name(checkPropTypes, "checkPropTypes");
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement$1, "setCurrentlyValidatingElement$1");
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          __name(getDeclarationErrorAddendum, "getDeclarationErrorAddendum");
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          __name(getSourceInfoErrorAddendum, "getSourceInfoErrorAddendum");
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          __name(getSourceInfoErrorAddendumForProps, "getSourceInfoErrorAddendumForProps");
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          __name(getCurrentComponentErrorInfo, "getCurrentComponentErrorInfo");
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          __name(validateExplicitKey, "validateExplicitKey");
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray2(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement2(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement2(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement2(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          __name(validateChildKeys, "validateChildKeys");
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          __name(validatePropTypes, "validatePropTypes");
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          __name(validateFragmentProps, "validateFragmentProps");
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          __name(createElementWithValidation, "createElementWithValidation");
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          __name(createFactoryWithValidation, "createFactoryWithValidation");
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          __name(cloneElementWithValidation, "cloneElementWithValidation");
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          __name(startTransition, "startTransition");
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = /* @__PURE__ */ __name(function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                }, "enqueueTaskImpl");
              }
            }
            return enqueueTaskImpl(task);
          }
          __name(enqueueTask, "enqueueTask");
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve2, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve2, reject);
                      } else {
                        resolve2(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve2, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve2, reject);
                      } else {
                        resolve2(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve2, reject) {
                      resolve2(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          __name(act, "act");
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          __name(popActScope, "popActScope");
          function recursivelyFlushAsyncActWork(returnValue, resolve2, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve2(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve2, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve2(returnValue);
              }
            }
          }
          __name(recursivelyFlushAsyncActWork, "recursivelyFlushAsyncActWork");
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          __name(flushActQueue, "flushActQueue");
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports2.Children = Children;
          exports2.Component = Component6;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.Profiler = REACT_PROFILER_TYPE;
          exports2.PureComponent = PureComponent6;
          exports2.StrictMode = REACT_STRICT_MODE_TYPE;
          exports2.Suspense = REACT_SUSPENSE_TYPE;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef;
          exports2.forwardRef = forwardRef;
          exports2.isValidElement = isValidElement2;
          exports2.lazy = lazy;
          exports2.memo = memo;
          exports2.startTransition = startTransition;
          exports2.unstable_act = act;
          exports2.useCallback = useCallback4;
          exports2.useContext = useContext;
          exports2.useDebugValue = useDebugValue2;
          exports2.useDeferredValue = useDeferredValue;
          exports2.useEffect = useEffect4;
          exports2.useId = useId;
          exports2.useImperativeHandle = useImperativeHandle;
          exports2.useInsertionEffect = useInsertionEffect;
          exports2.useLayoutEffect = useLayoutEffect;
          exports2.useMemo = useMemo3;
          exports2.useReducer = useReducer;
          exports2.useRef = useRef3;
          exports2.useState = useState5;
          exports2.useSyncExternalStore = useSyncExternalStore;
          exports2.useTransition = useTransition;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react2 = __commonJS({
    "node_modules/react/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development2();
      }
    }
  });

  // ../boardzilla-core/ui/index.tsx
  var import_react57 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // ../boardzilla-core/node_modules/zustand/esm/traditional.mjs
  var import_react = __toESM(require_react(), 1);
  var import_with_selector = __toESM(require_with_selector(), 1);

  // ../boardzilla-core/node_modules/zustand/esm/vanilla.mjs
  var import_meta = {};
  var createStoreImpl = /* @__PURE__ */ __name((createState) => {
    let state;
    const listeners = /* @__PURE__ */ new Set();
    const setState = /* @__PURE__ */ __name((partial, replace) => {
      const nextState = typeof partial === "function" ? partial(state) : partial;
      if (!Object.is(nextState, state)) {
        const previousState = state;
        state = (replace != null ? replace : typeof nextState !== "object") ? nextState : Object.assign({}, state, nextState);
        listeners.forEach((listener) => listener(state, previousState));
      }
    }, "setState");
    const getState = /* @__PURE__ */ __name(() => state, "getState");
    const subscribe = /* @__PURE__ */ __name((listener) => {
      listeners.add(listener);
      return () => listeners.delete(listener);
    }, "subscribe");
    const destroy = /* @__PURE__ */ __name(() => {
      if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production") {
        console.warn(
          "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
        );
      }
      listeners.clear();
    }, "destroy");
    const api = { setState, getState, subscribe, destroy };
    state = createState(setState, getState, api);
    return api;
  }, "createStoreImpl");
  var createStore = /* @__PURE__ */ __name((createState) => createState ? createStoreImpl(createState) : createStoreImpl, "createStore");

  // ../boardzilla-core/node_modules/zustand/esm/traditional.mjs
  var { useSyncExternalStoreWithSelector } = import_with_selector.default;
  function useStoreWithEqualityFn(api, selector = api.getState, equalityFn) {
    const slice = useSyncExternalStoreWithSelector(
      api.subscribe,
      api.getState,
      api.getServerState || api.getState,
      selector,
      equalityFn
    );
    (0, import_react.useDebugValue)(slice);
    return slice;
  }
  __name(useStoreWithEqualityFn, "useStoreWithEqualityFn");
  var createWithEqualityFnImpl = /* @__PURE__ */ __name((createState, defaultEqualityFn) => {
    const api = createStore(createState);
    const useBoundStoreWithEqualityFn = /* @__PURE__ */ __name((selector, equalityFn = defaultEqualityFn) => useStoreWithEqualityFn(api, selector, equalityFn), "useBoundStoreWithEqualityFn");
    Object.assign(useBoundStoreWithEqualityFn, api);
    return useBoundStoreWithEqualityFn;
  }, "createWithEqualityFnImpl");
  var createWithEqualityFn = /* @__PURE__ */ __name((createState, defaultEqualityFn) => createState ? createWithEqualityFnImpl(createState, defaultEqualityFn) : createWithEqualityFnImpl, "createWithEqualityFn");

  // ../boardzilla-core/node_modules/zustand/esm/shallow.mjs
  function shallow$1(objA, objB) {
    if (Object.is(objA, objB)) {
      return true;
    }
    if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
      return false;
    }
    if (objA instanceof Map && objB instanceof Map) {
      if (objA.size !== objB.size)
        return false;
      for (const [key, value] of objA) {
        if (!Object.is(value, objB.get(key))) {
          return false;
        }
      }
      return true;
    }
    if (objA instanceof Set && objB instanceof Set) {
      if (objA.size !== objB.size)
        return false;
      for (const value of objA) {
        if (!objB.has(value)) {
          return false;
        }
      }
      return true;
    }
    const keysA = Object.keys(objA);
    if (keysA.length !== Object.keys(objB).length) {
      return false;
    }
    for (let i = 0; i < keysA.length; i++) {
      if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }
    return true;
  }
  __name(shallow$1, "shallow$1");

  // ../boardzilla-core/ui/Main.tsx
  var import_react56 = __toESM(require_react());

  // ../boardzilla-core/ui/game/Game.tsx
  var import_react4 = __toESM(require_react());

  // ../boardzilla-core/ui/game/components/Element.tsx
  var import_react2 = __toESM(require_react());
  var import_classnames = __toESM(require_classnames());
  var import_react_draggable = __toESM(require_cjs());

  // ../boardzilla-core/game/board/element-collection.ts
  var ElementCollection = class _ElementCollection extends Array {
    static {
      __name(this, "ElementCollection");
    }
    slice(...a) {
      return super.slice(...a);
    }
    all(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._finder(GameElement, {}, className, ...finders);
      }
      return this._finder(className, {}, ...finders);
    }
    /** @internal */
    _finder(className, options, ...finders) {
      const fns = finders.map((finder) => {
        if (typeof finder === "object") {
          const attrs = finder;
          return (el) => Object.entries(attrs).every(([k1, v1]) => {
            let kvpairs = Object.entries(el);
            if ("mine" in attrs) {
              if (!el._ctx.player)
                throw Error('Using "mine" in a non-player context');
              kvpairs = kvpairs.concat([["mine", el.mine]]);
            }
            if ("empty" in attrs) {
              kvpairs = kvpairs.concat([["empty", el.isEmpty()]]);
            }
            return kvpairs.find(([k2, v2]) => k1 === k2 && v1 === v2);
          });
        }
        if (typeof finder === "string") {
          const name = finder;
          return (el) => el.name === name;
        }
        return finder;
      });
      const coll = new _ElementCollection();
      const finderFn = /* @__PURE__ */ __name((el, order) => {
        if (el instanceof className && fns.every((fn) => fn(el))) {
          if (order === "asc") {
            coll.push(el);
          } else {
            coll.unshift(el);
          }
        }
        if (options.limit !== void 0) {
          coll.push(...el._t.children._finder(className, { limit: options.limit - coll.length, order: options.order }, ...finders));
        } else {
          coll.push(...el._t.children._finder(className, {}, ...finders));
        }
      }, "finderFn");
      if (options.order === "desc") {
        for (let e = this.length - 1; e >= 0; e--) {
          const el = this[e];
          if (options.limit !== void 0 && coll.length >= options.limit)
            break;
          finderFn(el, "desc");
        }
      } else {
        for (const el of this) {
          if (options.limit !== void 0 && coll.length >= options.limit)
            break;
          finderFn(el, "asc");
        }
        ;
      }
      return coll;
    }
    first(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._finder(GameElement, { limit: 1 }, className, ...finders)[0];
      }
      return this._finder(className, { limit: 1 }, ...finders)[0];
    }
    firstN(n, className, ...finders) {
      if (typeof n !== "number")
        throw Error("first argument must be number of matches");
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._finder(GameElement, { limit: n }, className, ...finders);
      }
      return this._finder(className, { limit: n }, ...finders);
    }
    last(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._finder(GameElement, { limit: 1, order: "desc" }, className, ...finders)[0];
      }
      return this._finder(className, { limit: 1, order: "desc" }, ...finders)[0];
    }
    lastN(n, className, ...finders) {
      if (typeof n !== "number")
        throw Error("first argument must be number of matches");
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._finder(GameElement, { limit: n, order: "desc" }, className, ...finders);
      }
      return this._finder(className, { limit: n, order: "desc" }, ...finders);
    }
    top(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._finder(GameElement, { limit: 1 }, className, ...finders)[0];
      }
      return this._finder(className, { limit: 1 }, ...finders)[0];
    }
    topN(n, className, ...finders) {
      if (typeof n !== "number")
        throw Error("first argument must be number of matches");
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._finder(GameElement, { limit: n }, className, ...finders);
      }
      return this._finder(className, { limit: n }, ...finders);
    }
    bottom(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._finder(GameElement, { limit: 1, order: "desc" }, className, ...finders)[0];
      }
      return this._finder(className, { limit: 1, order: "desc" }, ...finders)[0];
    }
    bottomN(n, className, ...finders) {
      if (typeof n !== "number")
        throw Error("first argument must be number of matches");
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._finder(GameElement, { limit: n, order: "desc" }, className, ...finders);
      }
      return this._finder(className, { limit: n, order: "desc" }, ...finders);
    }
    /**
     * Sorts this collection by some {@link Sorter}.
     * @category Structure
     */
    sortBy(key, direction) {
      const rank = /* @__PURE__ */ __name((e, k) => typeof k === "function" ? k(e) : e[k], "rank");
      const [up, down] = direction === "desc" ? [-1, 1] : [1, -1];
      return this.sort((a, b) => {
        const keys2 = key instanceof Array ? key : [key];
        for (const k of keys2) {
          const r1 = rank(a, k);
          const r2 = rank(b, k);
          if (r1 > r2)
            return up;
          if (r1 < r2)
            return down;
        }
        return 0;
      });
    }
    /**
     * Returns a copy of this collection sorted by some {@link Sorter}.
     * @category Structure
     */
    sortedBy(key, direction = "asc") {
      return this.slice(0, this.length).sortBy(key, direction);
    }
    /**
     * Returns the sum of all elements in this collection measured by a provided key
     * @category Queries
     *
     * @example
     * deck.create(Card, '2', { pips: 2 });
     * deck.create(Card, '3', { pips: 3 });
     * deck.all(Card).sum('pips'); // => 5
     */
    sum(key) {
      return this.reduce((sum, n) => sum + (typeof key === "function" ? key(n) : n[key]), 0);
    }
    /**
     * Returns the element in this collection with the highest value of the
     * provided key(s).
     * @category Queries
     *
     * @param attributes - any number of {@link Sorter | Sorter's} used for
     * comparing. If multiple are provided, subsequent ones are used to break ties
     * on earlier ones.
     *
     * @example
     * army.create(Soldier, 'a', { strength: 2, initiative: 3 });
     * army.create(Soldier, 'b', { strength: 3, initiative: 1 });
     * army.create(Soldier, 'c', { strength: 3, initiative: 2 });
     * army.all(Solider).withHighest('strength', 'initiative'); // => Soldier 'c'
     */
    withHighest(...attributes) {
      return this.sortedBy(attributes, "desc")[0];
    }
    /**
     * Returns the element in this collection with the lowest value of the
     * provided key(s).
     * @category Queries
     *
     * @param attributes - any number of {@link Sorter | Sorter's} used for
     * comparing. If multiple are provided, subsequent ones are used to break ties
     * on earlier ones.
     *
     * @example
     * army.create(Soldier, 'a', { strength: 2, initiative: 3 });
     * army.create(Soldier, 'b', { strength: 3, initiative: 1 });
     * army.create(Soldier, 'c', { strength: 2, initiative: 2 });
     * army.all(Solider).withLowest('strength', 'initiative'); // => Soldier 'c'
     */
    withLowest(...attributes) {
      return this.sortedBy(attributes, "asc")[0];
    }
    max(key) {
      const el = this.sortedBy(key, "desc")[0];
      return el && el[key];
    }
    min(key) {
      const el = this.sortedBy(key, "asc")[0];
      return el && el[key];
    }
    areAllEqual(key) {
      if (this.length === 0)
        return true;
      return this.every((el) => el[key] === this[0][key]);
    }
    remove() {
      for (const el of this) {
        if (!(el instanceof Piece))
          throw Error("cannot move Space");
        el.remove();
      }
    }
    putInto(to, options) {
      for (const el of this) {
        if (!(el instanceof Piece))
          throw Error("cannot move Space");
        el.putInto(to, options);
      }
    }
    // UI
    layout(applyTo, attributes) {
      for (const el of this)
        el.layout(applyTo, attributes);
    }
    appearance(appearance) {
      for (const el of this)
        el.appearance(appearance);
    }
  };

  // ../boardzilla-core/game/player/player.ts
  var Player = class {
    static {
      __name(this, "Player");
    }
    toJSON() {
      let { ...attrs } = this;
      attrs = Object.fromEntries(Object.entries(attrs).filter(
        ([, value]) => typeof value !== "function"
      ));
      return attrs;
    }
  };

  // ../boardzilla-core/game/player/collection.ts
  var PlayerCollection = class extends Array {
    static {
      __name(this, "PlayerCollection");
    }
    addPlayer(attrs) {
      const player = new this.className(attrs);
      Object.assign(player, attrs);
      this.push(player);
    }
    atPosition(position) {
      return this.find((p) => p.position === position);
    }
    setTurnMode(mode = true) {
      this.currentPosition = mode ? this.currentPosition || 1 : void 0;
    }
    current() {
      if (this.currentPosition === void 0)
        throw Error("Calling players.current() when not taking turns");
      return this.atPosition(this.currentPosition);
    }
    notCurrent() {
      return this.filter((p) => p.position !== this.currentPosition);
    }
    inPositionOrder() {
      return this.sort((p1, p2) => p1.position > p2.position ? 1 : -1);
    }
    setCurrent(player) {
      if (typeof player !== "number")
        player = player.position;
      if (!player || player > this.length || player < 1) {
        throw Error(`No such player ${player}`);
      }
      this.currentPosition = player;
      return this.current();
    }
    next() {
      if (this.currentPosition === void 0) {
        this.currentPosition = this[0].position;
      } else {
        this.currentPosition = this.after(this.currentPosition).position;
      }
      return this.current();
    }
    after(player) {
      return this[this.turnOrderOf(player) % this.length];
    }
    // Turn order of player, starting with 1. Note that this is not the same as player position and can change
    turnOrderOf(player) {
      if (typeof player !== "number")
        player = player.position;
      const index = this.findIndex((p) => p.position === player);
      if (index === -1)
        throw Error("No such player");
      return index + 1;
    }
    sortBy(key, direction) {
      const rank = /* @__PURE__ */ __name((p, k) => typeof k === "function" ? k(p) : p[k], "rank");
      const [up, down] = direction === "desc" ? [-1, 1] : [1, -1];
      return this.sort((a, b) => {
        const keys2 = key instanceof Array ? key : [key];
        for (const k of keys2) {
          const r1 = rank(a, k);
          const r2 = rank(b, k);
          if (r1 > r2)
            return up;
          if (r1 < r2)
            return down;
        }
        return 0;
      });
    }
    sortedBy(key, direction = "asc") {
      return this.slice(0, this.length).sortBy(key, direction);
    }
    sum(key) {
      return this.reduce((sum, n) => sum + (typeof key === "function" ? key(n) : n[key]), 0);
    }
    withHighest(...attributes) {
      return this.sortedBy(attributes, "desc")[0];
    }
    withLowest(...attributes) {
      return this.sortedBy(attributes, "asc")[0];
    }
    shuffle() {
      shuffleArray(this, this.game?.random || Math.random);
    }
    max(key) {
      return this.sortedBy(key, "desc")[0][key];
    }
    min(key) {
      return this.sortedBy(key, "asc")[0][key];
    }
    fromJSON(players) {
      this.splice(0, this.length);
      this.currentPosition = void 0;
      for (const p of players) {
        this.addPlayer(p);
      }
    }
  };

  // ../boardzilla-core/game/action/utils.ts
  var humanizeArg = /* @__PURE__ */ __name((arg) => {
    if (arg instanceof Player)
      return arg.name;
    if (arg instanceof GameElement)
      return arg.name || `$el[${arg.branch()}]`;
    return arg.toString();
  }, "humanizeArg");
  var serializeArg = /* @__PURE__ */ __name((arg, forPlayer = true) => {
    if (arg instanceof Array)
      return arg.map((a) => serializeSingleArg(a, forPlayer));
    return serializeSingleArg(arg, forPlayer);
  }, "serializeArg");
  var serializeSingleArg = /* @__PURE__ */ __name((arg, forPlayer = true) => {
    if (arg instanceof Player)
      return `$p[${arg.position}]`;
    if (arg instanceof GameElement)
      return forPlayer ? `$el[${arg.branch()}]` : `$eid[${arg._t.id}]`;
    return arg;
  }, "serializeSingleArg");
  var deserializeArg = /* @__PURE__ */ __name((arg, game) => {
    if (arg instanceof Array)
      return arg.map((a) => deserializeSingleArg(a, game));
    return deserializeSingleArg(arg, game);
  }, "deserializeArg");
  var deserializeSingleArg = /* @__PURE__ */ __name((arg, game) => {
    if (typeof arg === "number" || typeof arg === "boolean")
      return arg;
    let deser;
    if (arg.slice(0, 3) === "$p[") {
      deser = game.players.atPosition(parseInt(arg.slice(3, -1)));
    } else if (arg.slice(0, 4) === "$el[") {
      deser = game.board.atBranch(arg.slice(4, -1));
    } else if (arg.slice(0, 5) === "$eid[") {
      deser = game.board.atID(parseInt(arg.slice(5, -1)));
    } else {
      return arg;
    }
    if (!deser)
      debugger;
    if (!deser)
      throw Error(`Unable to find arg: ${arg}`);
    return deser;
  }, "deserializeSingleArg");
  var serializeObject = /* @__PURE__ */ __name((obj, forPlayer = true) => {
    return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, serialize(v, forPlayer)]));
  }, "serializeObject");
  var deserializeObject = /* @__PURE__ */ __name((obj, game) => {
    return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, deserialize(v, game)]));
  }, "deserializeObject");
  var serialize = /* @__PURE__ */ __name((arg, forPlayer = true) => {
    if (arg === void 0)
      return void 0;
    if (arg === null)
      return null;
    if (arg instanceof Array)
      return arg.map((a) => serialize(a, forPlayer));
    if (arg instanceof Player || arg instanceof GameElement)
      return serializeSingleArg(arg, forPlayer);
    if (typeof arg === "object")
      return serializeObject(arg, forPlayer);
    if (typeof arg === "number" || typeof arg === "string" || typeof arg === "boolean")
      return serializeSingleArg(arg, forPlayer);
    throw Error(`unable to serialize ${arg}`);
  }, "serialize");
  var deserialize = /* @__PURE__ */ __name((arg, game) => {
    if (arg === void 0)
      return void 0;
    if (arg === null)
      return null;
    if (arg instanceof Array)
      return arg.map((a) => deserialize(a, game));
    if (typeof arg === "object")
      return deserializeObject(arg, game);
    if (typeof arg === "number" || typeof arg === "string" || typeof arg === "boolean")
      return deserializeSingleArg(arg, game);
    throw Error(`unable to deserialize ${arg}`);
  }, "deserialize");
  var escapeArgument = /* @__PURE__ */ __name((arg) => {
    if (arg instanceof Array) {
      const escapees = arg.map(escapeArgument);
      return escapees.slice(0, -1).join(", ") + (escapees.length > 1 ? " and " : "") + (escapees[escapees.length - 1] || "");
    }
    if (typeof arg === "object")
      return `[[${serializeSingleArg(arg)}|${humanizeArg(arg)}]]`;
    return String(arg);
  }, "escapeArgument");
  var combinations = /* @__PURE__ */ __name((set, min, max) => {
    const combos = [];
    const poss = /* @__PURE__ */ __name((curr, i) => {
      if (set.length - i < min - curr.length)
        return;
      if (curr.length >= min)
        combos.push(curr);
      if (curr.length < max) {
        for (let j = i; j !== set.length; j++) {
          poss(curr.concat([set[j]]), j + 1);
        }
      }
    }, "poss");
    poss([], 0);
    return combos;
  }, "combinations");

  // ../boardzilla-core/game/utils.ts
  var isA = /* @__PURE__ */ __name((el, el2) => el instanceof el2, "isA");
  var shuffleArray = /* @__PURE__ */ __name((array, random3) => {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(random3() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }, "shuffleArray");
  var times = /* @__PURE__ */ __name((n, fn) => Array.from(Array(n)).map((_, i) => fn(i + 1)), "times");
  var range = /* @__PURE__ */ __name((min, max, step = 1) => times(Math.floor((max - min) / step) + 1, (i) => (i - 1) * step + min), "range");

  // ../boardzilla-core/game/board/utils.ts
  function translate(original, transform) {
    return shift(
      scale(original, { x: transform.width / 100, y: transform.height / 100 }),
      { x: transform.left, y: transform.top }
    );
  }
  __name(translate, "translate");
  function scale(a, v) {
    return {
      left: a.left * v.x,
      top: a.top * v.y,
      width: a.width * v.x,
      height: a.height * v.y
    };
  }
  __name(scale, "scale");
  function shift(a, v) {
    return {
      left: a.left + v.x,
      top: a.top + v.y,
      width: a.width,
      height: a.height
    };
  }
  __name(shift, "shift");
  function cellSizeForArea(rows, columns, area, gap, offsetColumn, offsetRow) {
    let width;
    let height;
    if (offsetColumn === void 0) {
      width = (area.width - (gap.x || 0) * (columns - 1)) / columns;
      height = (area.height - (gap.y || 0) * (rows - 1)) / rows;
    } else {
      width = area.width / ((rows - 1) * Math.abs(offsetColumn.x / 100) + 1 + (columns - 1) * Math.abs(offsetRow.x / 100));
      height = area.height / ((columns - 1) * Math.abs(offsetRow.y / 100) + 1 + (rows - 1) * Math.abs(offsetColumn.y / 100));
    }
    return { width, height };
  }
  __name(cellSizeForArea, "cellSizeForArea");

  // ../boardzilla-core/game/board/element.ts
  var import_random_seed = __toESM(require_random_seed());
  var GameElement = class _GameElement {
    /**
     * Do not use the constructor directly. Instead Call {@link
     * GameElement#create} or {@link GameElement#createMany} on the element in
     * which you want to create a new element.
     * @category Structure
     */
    constructor(ctx) {
      /**
       * UI
       */
      /** @internal */
      this._ui = {
        layouts: [],
        appearance: {}
      };
      this._ctx = ctx;
      if (!ctx.top) {
        this._ctx.top = this;
        this._ctx.sequence = 0;
      }
      this._t = {
        children: new ElementCollection(),
        id: this._ctx.sequence++,
        setId: (id) => {
          if (id !== void 0) {
            this._t.id = id;
            if (this._ctx.sequence < id)
              this._ctx.sequence = id;
          }
        }
      };
      Object.getPrototypeOf(this).top = this.first;
      Object.getPrototypeOf(this).topN = this.firstN;
      Object.getPrototypeOf(this).bottom = this.last;
      Object.getPrototypeOf(this).bottomN = this.lastN;
    }
    static {
      __name(this, "GameElement");
    }
    static {
      /** @internal */
      this.isGameElement = true;
    }
    static {
      /** @internal */
      this.hiddenAttributes = ["name"];
    }
    all(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._t.children.all(_GameElement, className, ...finders);
      }
      return this._t.children.all(className, ...finders);
    }
    first(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._t.children._finder(_GameElement, { limit: 1 }, className, ...finders)[0];
      }
      return this._t.children.all(className, ...finders)[0];
    }
    firstN(n, className, ...finders) {
      if (typeof n !== "number")
        throw Error("first argument must be number of matches");
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._t.children._finder(_GameElement, { limit: n }, className, ...finders);
      }
      return this._t.children._finder(className, { limit: n }, ...finders);
    }
    last(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._t.children._finder(_GameElement, { limit: 1, order: "desc" }, className, ...finders)[0];
      }
      return this._t.children._finder(className, { limit: 1, order: "desc" }, ...finders)[0];
    }
    lastN(n, className, ...finders) {
      if (typeof n !== "number")
        throw Error("first argument must be number of matches");
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._t.children._finder(_GameElement, { limit: n, order: "desc" }, className, ...finders);
      }
      return this._t.children._finder(className, { limit: n, order: "desc" }, ...finders);
    }
    top(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._t.children._finder(_GameElement, { limit: 1 }, className, ...finders)[0];
      }
      return this._t.children.all(className, ...finders)[0];
    }
    topN(n, className, ...finders) {
      if (typeof n !== "number")
        throw Error("first argument must be number of matches");
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._t.children._finder(_GameElement, { limit: n }, className, ...finders);
      }
      return this._t.children._finder(className, { limit: n }, ...finders);
    }
    bottom(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._t.children._finder(_GameElement, { limit: 1, order: "desc" }, className, ...finders)[0];
      }
      return this._t.children._finder(className, { limit: 1, order: "desc" }, ...finders)[0];
    }
    bottomN(n, className, ...finders) {
      if (typeof n !== "number")
        throw Error("first argument must be number of matches");
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return this._t.children._finder(_GameElement, { limit: n, order: "desc" }, className, ...finders);
      }
      return this._t.children._finder(className, { limit: n, order: "desc" }, ...finders);
    }
    others(className, ...finders) {
      if (!this._t.parent)
        new ElementCollection();
      if (typeof className !== "function" || !("isGameElement" in className)) {
        const otherFinder2 = this._otherFinder([className, ...finders]);
        return this._t.parent._t.children._finder(_GameElement, {}, otherFinder2, className, ...finders);
      }
      const otherFinder = this._otherFinder(finders);
      return this._t.parent._t.children._finder(className, {}, otherFinder, ...finders);
    }
    has(className, ...finders) {
      if (typeof className !== "function" || !("isGameElement" in className)) {
        return !!this.first(className, ...finders);
      } else {
        return !!this.first(className, ...finders);
      }
    }
    /** @internal */
    _otherFinder(finders) {
      return (el) => el !== this;
    }
    /**
     * Set this class to use a different ordering style.
     * @category Structure
     * @param order - ordering style
     * - "normal": Elements placed into this element are put at the end of the list (default)
     * - "stacking": Elements placed into this element are put at the beginning of the list. This is prefered for elements that stack. E.g. when placing a card into a stack of cards, if `order` is set to `stacking` the {@link first} method will return the card just placed, i.e. it will be considered to be on the top of the stack
     */
    setOrder(order) {
      this._t.order = order;
    }
    /**
     * Returns this elements parent.
     * @category Queries
     * @param className - If provided, searches up the parent tree to find the first
     * matching element. E.g. if a Token is placed on a Card in a players
     * Tableau. calling `token.container(Tableau)` can be used to find the
     * grandparent.
     */
    container(className) {
      if (!className)
        return this._t.parent;
      if (this._t.parent)
        return isA(this._t.parent, className) ? this._t.parent : this._t.parent.container(className);
    }
    /**
     * Returns whether this element has any elements placed within it.
     * @category Structure
     */
    isEmpty() {
      return !this._t.children.length;
    }
    /**
     * Sorts the elements directly contained within this element by some {@link Sorter}.
     * @category Structure
     */
    sortBy(key, direction) {
      return this._t.children.sortBy(key, direction);
    }
    /**
     * Re-orders the elements directly contained within this element randomly.
     * @category Structure
     */
    shuffle() {
      shuffleArray(this._t.children, this._ctx.game?.random || Math.random);
    }
    /**
     * Returns the player that owns this element, or the first element that
     * contains this element searching up through the parent hierarchy. This is
     * related to, but different than {@link player}. E.g. if a common card is in
     * a player's hand, typically the `hand.player` will be assigned to that
     * player but the card does not have a `player`. The card.owner() will return
     * the player in whose hand the card is placed. Similarly, if an army is in
     * another player's country, the `army.owner()` will be the player controlling
     * that army (i.e. same as `army.player`) rather than the player who owns the
     * country in which it's placed.
     * @category Structure
     */
    owner() {
      return this.player !== void 0 ? this.player : this._t.parent?.player;
    }
    /**
     * Returns whether this element belongs to the "current" player. A player is
     * considered the current player if this is called in the context of an action
     * taken by a given player, or if this is called from a given player's view of
     * the board. It is an error to call this method when not in a player
     * context. When querying for elements using {@link ElementFinder} such as
     * {@link all} and {@link first}, {@link mine} is available as a search key
     * that accepts a value of true/false
     * @category Queries
     */
    get mine() {
      if (!this._ctx.player)
        return false;
      return this.owner() === this._ctx.player;
    }
    /**
     * Show this element to all players
     * @category Visibility
     */
    showToAll() {
      delete this._visible;
    }
    /**
     * Show this element only to the given player
     * @category Visibility
     */
    showOnlyTo(player) {
      if (typeof player !== "number")
        player = player.position;
      this._visible = {
        default: false,
        except: [player]
      };
    }
    /**
     * Show this element to the given players without changing it's visibility to
     * any other players.
     * @category Visibility
     */
    showTo(...player) {
      if (typeof player[0] !== "number")
        player = player.map((p) => p.position);
      if (this._visible === void 0)
        return;
      if (this._visible.default) {
        if (!this._visible.except)
          return;
        this._visible.except = this._visible.except.filter((i) => !player.includes(i));
      } else {
        this._visible.except = Array.from(/* @__PURE__ */ new Set([...this._visible.except instanceof Array ? this._visible.except : [], ...player]));
      }
    }
    /**
     * Hide this element only to the given player
     * @category Visibility
     */
    hideFromAll() {
      this._visible = { default: false };
    }
    /**
     * Hide this element from the given players without changing it's visibility to
     * any other players.
     * @category Visibility
     */
    hideFrom(...player) {
      if (typeof player[0] !== "number")
        player = player.map((p) => p.position);
      if (this._visible?.default === false && !this._visible.except)
        return;
      if (this._visible === void 0 || this._visible.default === true) {
        this._visible = {
          default: true,
          except: Array.from(/* @__PURE__ */ new Set([...this._visible?.except instanceof Array ? this._visible.except : [], ...player]))
        };
      } else {
        if (!this._visible.except)
          return;
        this._visible.except = this._visible.except.filter((i) => !player.includes(i));
      }
    }
    /**
     * Returns whether this element is visible to the given player
     * @category Visibility
     */
    isVisibleTo(player) {
      if (typeof player !== "number")
        player = player.position;
      if (this._visible === void 0)
        return true;
      if (this._visible.default) {
        return !this._visible.except || !this._visible.except.includes(player);
      } else {
        return this._visible.except?.includes(player) || false;
      }
    }
    /**
     * Returns whether this element is visible to the current player. Can only be
     * called when in a player context, during an action taken by a player or
     * while the board is viewed by a given player.
     * @category Visibility
     */
    isVisible() {
      if (!this._ctx.player)
        throw Error("Cannot use isVisible outside of a player context");
      return this.isVisibleTo(this._ctx.player.position);
    }
    /**
     * Provide list of attributes that are obscured when instances of this element
     * class are hidden. E.g. In a game with multiple card decks with different
     * backs, the identity of the card is hiddem, but the deck it belongs to is
     * not. In this case, Card may have attributes: suit; pip; deck and calling:
     * `Card.hide('suit', 'pip')` will cause suit and pip to be invisible when the
     * card is flipped, while still revealing which deck it is.
     * @category Visibility
     */
    static hide(...attrs) {
      this.hiddenAttributes = attrs;
    }
    // unused?
    /** @internal */
    hidden() {
      return Object.create(
        Object.getPrototypeOf(this),
        Object.fromEntries(
          Object.entries(
            Object.getOwnPropertyDescriptors(this)
          ).filter(
            ([attr]) => !this.constructor.hiddenAttributes.includes(attr)
          )
        )
      );
    }
    /**
     * Create an element inside this element. This can only be called during the
     * game setup (see {@link createGame}. Any game elements that are required
     * must be created before the game starts. Elements that only appear later in
     * the game can be created inside the {@link Board#pile} or made invisible.
     * @category Structure
     *
     * @param className - Class to create. This class must be included in the `elementClasses` in {@link createGame}.
     * @param name - Sets {@link GameElement#name | name}
     * @param attributes - Sets any attributes of the class that are defined in
     * your own class that extend {@link Space}, {@link Piece}, or {@link
     * Board}. Can also include {@link player}.
     *
     * @example
     * deck.create(Card, 'ace-of-hearts', { suit: 'H', value: '1' });
     */
    create(className, name, attributes) {
      if (this._ctx.game?.phase === "started")
        throw Error("Board elements cannot be created once game has started.");
      const el = this.createElement(className, name, attributes);
      el._t.parent = this;
      if (this._t.order === "stacking") {
        this._t.children.unshift(el);
      } else {
        this._t.children.push(el);
      }
      return el;
    }
    /**
     * Create n identical elements inside this element. This can only be called
     * during the game setup (see {@link createGame}. Any game elements that are
     * required must be created before the game starts. Elements that only appear
     * later in the game can be created inside the {@link Board#pile} or made
     * invisible.
     * @category Structure
     *
     * @param n - Number to create
     * @param className - Class to create. This class must be included in the `elementClasses` in {@link createGame}.
     * @param name - Sets {@link GameElement#name | name}
     * @param attributes - Sets any attributes of the class that are defined in
     * your own class that extend {@link Space}, {@link Piece}, or {@link
     * Board}. Can also include {@link player}.
     */
    createMany(n, className, name, attributes) {
      return new ElementCollection(...times(n, () => this.create(className, name, attributes)));
    }
    /**
     * Base element creation method
     * @internal
     */
    createElement(className, name, attrs) {
      if (!this._ctx.classRegistry.includes(className)) {
        const classNameBasedOnName = this._ctx.classRegistry.find((c) => c.name === className.name);
        if (!classNameBasedOnName)
          throw Error(`No class found ${className.name}. Declare any classes in \`game.defineBoard\``);
        className = classNameBasedOnName;
      }
      const el = new className(this._ctx);
      el.board = this.board;
      el.name = name;
      Object.assign(el, attrs);
      return el;
    }
    /**
     * Returns a string identifying the tree position of the element suitable for
     * anonymous reference
     * @internal
     */
    branch() {
      const branches = [];
      let node = this;
      while (node._t.parent) {
        branches.unshift(node._t.parent._t.children.indexOf(node));
        node = node._t.parent;
      }
      branches.unshift(this._ctx.removed._t.children.indexOf(node) >= 0 ? 1 : 0);
      return branches.join("/");
    }
    /**
     * Returns the element at the given position returned by {@link branch}
     * @internal
     */
    atBranch(b) {
      let branch = b.split("/");
      let index = parseInt(branch[0]);
      let node = index === 0 ? this._ctx.top : this._ctx.removed._t.children[index - 1];
      branch.shift();
      while (branch[0] !== void 0) {
        node = node._t.children[parseInt(branch[0])];
        branch.shift();
      }
      return node;
    }
    /**
     * Returns the element for the given id
     * @internal
     */
    atID(id) {
      return this._t.children.find((c) => c._t.id === id) || this._t.children.find((c) => c.atID(id))?.atID(id);
    }
    /**
     * Whether this element has the given element in its parent hierarchy
     * @category Structure
     */
    isDescendantOf(el) {
      return this._t.parent === el || !!this._t.parent?.isDescendantOf(el);
    }
    /**
     * JSON representation
     * @param seenBy - optional player position viewing the board
     * @internal
     */
    toJSON(seenBy) {
      let attrs;
      ({ ...attrs } = this);
      for (const attr of ["_t", "_ctx", "_ui", "board", "pile", "_eventHandlers", "players", "finish", "message"])
        delete attrs[attr];
      attrs = Object.fromEntries(Object.entries(attrs).filter(
        ([, value]) => typeof value !== "function"
      ));
      if (seenBy !== void 0 && !this.isVisibleTo(seenBy)) {
        attrs = Object.fromEntries(Object.entries(attrs).filter(
          ([attr]) => !this.constructor.hiddenAttributes.includes(attr)
        ));
      }
      const json = Object.assign(serializeObject(attrs, seenBy !== void 0), { className: this.constructor.name });
      if (seenBy === void 0 || "isSpace" in this)
        json._id = this._t.id;
      if (this._t.children.length)
        json.children = Array.from(this._t.children.map((c) => c.toJSON(seenBy)));
      if (this._t.order)
        json.order = this._t.order;
      if (this._t.was)
        json.was = this._t.was;
      return json;
    }
    /** @internal */
    createChildrenFromJSON(childrenJSON, branch) {
      const spaces = this._t.children.filter((c) => "isSpace" in c);
      this._t.children = new ElementCollection();
      for (let i = 0; i !== childrenJSON.length; i++) {
        const json = childrenJSON[i];
        let { className, children, was, _id, name, order, ...rest } = json;
        if (this._ctx.game)
          rest = deserializeObject({ ...rest }, this._ctx.game);
        let child = void 0;
        if (_id !== void 0) {
          child = spaces.find((c) => c._t.id === _id);
          if (child) {
            for (const key of Object.keys(child)) {
              if (!["_ctx", "_t", "_ui", "_eventHandlers", "board", "name"].includes(key) && !(key in rest))
                rest[key] = void 0;
            }
            Object.assign(child, rest);
          }
        }
        if (!child) {
          const elementClass = this._ctx.classRegistry.find((c) => c.name === className);
          if (!elementClass)
            throw Error(`No class found ${className}. Declare any classes in \`game.defineBoard\``);
          child = this.createElement(elementClass, name, rest);
          child._t.setId(_id);
          child._t.parent = this;
          child._t.order = order;
          child._t.was = was;
          if (this._ctx.trackMovement)
            child._t.was = branch + "/" + i;
        }
        this._t.children.push(child);
        child.createChildrenFromJSON(children || [], branch + "/" + i);
      }
      ;
    }
    /** @internal */
    resetUI() {
      this._ui.layouts = [{
        applyTo: _GameElement,
        attributes: {
          margin: 0,
          scaling: "none",
          alignment: "center",
          gap: 0,
          direction: "square"
        }
      }];
      this._ui.appearance = {};
      this._ui.computedStyle = void 0;
      for (const child of this._t.children)
        child.resetUI();
    }
    /**
     * Viewport relative to a square perfectly containing the board. The `left`
     * and `top` values are from 0-100. The x and y values in this method are on
     * the same scale, unlike {@link relativeTransformToBoard}.
     * @category UI
     */
    absoluteTransform() {
      return this.board._ui.frame ? translate(this.relativeTransformToBoard(), this.board._ui.frame) : this.relativeTransformToBoard();
    }
    /**
     * Viewport relative to the board. The `left` and `top` values are percentages
     * from 0-100, where `left: 100` is the right edge of the board and `top: 100`
     * the bottom. The x and y values in this method are therefore not necessarily
     * on the same scale, unlike {@link absoluteTransform}.
     * @category UI
     */
    relativeTransformToBoard() {
      let transform = this._ui.computedStyle || { left: 0, top: 0, width: 100, height: 100 };
      let parent = this._t.parent;
      while (parent?._ui.computedStyle) {
        transform = translate(transform, parent._ui.computedStyle);
        parent = parent._t.parent;
      }
      return transform;
    }
    /**
     * Apply a layout to some of the elements directly contained within this element
     * @category UI
     *
     * @param applyTo - Which elements this layout applies to. Provided value can be:
     * - A specific {@link GameElement}
     * - The name of an element
     * - A specific set of elements ({@link ElementCollection})
     * - A class of elements
     *
     * If multiple layout declarations would apply to the same element, only one
     * will be used. The order of specificity is as above. If a class is used and
     * mutiple apply, the more specific class will be used.
     *
     * @param {Object} attributes - A list of attributes describing the
     * layout. All units of measurement are percentages of this elements width and
     * height from 0-100, unless otherwise noted (`margin` and `gap`)
     *
     * @param {Box} attributes.area - A box defining the layout's bounds within
     * this element. If unspecified, the entire area is used, i.e. `{ left: 0,
     * top: 0, width: 100, height: 100 }`
     *
     * @param attributes.margin - Instead of providing `area`, providing a
     * `margin` defines the bounding box in terms of a margin around the edges of
     * this element. This value is an absolute percentage of the board's size so
     * that margins specified on different layouts with the same value will exactly match
     *
     * @param attributes.rows - The number of rows to allot for placing elements
     * in this layout. If a number is provided, this is fixed. If min/max values
     * are provided, the layout will allot at least `min` and up to `max` as
     * needed. If `min` is omitted, a minimum of 1 is implied. If `max` is
     * omitted, as many are used as needed. Default is `{min: 1, max: Infinity}`.
     *
     * @param attributes.columns - Columns, as per `rows`
     *
     * @param attributes.slots - If supplied, this overrides all other attributes
     * to define a set of strictly defined boxes for placing each element. Any
     * elements that exceed the number of slots provided are not displayed.
     *
     * @param attributes.size - Size alloted for each element placed in this
     * layout. Unless `scaling` is `"none"`, a `size` provided here will be used
     * only to define an aspect ratio but may scale up or down to fit as
     * needed. As such, when using any `scaling` other than `"none"`, providing an
     * `aspectRatio` instead is sufficient.
     *
     * @param attributes.aspectRatio - Aspect ratio for each element placed in
     * this layout. This value is a ratio of width over height. Elements will
     * adhere to this ratio unless they have their own specified `aspectRatio` in
     * their {@link appearance}. This value is ignored is `size` is provided.
     *
     * @param attributes.scaling - Scaling strategy for the elements placed in this layout.
     * - *none*: Elements use the `size` value and do not scale. If no `size` is provided, this behaves like `fit` (default)
     * - *fit*: elements scale up or down to fit within the area alloted without squshing
     * - *fill*: elements scale up or down to completely fill the area, squishing themselves together as needed along one dimension.
     *
     * @param attributes.gap - If provided, this places a gap between elements. If
     * scaling is 'fill', this is considered a maximum but may shrink or even
     * become negative in order to fill the area. This value is an absolute
     * percentage of the board's size so that gaps specified on different layouts
     * with the same value will exactly match
     *
     * @param attributes.alignment - If more room is provided than needed, this
     * determines how the elements will align themselves within.
     *
     * @param attributes.offsetColumn - Instead of `gap`, providing an
     * `offsetColumn`/`offsetRow` specifies that the contained elements must
     * offset one another by a specified amount as a percentage of the elements
     * size, i.e. `offsetColumn=100` is equivalent to a `gap` of 0. This allows
     * non-orthogonal grids like hex or diamond. If one of
     * `offsetColumn`/`offsetRow` is provided but not the other, the unspecified
     * one will be 90° to the one specified. Like `gap`, if `scaling` is set to
     * `fill`, these offsets may squish to fill space.
     *
     * @param attributes.offsetRow - As above
     *
     * @param attributes.direction - Specifies the direction in which elements
     * placed here should fill up the rows and columns of the layout. Rows or
     * columns will increase to their specified maximum as needed. Therefore if,
     * for example, `direction` is `"ltr"` and `columns` has no maximum, there will
     * never be a second row added. Values are:
     * - *square*: fill rows and columns equally to maintain as square a grid as possible (default)
     * - *ltr*: fill columns left to right, then rows top to bottom once maximum columns reached
     * - *rtl*: fill columns right to left, then rows top to bottom once maximum columns reached
     * - *ltr-btt*: fill columns left to right, then rows bottom to top once maximum columns reached
     * - *rtl-btt*: fill columns right to left, then rows bottom to top once maximum columns reached
     * - *ttb*: fill rows top to bottom, then columns left to right once maximum rows reached
     * - *btt*: fill rows bottom to top, then columns left to right once maximum rows reached
     * - *ttb-rtl*: fill rows top to bottom, then columns right to left once maximum rows reached
     * - *btt-rtl*: fill rows bottom to top, then columns right to left once maximum rows reached
     *
     * @param attributes.limit - If specified, no more than `limit` items will be
     * visible. This is useful for displaying e.g. decks of cards where showing
     * only 2 or 3 cards provides a deck-like appearance without needed to render
     * more cards underneath that aren't visible.
     *
     * @param attributes.haphazardly - A number specifying an amount of randomness
     * added to the layout to provide a more natural looking placement
     */
    layout(applyTo, attributes) {
      const { area, margin, size, aspectRatio, scaling, gap, offsetColumn, offsetRow } = attributes;
      if (this._ui.layouts.length === 0)
        this.resetUI();
      if (area && margin)
        console.warn("Both `area` and `margin` supplied in layout. `margin` is ignored");
      if (size && aspectRatio)
        console.warn("Both `size` and `aspectRatio` supplied in layout. `aspectRatio` is ignored");
      if (gap && (offsetColumn || offsetRow))
        console.warn("Both `gap` and `offset` supplied in layout. `gap` is ignored");
      if (!size) {
        if (scaling === "none" && aspectRatio)
          throw Error("Layout `scaling` must be 'fit' or 'fill' for `aspectRatio` and no `size`");
        if (!scaling)
          attributes.scaling = "fit";
      }
      if (!margin && !area)
        attributes.margin = 0;
      this._ui.layouts.push({ applyTo, attributes: Object.assign({ scaling: "none", alignment: "center", direction: "square" }, attributes) });
      this._ui.layouts.sort((a, b) => {
        let aVal = 0, bVal = 0;
        if (a.applyTo instanceof _GameElement)
          aVal = 3;
        if (b.applyTo instanceof _GameElement)
          bVal = 3;
        if (typeof a.applyTo === "string")
          aVal = 2;
        if (typeof b.applyTo === "string")
          bVal = 2;
        if (a.applyTo instanceof Array)
          aVal = 1;
        if (b.applyTo instanceof Array)
          bVal = 1;
        if (aVal !== 0 || bVal !== 0)
          return aVal - bVal;
        const ac = a.applyTo;
        const bc = b.applyTo;
        return ac.prototype instanceof bc ? 1 : bc.prototype instanceof ac ? -1 : 0;
      });
      for (const child of this._t.children)
        child._ui.computedStyle = void 0;
    }
    /**
     * recalc all elements computedStyle
     * @category UI
     * @internal
     */
    applyLayouts(force = false) {
      if (this._ui.appearance.render === false)
        return;
      if (!this._ui.computedStyle) {
        force = true;
        this._ui.computedStyle = { left: 0, top: 0, width: 100, height: 100 };
      }
      const layoutItems = this.getLayoutItems();
      const absoluteTransform = this.absoluteTransform();
      for (let l = this._ui.layouts.length - 1; l >= 0; l--) {
        const { attributes } = this._ui.layouts[l];
        let children = layoutItems[l];
        if (!children)
          continue;
        let cellBox;
        let cell;
        const { slots, direction, gap, scaling, alignment, limit } = attributes;
        let { size, aspectRatio, offsetColumn, offsetRow, haphazardly } = attributes;
        const area = this.getArea(attributes);
        if (limit)
          children = children.slice(0, limit);
        if (slots) {
          cellBox = /* @__PURE__ */ __name((n) => n < slots.length ? slots[n] : void 0, "cellBox");
        } else {
          const minRows = typeof attributes.rows === "number" ? attributes.rows : attributes.rows?.min || 1;
          const minColumns = typeof attributes.columns === "number" ? attributes.columns : attributes.columns?.min || 1;
          const maxRows = typeof attributes.rows === "number" ? attributes.rows : attributes.rows?.max || Infinity;
          const maxColumns = typeof attributes.columns === "number" ? attributes.columns : attributes.columns?.max || Infinity;
          let rows = minRows;
          let columns = minColumns;
          const alignOffset = {
            left: alignment.includes("left") ? 0 : alignment.includes("right") ? 1 : 0.5,
            top: alignment.includes("top") ? 0 : alignment.includes("bottom") ? 1 : 0.5
          };
          if (rows * columns < children.length) {
            if (["ltr", "ltr-btt", "rtl", "rtl-btt"].includes(direction)) {
              columns = Math.max(columns, Math.min(maxColumns, Math.ceil(children.length / rows)));
              rows = Math.max(rows, Math.min(maxRows, Math.ceil(children.length / columns)));
            }
            if (["ttb", "btt", "ttb-rtl", "btt-rtl"].includes(direction)) {
              rows = Math.max(rows, Math.min(maxRows, Math.ceil(children.length / columns)));
              columns = Math.max(columns, Math.min(maxColumns, Math.ceil(children.length / rows)));
            }
          }
          if (direction === "ltr")
            cell = /* @__PURE__ */ __name((n) => ({ column: n % columns, row: Math.floor(n / columns) }), "cell");
          else if (direction === "ltr-btt")
            cell = /* @__PURE__ */ __name((n) => ({ column: n % columns, row: rows - 1 - Math.floor(n / columns) }), "cell");
          else if (direction === "rtl")
            cell = /* @__PURE__ */ __name((n) => ({ column: columns - 1 - n % columns, row: Math.floor(n / columns) }), "cell");
          else if (direction === "rtl-btt")
            cell = /* @__PURE__ */ __name((n) => ({ column: columns - 1 - n % columns, row: rows - 1 - Math.floor(n / columns) }), "cell");
          else if (direction === "ttb")
            cell = /* @__PURE__ */ __name((n) => ({ column: Math.floor(n / rows), row: n % rows }), "cell");
          else if (direction === "btt")
            cell = /* @__PURE__ */ __name((n) => ({ column: Math.floor(n / rows), row: rows - 1 - n % rows }), "cell");
          else if (direction === "ttb-rtl")
            cell = /* @__PURE__ */ __name((n) => ({ column: columns - 1 - Math.floor(n / rows), row: n % rows }), "cell");
          else if (direction === "btt-rtl")
            cell = /* @__PURE__ */ __name((n) => ({ column: columns - 1 - Math.floor(n / rows), row: rows - 1 - n % rows }), "cell");
          else {
            let vColumns = Math.ceil(Math.sqrt(children.length));
            let vRows = Math.ceil(children.length / vColumns);
            if (vColumns > maxColumns) {
              vColumns = maxColumns;
              vRows = Math.ceil(children.length / vColumns);
            }
            if (vRows > maxRows) {
              vRows = maxRows;
              vColumns = Math.min(maxColumns, Math.ceil(children.length / vRows));
            }
            if (vRows > rows)
              rows = vRows;
            if (vColumns > columns)
              columns = vColumns;
            cell = /* @__PURE__ */ __name((n) => ({
              column: (alignOffset.left === 1 ? vColumns - 1 - n % vColumns : n % vColumns) + alignOffset.left * (columns - vColumns),
              row: (alignOffset.top === 1 ? vRows - 1 - Math.floor(n / vColumns) : Math.floor(n / vColumns)) + alignOffset.top * (rows - vRows)
            }), "cell");
          }
          let cellGap = void 0;
          if (offsetColumn || offsetRow) {
            if (!offsetRow)
              offsetRow = { x: -offsetColumn.y, y: offsetColumn.x };
            if (!offsetColumn)
              offsetColumn = { x: offsetRow.y, y: -offsetRow.x };
          } else {
            cellGap = {
              x: (gap && (typeof gap === "number" ? gap : gap.x) || 0) / absoluteTransform.width * 100,
              y: (gap && (typeof gap === "number" ? gap : gap.y) || 0) / absoluteTransform.height * 100
            };
          }
          if (!size) {
            size = cellSizeForArea(rows, columns, area, cellGap, offsetColumn, offsetRow);
            if (!aspectRatio) {
              let minRatio = Infinity;
              let maxRatio = 0;
              for (const c of children) {
                const r = c._ui.appearance.aspectRatio;
                if (r !== void 0) {
                  if (r < minRatio)
                    minRatio = r;
                  if (r > maxRatio)
                    maxRatio = r;
                }
              }
              if (minRatio < Infinity || maxRatio > 0) {
                if (maxRatio > 1 && minRatio < 1)
                  aspectRatio = 1;
                else if (minRatio > 1)
                  aspectRatio = minRatio;
                else
                  aspectRatio = maxRatio;
              }
            }
            if (aspectRatio) {
              aspectRatio *= absoluteTransform.height / absoluteTransform.width;
              if (aspectRatio > 1) {
                size.height = size.width / aspectRatio;
              } else {
                size.width = aspectRatio * size.height;
              }
            }
          }
          if (haphazardly) {
            haphazardly *= 0.2 + Math.max(0, cellGap ? cellGap.x / size.width + cellGap.y / size.height : (Math.abs(offsetColumn.x) + Math.abs(offsetColumn.y) + Math.abs(offsetRow.y) + Math.abs(offsetColumn.y) - 200) / 100);
          } else {
            haphazardly = 0;
          }
          const startingOffset = { x: 0, y: 0 };
          const cellBoxRC = /* @__PURE__ */ __name(({ row, column }) => {
            if (column > maxColumns || row > maxRows)
              return;
            return {
              left: area.left + startingOffset.x + (cellGap ? column * (size.width + cellGap.x) : size.width * (column * offsetColumn.x + row * offsetRow.x) / 100),
              top: area.top + startingOffset.y + (cellGap ? row * (size.height + cellGap.y) : size.height * (row * offsetRow.y + column * offsetColumn.y) / 100),
              width: size.width,
              height: size.height
            };
          }, "cellBoxRC");
          const getTotalArea = /* @__PURE__ */ __name(() => {
            const boxes = [
              cellBoxRC({ row: 0, column: 0 }),
              cellBoxRC({ row: rows - 1, column: 0 }),
              cellBoxRC({ row: rows - 1, column: columns - 1 }),
              cellBoxRC({ row: 0, column: columns - 1 })
            ];
            const cellArea = {
              top: Math.min(...boxes.map((b) => b.top)),
              bottom: Math.max(...boxes.map((b) => b.top + b.height)),
              left: Math.min(...boxes.map((b) => b.left)),
              right: Math.max(...boxes.map((b) => b.left + b.width))
            };
            return {
              width: cellArea.right - cellArea.left,
              height: cellArea.bottom - cellArea.top,
              left: cellArea.left,
              top: cellArea.top
            };
          }, "getTotalArea");
          let totalAreaNeeded = getTotalArea();
          let scale2 = { x: 1, y: 1 };
          if (scaling === "fill") {
            const s = Math.max(area.width / totalAreaNeeded.width, area.height / totalAreaNeeded.height);
            scale2 = { x: s, y: s };
          } else if (scaling === "fit") {
            const s = Math.min(area.width / totalAreaNeeded.width, area.height / totalAreaNeeded.height);
            scale2 = { x: s, y: s };
          }
          const largestCellSize = cellSizeForArea(minRows, minColumns, area, cellGap, offsetColumn, offsetRow);
          if (size.width * scale2.x > largestCellSize.width) {
            const reduction = largestCellSize.width / size.width / scale2.x;
            scale2.x *= reduction;
            scale2.y *= reduction;
          }
          if (size.height * scale2.y > largestCellSize.height) {
            const reduction = largestCellSize.height / size.height / scale2.y;
            scale2.x *= reduction;
            scale2.y *= reduction;
          }
          size.width *= scale2.x;
          size.height *= scale2.y;
          if (!cellGap) {
            if (scaling === "fill") {
              if (area.width * scale2.x / totalAreaNeeded.width > area.height * scale2.y / totalAreaNeeded.height) {
                const offsetScale = (area.height - size.height) / (totalAreaNeeded.height * scale2.y - size.height);
                if (offsetScale < 1) {
                  scale2.y = area.height / totalAreaNeeded.height;
                  offsetColumn.y *= offsetScale;
                  offsetRow.y *= offsetScale;
                }
              } else {
                const offsetScale = (area.width - size.width) / (totalAreaNeeded.width * scale2.x - size.width);
                if (offsetScale < 1) {
                  scale2.x = area.width / totalAreaNeeded.width;
                  offsetColumn.x *= offsetScale;
                  offsetRow.x *= offsetScale;
                }
              }
              totalAreaNeeded = getTotalArea();
            }
            startingOffset.x += area.left - totalAreaNeeded.left + alignOffset.left * (area.width - totalAreaNeeded.width);
            startingOffset.y += area.top - totalAreaNeeded.top + alignOffset.top * (area.height - totalAreaNeeded.height);
          } else {
            if (scaling === "fill") {
              if (rows > 1)
                cellGap.y = Math.min(cellGap.y || 0, (area.height - rows * size.height) / (rows - 1));
              if (columns > 1)
                cellGap.x = Math.min(cellGap.x || 0, (area.width - columns * size.width) / (columns - 1));
            }
            const newWidth = columns * (size.width + cellGap.x) - cellGap.x;
            startingOffset.x += alignOffset.left * (area.width - newWidth);
            const newHeight = rows * (size.height + cellGap.y) - cellGap.y;
            startingOffset.y += alignOffset.top * (area.height - newHeight);
          }
          cellBox = /* @__PURE__ */ __name((n) => cellBoxRC(cell(n)), "cellBox");
        }
        const prandom = import_random_seed.default.create("ge" + this.name).random;
        for (let i = 0; i !== children.length; i++) {
          const box = cellBox(i);
          if (!box)
            continue;
          const child = children[i];
          let aspectRatio2 = child._ui.appearance.aspectRatio;
          if (aspectRatio2)
            aspectRatio2 *= absoluteTransform.height / absoluteTransform.width;
          let { width, height } = box;
          if (aspectRatio2 && aspectRatio2 !== width / height) {
            if (aspectRatio2 > width / height) {
              height = width / aspectRatio2;
            } else {
              width = aspectRatio2 * height;
            }
          }
          let left = box.left + (box.width - width) / 2;
          let top = box.top + (box.height - height) / 2;
          if (haphazardly) {
            let wiggle = { x: 0, y: 0 };
            let overlap = Infinity;
            for (let tries = 0; tries < 10; tries++) {
              const rx = prandom();
              const ry = prandom();
              const w = {
                x: haphazardly ? Math.min(
                  area.left + area.width - left - width,
                  Math.max(area.left - left, (rx - ((left - area.left) / (area.width - width) - 0.5) / 2 - 0.5) * haphazardly * (size.width + size.height))
                ) : 0,
                y: haphazardly ? Math.min(
                  area.top + area.height - top - height,
                  Math.max(area.top - top, (ry - ((top - area.top) / (area.height - height) - 0.5) / 2 - 0.5) * haphazardly * (size.width + size.height))
                ) : 0
              };
              let worstOverlapThisTry = Infinity;
              if (children.every((c) => {
                if (!c._ui.computedStyle)
                  return true;
                const cbox = c._ui.computedStyle;
                const childOverlap = Math.min(
                  Math.max(0, cbox.left + cbox.width - left - w.x),
                  Math.max(0, cbox.top + cbox.height - top - w.y),
                  Math.max(0, left + width + w.x - cbox.left),
                  Math.max(0, top + height + w.y - cbox.top)
                );
                if (childOverlap === 0)
                  return true;
                worstOverlapThisTry = Math.min(childOverlap, worstOverlapThisTry);
              })) {
                wiggle = w;
                break;
              }
              if (worstOverlapThisTry < overlap) {
                overlap = worstOverlapThisTry;
                wiggle = w;
              }
            }
            left += wiggle.x;
            top += wiggle.y;
          }
          child._ui.computedStyle = { width, height, left, top };
          child.applyLayouts(force);
        }
      }
    }
    /** @internal */
    getLayoutItems() {
      const layoutItems = [];
      for (const child of this._t.children) {
        for (let l = this._ui.layouts.length - 1; l >= 0; l--) {
          const { applyTo } = this._ui.layouts[l];
          if (typeof applyTo === "function" && child instanceof applyTo || typeof applyTo === "string" && child.name === applyTo || child === applyTo || applyTo instanceof ElementCollection && applyTo.includes(child)) {
            layoutItems[l] = layoutItems[l] ? layoutItems[l].concat([child]) : [child];
            break;
          }
        }
      }
      return layoutItems;
    }
    /**
     * calculate working area
     * @internal
     */
    getArea(attributes) {
      let { area, margin } = attributes;
      if (area)
        return area;
      if (!margin)
        return { left: 0, top: 0, width: 100, height: 100 };
      const absoluteTransform = this.absoluteTransform();
      const transform = {
        x: absoluteTransform.width / 100,
        y: absoluteTransform.height / 100
      };
      margin = typeof margin === "number" ? { left: margin, right: margin, top: margin, bottom: margin } : { ...margin };
      margin.left /= transform.x;
      margin.right /= transform.x;
      margin.top /= transform.y;
      margin.bottom /= transform.y;
      return {
        left: margin.left,
        top: margin.top,
        width: 100 - margin.left - margin.right,
        height: 100 - margin.top - margin.bottom
      };
    }
    /**
     * Define the appearance of this element. Any values provided override previous ones.
     * @category UI
     *
     * @param appearance - Possible values are:
     * @param appearance.className - A class name to add to the dom element
     *
     * @param appearance.render - A function that takes this element as its only
     * argument and returns JSX for the element. See {@link /styling.md} for more
     * on usage.
     *
     * @param appearance.aspectRatio - The aspect ratio for this element. This
     * value is a ratio of width over height. All layouts defined in {@link
     * layout} will respect this aspect ratio.
     *
     * @param appearance.connections - If the elements immediately within this
     * element are connected using {@link Space#connectTo}, this makes those
     * connections visible as connecting lines. Providing a `label` will place a
     * label over top of this line by calling the provided function with the
     * distance of the connection specified in {@link Space#connectTo} and using
     * the retured JSX. If `labelScale` is provided, the label is scaled by this
     * amount.
     */
    appearance(appearance) {
      Object.assign(this._ui.appearance, appearance);
    }
    /** @internal */
    getMoveTransform() {
      if (!this._ui.computedStyle || !this._t.was || this._t.was === this.branch())
        return;
      const previousPosition = this.board._ui.previousStyles[this._t.was];
      if (!previousPosition)
        return;
      const newPosition = this.relativeTransformToBoard();
      return {
        scaleX: previousPosition.width / newPosition.width,
        scaleY: previousPosition.height / newPosition.height,
        translateX: (previousPosition.left - newPosition.left) / newPosition.width * 100,
        translateY: (previousPosition.top - newPosition.top) / newPosition.height * 100
      };
    }
    /** @internal */
    doneMoving() {
      const branch = this.branch();
      this._t.was = branch;
      if (this._ui.computedStyle) {
        this.board._ui.previousStyles[branch] = this.relativeTransformToBoard();
      }
    }
  };

  // ../boardzilla-core/game/board/space.ts
  var import_graphology = __toESM(require_graphology_umd_min());
  var import_graphology_shortest_path = __toESM(require_graphology_shortest_path());
  var import_graphology_traversal = __toESM(require_graphology_traversal());
  var Space = class _Space extends GameElement {
    constructor() {
      super(...arguments);
      this._eventHandlers = { enter: [] };
    }
    static {
      __name(this, "Space");
    }
    /** internal */
    isSpace() {
      return true;
    }
    /** internal */
    createElement(className, name, attrs) {
      const el = super.createElement(className, name, attrs);
      this.triggerEvent("enter", el);
      return el;
    }
    /** internal */
    addEventHandler(type, handler) {
      this._eventHandlers[type].push(handler);
    }
    /**
     * Attach a callback to this space for every element that enters or is created
     * within.
     * @category Structure
     *
     * @param type - the class of element that will trigger this callback
     * @param callback - Callback will be called each time an element enters, with
     * the entering element as the only argument.
     *
     * @example
     * deck.onEnter(Card, card => card.hideFromAll()) // card placed in the deck are automatically turned face down
     */
    onEnter(type, callback) {
      this.addEventHandler("enter", { callback, type });
    }
    /** internal */
    triggerEvent(event, entering) {
      for (const handler of this._eventHandlers[event]) {
        if (event === "enter" && !isA(entering, handler.type))
          continue;
        handler.callback(entering);
      }
    }
    /**
     * Make this space adjacent with another space for the purposes of adjacency
     * and path-finding functions.
     * @category Structure
     *
     * @param space - {@link Space} to connect to
     * @param distance - Add a custom distance to this connection for the purposes
     * of distance-measuring.
     */
    connectTo(space, distance = 1) {
      if (!this._t.parent || this._t.parent !== space._t.parent)
        throw Error("Cannot connect two spaces that are not in the same parent space");
      if (!this._t.parent._t.graph) {
        this._t.parent._t.graph = new import_graphology.UndirectedGraph();
      }
      const graph = this._t.parent._t.graph;
      if (!graph.hasNode(this._t.id))
        graph.addNode(this._t.id, { space: this });
      if (!graph.hasNode(space._t.id))
        graph.addNode(space._t.id, { space });
      graph.addEdge(this._t.id, space._t.id, { distance });
      return this;
    }
    /**
     * If this space is adjacent to another space
     * @category Structure
     */
    adjacentTo(space) {
      if (!this._t.parent?._t.graph)
        return false;
      return this._t.parent._t.graph.areNeighbors(this._t.id, space._t.id);
    }
    /**
     * Finds the shortest distance to another space, traveling thru multiple
     * connections
     * @category Structure
     *
     * @param space - {@link Space} to measure distance to
     * @returns shortest distance measured by the `distance` values added to each
     * connection in {@link connectTo}
     */
    distanceTo(space) {
      if (!this._t.parent?._t.graph)
        return void 0;
      try {
        const graph = this._t.parent._t.graph;
        const path = import_graphology_shortest_path.dijkstra.bidirectional(graph, this._t.id, space._t.id, "distance");
        let distance = 0;
        for (let n = 1; n != path.length; n++) {
          distance += graph.getEdgeAttributes(graph.edge(path[n - 1], path[n])).distance;
        }
        return distance;
      } catch (e) {
        return void 0;
      }
    }
    closest(className, ...finders) {
      let classToSearch = _Space;
      if (typeof className !== "function" || !("isGameElement" in className)) {
        if (className)
          finders = [className, ...finders];
      } else {
        classToSearch = className;
      }
      if (!this._t.parent?._t.graph)
        return void 0;
      const others = this.others(classToSearch, ...finders);
      return others.sortBy((el) => {
        const distance = this.distanceTo(el);
        return distance === void 0 ? Infinity : distance;
      })[0];
    }
    /**
     * Finds all spaces connected to this space by a distance no more than
     * `distance`
     *
     * @category Queries
     */
    withinDistance(distance) {
      const c = new ElementCollection();
      try {
        const graph = this._t.parent._t.graph;
        (0, import_graphology_traversal.bfs)(graph, (node) => {
          const el = graph.getNodeAttributes(node).element;
          const d = this.distanceTo(el);
          if (d === void 0)
            return false;
          if (d > distance)
            return true;
          if (el !== this)
            c.push(el);
        });
      } catch (e) {
      }
      return c;
    }
    /** internal */
    _otherFinder(finders) {
      let otherFinder = /* @__PURE__ */ __name((el) => el !== this, "otherFinder");
      for (const finder of finders) {
        if (typeof finder === "object") {
          if (finder.adjacent !== void 0) {
            const adj = finder.adjacent;
            otherFinder = /* @__PURE__ */ __name((el) => this.adjacentTo(el) === adj && el !== this, "otherFinder");
            delete finder.adjacent;
          }
          if (finder.withinDistance !== void 0) {
            const distance = finder.withinDistance;
            otherFinder = /* @__PURE__ */ __name((el) => {
              const d = this.distanceTo(el);
              if (d === void 0)
                return false;
              return d <= distance && el !== this;
            }, "otherFinder");
            delete finder.withinDistance;
          }
        }
      }
      return otherFinder;
    }
  };

  // ../boardzilla-core/game/board/piece.ts
  var Piece = class extends GameElement {
    static {
      __name(this, "Piece");
    }
    /**
     * Move this piece into another element. This triggers any {@link
     * Space#onEnter | onEnter} callbacks in the destination.
     * @category Structure
     *
     * @param to - Destination element
     * @param options.position - Place the piece into a specific numbered position
     * relative to the other elements in this space. Positive numbers count from
     * the beginning. Negative numbers count from the end.
     * @param options.fromTop - Place the piece into a specific numbered position counting
     * from the first element
     * @param options.fromBottom - Place the piece into a specific numbered position
     * counting from the last element
     */
    putInto(to, options) {
      if (to.isDescendantOf(this))
        throw Error(`Cannot put ${this} into itself`);
      let pos = to._t.order === "stacking" ? 0 : to._t.children.length;
      if (options?.position !== void 0)
        pos = options.position >= 0 ? options.position : to._t.children.length + options.position + 1;
      if (options?.fromTop !== void 0)
        pos = options.fromTop;
      if (options?.fromBottom !== void 0)
        pos = to._t.children.length - options.fromBottom;
      const previousParent = this._t.parent;
      const position = this._t.parent._t.children.indexOf(this);
      this._t.parent._t.children.splice(position, 1);
      this._t.parent = to;
      to._t.children.splice(pos, 0, this);
      if (to instanceof Space && previousParent !== to)
        to.triggerEvent("enter", this);
    }
    /**
     * Remove this piece from the playing area and place it into {@link
     * Board#pile}
     * @category Structure
     */
    remove() {
      return this.putInto(this._ctx.removed);
    }
  };

  // ../boardzilla-core/game/board/board.ts
  var Board = class extends Space {
    constructor(ctx) {
      super({ ...ctx, trackMovement: false });
      this._ctx.removed = this.createElement(Space, "removed"), this.board = this;
      this.pile = this._ctx.removed;
    }
    static {
      __name(this, "Board");
    }
    get players() {
      return this._ctx.game.players;
    }
    message(message, ...args) {
      return this._ctx.game.message(message, ...args);
    }
    finish(winner) {
      return this._ctx.game.finish(winner);
    }
    // also gets removed elements
    allJSON(seenBy) {
      return [this.toJSON(seenBy)].concat(
        this._ctx.removed._t.children.map((el) => el.toJSON(seenBy))
      );
    }
    fromJSON(boardJSON) {
      let { className, children, _id, order, ...rest } = boardJSON[0];
      if (this._ctx.game)
        rest = deserializeObject({ ...rest }, this._ctx.game);
      if (this.constructor.name !== className)
        throw Error(`Cannot create board from JSON. ${className} must equal ${this.constructor.name}`);
      for (const key of Object.keys(this)) {
        if (!["_ctx", "_t", "_ui", "_eventHandlers", "board", "game", "pile"].includes(key) && !(key in rest))
          rest[key] = void 0;
      }
      Object.assign(this, { ...rest });
      if (children)
        this.createChildrenFromJSON(children, "0");
      if (order)
        this._t.order = order;
      this._ctx.removed.createChildrenFromJSON(boardJSON.slice(1), "1");
      this._ui.layoutsSet = false;
    }
    // restore default layout rules before running setupLayout
    resetUI() {
      super.resetUI();
      this._ui.stepLayouts = { "step:out-of-turn": { element: this, top: 0, left: 0 } };
      this._ui.previousStyles ||= {};
    }
    setBreakpoint(breakpoint) {
      if (breakpoint !== this._ui.breakpoint) {
        if (this._ui.breakpoint)
          this._ui.layoutsSet = false;
        this._ui.breakpoint = breakpoint;
      }
    }
    getBreakpoint(aspectRatio) {
      return this._ui.breakpoints && this._ui.breakpoints(aspectRatio) || "_default";
    }
    applyLayouts(force = false) {
      if (!this._ui.breakpoint)
        this.setBreakpoint("_default");
      if (!this._ui.layoutsSet) {
        this.resetUI();
        if (this._ui.setupLayout)
          this._ui.setupLayout(this, this._ui.breakpoint);
        this._ui.layoutsSet = true;
      }
      const aspectRatio = this._ui.appearance.aspectRatio;
      if (aspectRatio) {
        this._ui.frame = {
          left: 0,
          top: 0,
          width: aspectRatio < 1 ? aspectRatio * 100 : 100,
          height: aspectRatio > 1 ? 100 / aspectRatio : 100
        };
      }
      return super.applyLayouts(force);
    }
    layoutStep(step, attributes) {
      if (step !== "out-of-turn" && !this._ctx.game.flow.getStep(step))
        throw Error(`No such step: ${step}`);
      this._ui.stepLayouts["step:" + step] = attributes;
    }
    layoutAction(action2, attributes) {
      this._ui.stepLayouts["action:" + action2] = attributes;
    }
    disableDefaultAppearance() {
      this._ui.disabledDefaultAppearance = true;
    }
  };

  // ../boardzilla-core/ui/game/components/Element.tsx
  var elementAttributes = /* @__PURE__ */ __name((el) => {
    return Object.fromEntries(Object.entries(el).filter(([key, val]) => !["_t", "_ctx", "_ui", "name", "_visible", "game", "pile", "board", "_eventHandlers", "className"].includes(key) && typeof val !== "function").map(([key, val]) => [`data-${key.toLowerCase()}`, serialize(val)]));
  }, "elementAttributes");
  var defaultAppearance = /* @__PURE__ */ __name((el) => /* @__PURE__ */ import_react2.default.createElement("div", { className: "bz-default" }, el.name || el.constructor.name), "defaultAppearance");
  var Element = /* @__PURE__ */ __name(({ element, json, selected, onSelectElement, onMouseLeave }) => {
    const [game, boardSelections, move, position, dragElement, setDragElement, dropElements, currentDrop, setCurrentDrop] = gameStore((s) => [s.game, s.boardSelections, s.move, s.position, s.dragElement, s.setDragElement, s.dropElements, s.currentDrop, s.setCurrentDrop, s.boardJSON]);
    const [transform, setTransform] = (0, import_react2.useState)();
    const [animating, setAnimating] = (0, import_react2.useState)(false);
    const [dragging, setDragging] = (0, import_react2.useState)(false);
    const [animatedFrom, setAnimatedFrom] = (0, import_react2.useState)();
    const wrapper = (0, import_react2.useRef)(null);
    (0, import_react2.useEffect)(() => {
      if (wrapper.current && transform) {
        const cancel = /* @__PURE__ */ __name((e) => {
          if (e.propertyName === "transform") {
            element.doneMoving();
            setAnimating(false);
            wrapper.current?.removeEventListener("transitionend", cancel);
          }
        }, "cancel");
        wrapper.current?.addEventListener("transitionend", cancel);
        setAnimating(true);
        setTransform(void 0);
      }
    }, [wrapper, transform]);
    const branch = element.branch();
    const selections = boardSelections[branch];
    const isSelected = selected.includes(element) || move?.args.some((a) => a === element || a instanceof Array && a.includes(element));
    ;
    const baseClass = element instanceof Piece ? "Piece" : "Space";
    const appearance = element._ui.appearance.render || (element.board._ui.disabledDefaultAppearance ? () => null : defaultAppearance);
    const absoluteTransform = element.absoluteTransform();
    const clickable = !dragElement && selections?.clickMoves.length;
    const selectable = !dragElement && selections?.clickMoves.filter((m) => m.action.slice(0, 4) !== "_god").length;
    const draggable = !animating && !transform && selections?.dragMoves.length;
    const droppable = dropElements.find(({ element: element2 }) => element2 === branch);
    let style = {};
    const onClick = (0, import_react2.useCallback)((e) => {
      e.stopPropagation();
      onSelectElement(selections.clickMoves, element);
    }, [onSelectElement, selections]);
    const onStartDrag = (0, import_react2.useCallback)((e, data) => {
      e.stopPropagation();
      if (wrapper.current) {
        wrapper.current?.setAttribute("data-lastx", String(data.lastX));
        wrapper.current?.setAttribute("data-lasty", String(data.lastY));
      }
    }, [wrapper]);
    const onDrag = (0, import_react2.useCallback)((e, data) => {
      e.stopPropagation();
      setDragging(true);
      setDragElement(branch);
      if (wrapper.current && element._ui.computedStyle) {
        wrapper.current.style.top = `calc(${element._ui.computedStyle.top}% - ${parseInt(wrapper.current.getAttribute("data-lasty") || "") - data.y}px)`;
        wrapper.current.style.left = `calc(${element._ui.computedStyle.left}% - ${parseInt(wrapper.current.getAttribute("data-lastx") || "") - data.x}px)`;
      }
    }, [branch, wrapper, style]);
    const onStopDrag = (0, import_react2.useCallback)((e) => {
      e.stopPropagation();
      if (dragging) {
        if (currentDrop) {
          const move2 = dropElements.find(({ element: element2 }) => element2 === currentDrop)?.move;
          if (move2)
            onSelectElement([move2], element, game.board.atBranch(currentDrop));
        }
        if (wrapper.current && element._ui.computedStyle) {
          wrapper.current.style.top = element._ui.computedStyle.top + "%";
          wrapper.current.style.left = element._ui.computedStyle.left + "%";
        }
      } else {
        onClick(e);
      }
      setDragging(false);
      setCurrentDrop(void 0);
      setDragElement(void 0);
    }, [dragging, currentDrop, onClick, onSelectElement, wrapper]);
    const onDrop = (0, import_react2.useCallback)(() => {
      setCurrentDrop(branch);
    }, []);
    const onLeave = (0, import_react2.useCallback)(() => {
      setCurrentDrop(void 0);
    }, []);
    const moveTransform = element.getMoveTransform();
    const computedStyle = element._ui.computedStyle;
    if (!moveTransform || animatedFrom === element._t.was) {
      element.doneMoving();
    } else if (!transform) {
      const transformToNew = `translate(${moveTransform.translateX}%, ${moveTransform.translateY}%) scaleX(${moveTransform.scaleX}) scaleY(${moveTransform.scaleY})`;
      setTransform(transformToNew);
      setAnimatedFrom(element._t.was);
      return null;
    }
    if (element._t.parent && !element._t.parent._t.children.includes(element))
      console.error("old element reference", element);
    if (computedStyle) {
      style = Object.fromEntries(Object.entries(computedStyle).map(([key, val]) => [key, `${val}%`]));
    }
    if (dragging) {
      delete style.left;
      delete style.top;
    }
    style.fontSize = absoluteTransform.height * 0.04 + "rem";
    let contents = [];
    if ((element._t.children.length || 0) !== (json.children?.length || 0)) {
      console.error("JSON does not match board. This can be caused by client rendering while server is updating and should fix itself as the final render is triggered.", element, json);
      return null;
    }
    for (let i = 0; i !== element._t.children.length; i++) {
      const el = element._t.order === "stacking" ? element._t.children[element._t.children.length - i - 1] : element._t.children[i];
      const childJSON = element._t.order === "stacking" ? json.children[json.children.length - i - 1] : json.children[i];
      if (!el._ui.computedStyle || el._ui.appearance.render === false)
        continue;
      contents.push(
        /* @__PURE__ */ import_react2.default.createElement(
          Element,
          {
            key: el.branch(),
            element: el,
            json: childJSON,
            selected,
            onSelectElement,
            onMouseLeave: droppable ? onDrop : void 0
          }
        )
      );
    }
    if (element._ui.appearance.connections) {
      if (!element._t.graph)
        return;
      let { thickness, style: style2, color, fill, label, labelScale } = element._ui.appearance.connections;
      if (!thickness)
        thickness = 0.1;
      if (!style2)
        style2 = "solid";
      if (!color)
        color = "black";
      if (!fill)
        color = "white";
      if (!labelScale)
        labelScale = 0.05;
      let i = 0;
      const lines = [];
      const labels = [];
      element._t.graph.forEachEdge((...args) => {
        const source = args[4].space;
        const target = args[5].space;
        if (source._ui.computedStyle && target._ui.computedStyle) {
          const origin = {
            x: (source._ui.computedStyle.left + source._ui.computedStyle?.width / 2) * absoluteTransform.width / 100,
            y: (source._ui.computedStyle.top + source._ui.computedStyle?.height / 2) * absoluteTransform.height / 100
          };
          const destination = {
            x: (target._ui.computedStyle.left + target._ui.computedStyle?.width / 2) * absoluteTransform.width / 100,
            y: (target._ui.computedStyle.top + target._ui.computedStyle?.height / 2) * absoluteTransform.height / 100
          };
          const distance = Math.sqrt(Math.pow(origin.x - destination.x, 2) + Math.pow(origin.y - destination.y, 2));
          if (style2 === "double") {
            lines.push(
              /* @__PURE__ */ import_react2.default.createElement(
                "line",
                {
                  key: i++,
                  x1: origin.x,
                  y1: origin.y,
                  x2: destination.x,
                  y2: destination.y,
                  transform: `translate(${(origin.y - destination.y) / distance * thickness}, ${(origin.x - destination.x) / distance * -thickness})`,
                  strokeWidth: thickness,
                  stroke: color
                }
              )
            );
            lines.push(
              /* @__PURE__ */ import_react2.default.createElement(
                "line",
                {
                  key: i++,
                  x1: origin.x,
                  y1: origin.y,
                  x2: destination.x,
                  y2: destination.y,
                  transform: `translate(${(origin.y - destination.y) / distance * -thickness}, ${(origin.x - destination.x) / distance * thickness})`,
                  strokeWidth: thickness,
                  stroke: color
                }
              )
            );
          }
          lines.push(
            /* @__PURE__ */ import_react2.default.createElement(
              "line",
              {
                key: i++,
                x1: origin.x,
                y1: origin.y,
                x2: destination.x,
                y2: destination.y,
                strokeWidth: 2 * thickness,
                stroke: fill
              }
            )
          );
          if (label) {
            labels.push(
              /* @__PURE__ */ import_react2.default.createElement(
                "g",
                {
                  key: `label${i}`,
                  transform: `translate(${(origin.x + destination.x) / 2 - labelScale * absoluteTransform.width * 0.5}
  ${(origin.y + destination.y) / 2 - labelScale * absoluteTransform.height * 0.5})
  scale(${labelScale})`
                },
                label(args[1].distance)
              )
            );
          }
        }
      });
      contents.unshift(
        /* @__PURE__ */ import_react2.default.createElement("svg", { key: "svg-edges", style: { pointerEvents: "none", position: "absolute", width: "100%", height: "100%", left: 0, top: 0 }, viewBox: `0 0 ${absoluteTransform.width} ${absoluteTransform.height}` }, lines)
      );
      if (label)
        contents.push(
          /* @__PURE__ */ import_react2.default.createElement("svg", { key: "svg-edge-labels", style: { pointerEvents: "none", position: "absolute", width: "100%", height: "100%", left: 0, top: 0 }, viewBox: `0 0 ${absoluteTransform.width} ${absoluteTransform.height}` }, labels)
        );
    }
    const attrs = elementAttributes(element);
    if (element.player?.position === position)
      attrs.mine = "true";
    contents = /* @__PURE__ */ import_react2.default.createElement(
      "div",
      {
        id: element.name,
        className: (0, import_classnames.default)(
          baseClass,
          element._ui.appearance.className,
          {
            [element.constructor.name]: baseClass !== element.constructor.name,
            selected: isSelected,
            clickable,
            selectable,
            droppable
            // zoomable: !dragElement && (typeof element._ui.appearance.zoomable === 'function' ? element._ui.appearance.zoomable(element) : element._ui.appearance.zoomable),
          }
        ),
        onClick: clickable ? onClick : void 0,
        onMouseEnter: droppable ? onDrop : void 0,
        onMouseLeave: () => {
          if (droppable)
            onLeave();
          if (onMouseLeave)
            onMouseLeave();
        },
        ...attrs
      },
      appearance(element),
      contents
    );
    contents = /* @__PURE__ */ import_react2.default.createElement(
      "div",
      {
        ref: wrapper,
        key: branch,
        className: (0, import_classnames.default)("transform-wrapper", { animating, dragging }),
        style: { ...style, transform }
      },
      contents
    );
    contents = /* @__PURE__ */ import_react2.default.createElement(
      import_react_draggable.DraggableCore,
      {
        disabled: !draggable,
        onStart: onStartDrag,
        onDrag,
        onStop: onStopDrag
      },
      contents
    );
    if (!element._t.parent)
      console.log("GAMEELEMENTS render");
    return contents;
  }, "Element");
  var Element_default = Element;

  // ../boardzilla-core/ui/game/components/PlayerControls.tsx
  var import_react3 = __toESM(require_react());

  // ../boardzilla-core/game/action/selection.ts
  var Selection = class _Selection {
    constructor(s) {
      // additional meta info that describes the context for this selection
      this.skipIfOnlyOne = true;
      this.expand = false;
      if (s instanceof _Selection) {
        this.type = s.type;
        this.skipIfOnlyOne = s.skipIfOnlyOne;
        this.expand = s.expand;
        this.choices = s.choices;
        this.boardChoices = s.boardChoices;
        this.min = s.min;
        this.max = s.max;
        this.initial = s.initial;
        this.regexp = s.regexp;
        this.value = s.value;
        this.clientContext = s.clientContext;
      } else {
        if (s.selectFromChoices) {
          this.type = "choices";
          this.choices = s.selectFromChoices.choices;
          this.initial = s.selectFromChoices.initial;
        } else if (s.selectOnBoard) {
          this.type = "board";
          this.boardChoices = s.selectOnBoard.chooseFrom;
          if (s.selectOnBoard.number !== void 0) {
            this.min = s.selectOnBoard.number;
            this.max = s.selectOnBoard.number;
          }
          this.min ??= s.selectOnBoard.min;
          this.max ??= s.selectOnBoard.max;
        } else if (s.selectNumber) {
          this.type = "number";
          this.min = s.selectNumber.min;
          this.max = s.selectNumber.max;
          this.initial = s.selectNumber.min === void 0 ? s.selectNumber.initial : s.selectNumber.min;
        } else if (s.enterText) {
          this.type = "text";
          this.regexp = s.enterText.regexp;
          this.initial = s.enterText.initial;
        } else {
          this.type = "button";
          this.value = s.value;
          this.skipIfOnlyOne ??= true;
        }
      }
      this.prompt = s.prompt;
      if ("skipIfOnlyOne" in s)
        this.skipIfOnlyOne = s.skipIfOnlyOne ?? true;
      if ("skipIf" in s)
        this.skipIf = s.skipIf;
      if ("expand" in s)
        this.expand = s.expand ?? false;
      this.clientContext = s.clientContext;
    }
    static {
      __name(this, "Selection");
    }
    /**
     * check specific selection with a given arg. evaluates within the context of
     * previous args, so any selection elements that have previous-arg-function
     * forms are here evaluated with the previous args. returns new selection and
     * error if any
     */
    validate(arg, previousArgs) {
      const s = this.resolve(...previousArgs);
      if (s.skipIf === true)
        return;
      if (s.type === "choices" && s.choices) {
        if (arg instanceof Array)
          return "multi-choice stil unsupported";
        return (s.choices instanceof Array ? s.choices : Object.keys(s.choices)).includes(arg) ? void 0 : "Not a valid choice";
      }
      if (s.type === "board" && s.boardChoices) {
        const results = s.boardChoices;
        if (!results)
          console.warn("Attempted to validate an impossible move", s);
        if (this.isMulti()) {
          if (!(arg instanceof Array))
            throw Error("Required multi select");
          if (results && arg.some((a) => !results.includes(a)))
            return "Selected elements are not valid";
          if (s.min !== void 0 && arg.length < s.min)
            return "Below minimum";
          if (s.max !== void 0 && arg.length > s.max)
            return "Above maximum";
        } else {
          return results && results.includes(arg) ? void 0 : "Selected element is not valid";
        }
      }
      if (s.type === "text") {
        return typeof arg === "string" && (!s.regexp || arg.match(s.regexp)) ? void 0 : "Not a string";
      }
      if (s.type === "number") {
        if (typeof arg !== "number")
          return "Not a number";
        if (s.min !== void 0 && arg < s.min)
          return "Below minimum";
        if (s.max !== void 0 && arg > s.max)
          return "Above maximum";
        return void 0;
      }
      return void 0;
    }
    // All possible valid Arguments to this selection. Have to make some assumptions here to tree shake possible moves
    options() {
      if (this.isUnbounded())
        return [];
      if (this.type === "number")
        return range(this.min ?? 1, this.max);
      const choices = this.choices && (this.choices instanceof Array ? this.choices : Object.keys(this.choices));
      if (this.isMulti())
        return combinations(this.boardChoices || choices || [], this.min ?? 1, this.max ?? Infinity);
      if (this.boardChoices)
        return this.boardChoices;
      if (this.choices)
        return this.choices instanceof Array ? this.choices : Object.keys(this.choices);
      return [];
    }
    isUnbounded() {
      if (this.type === "number")
        return this.max === void 0 || this.max - (this.min ?? 1) > 100;
      return this.type === "text" || this.type === "button";
    }
    isResolved() {
      return typeof this.prompt !== "function" && typeof this.min !== "function" && typeof this.max !== "function" && typeof this.initial !== "function" && typeof this.skipIf !== "function" && typeof this.choices !== "function" && typeof this.boardChoices !== "function";
    }
    isMulti() {
      return this.min !== void 0 || this.max !== void 0;
    }
    resolve(...args) {
      if (this.isResolved())
        return this;
      const resolved = new _Selection(this);
      if (typeof this.prompt === "function")
        resolved.prompt = this.prompt(...args);
      if (typeof this.min === "function")
        resolved.min = this.min(...args);
      if (typeof this.max === "function")
        resolved.max = this.max(...args);
      if (typeof this.initial === "function")
        resolved.initial = this.initial(...args);
      if (typeof this.skipIf === "function")
        resolved.skipIf = this.skipIf(...args);
      if (typeof this.choices === "function")
        resolved.choices = this.choices(...args);
      if (typeof this.boardChoices === "string")
        throw Error("not impl");
      if (typeof this.boardChoices === "function")
        resolved.boardChoices = this.boardChoices(...args);
      return resolved;
    }
    isPossible() {
      if (this.type === "choices" && this.choices)
        return (this.choices instanceof Array ? this.choices : Object.keys(this.choices)).length > 0;
      const isInBounds = this.max !== void 0 ? (this.min ?? 1) <= this.max : true;
      if (this.type === "board" && this.boardChoices)
        return isInBounds && this.boardChoices.length >= (this.min ?? 1);
      if (this.type === "number")
        return isInBounds;
      return true;
    }
    isForced() {
      if (this.skipIfOnlyOne !== true)
        return;
      if (this.type === "button") {
        return this.value;
      } else if (this.boardChoices?.length === 1 && !this.isMulti()) {
        return this.boardChoices[0];
      } else if (this.boardChoices && this.boardChoices.length === this.min && this.min === this.max) {
        return this.boardChoices;
      } else if (this.type === "number" && this.min !== void 0 && this.min === this.max) {
        return this.min;
      } else if (this.type === "choices" && this.choices) {
        const choices = this.choices instanceof Array ? this.choices : Object.keys(this.choices);
        if (choices.length === 1)
          return choices[0];
      }
    }
    overrideOptions(options) {
      if (this.type === "board") {
        this.boardChoices = options;
        return this;
      }
      return new _Selection({
        selectFromChoices: {
          choices: options
          //min: selection.min, TODO
          //max: selection.max
        }
      });
    }
  };

  // ../boardzilla-core/game/action/action.ts
  var Action = class {
    constructor({ prompt, condition }) {
      this._cfg = {
        selections: [],
        moves: [],
        messages: []
      };
      this.prompt = prompt;
      this._cfg.condition = condition;
    }
    static {
      __name(this, "Action");
    }
    isPossible() {
      return typeof this._cfg.condition === "function" ? this._cfg.condition() : this._cfg.condition ?? true;
    }
    // given a set of args, return sub-selections possible trying each possible next arg
    // return undefined if these args are impossible
    // skipping/expanding is very complex
    // skippable options will still appear in order to present the choices to the user to select that tree. This will be the final selection or the first board choice
    _getResolvedSelections(...args) {
      const selection = this._nextSelection(...args);
      if (!selection)
        return [];
      const move = {
        action: this.name,
        args,
        selection
      };
      if (!selection.isPossible())
        return;
      if (selection.isUnbounded())
        return [move];
      let possibleOptions = [];
      let pruned = false;
      let resolvedSelections = [];
      let mayExpand = selection.expand;
      for (const option of selection.options()) {
        const submoves = this._getResolvedSelections(...args, option);
        if (submoves === void 0) {
          pruned = true;
        } else {
          possibleOptions.push(option);
          if (selection.expand && submoves.length === 0)
            mayExpand = false;
          resolvedSelections = resolvedSelections.concat(submoves);
        }
      }
      if (!possibleOptions.length)
        return void 0;
      if (pruned && !selection.isMulti())
        selection.overrideOptions(possibleOptions);
      if (!resolvedSelections.length || move.selection.type === "board")
        return [move];
      if (mayExpand)
        return resolvedSelections;
      if (selection.skipIfOnlyOne && possibleOptions.length === 1)
        return resolvedSelections;
      return [move];
    }
    /**
     * given a partial arg list, returns a selection object for continuation if one exists.
     */
    _nextSelection(...args) {
      let argsLeft = args.length;
      let i = 0;
      if (!this._cfg.selections.length)
        return;
      do {
        const selection2 = this._cfg.selections[i].resolve(...args);
        if (selection2.skipIf !== true)
          argsLeft--;
        if (argsLeft >= 0)
          i++;
      } while (argsLeft >= 0 && i < this._cfg.selections.length);
      const selection = this._cfg.selections[i];
      if (selection) {
        selection.prompt ??= [...this._cfg.selections.slice(0, args.length)].reverse().find((s) => s.prompt)?.prompt || this.prompt;
        return selection.resolve(...args);
      }
    }
    /**
     * process this action with supplied args. returns error if any
     */
    _process(...args) {
      let error = void 0;
      for (let i = 0; i !== this._cfg.selections.length && i !== args.length; i++) {
        error = this._cfg.selections[i].validate(args[i], args.slice(0, i));
        if (error) {
          console.error("invalid arg", args[i], i, error);
          args = args.slice(0, i);
          break;
        }
      }
      const resolvedSelections = this._getResolvedSelections(...args);
      if (!resolvedSelections) {
        console.error("could not resolve this args", this.name, args);
        return error || "unknown error during action._process";
      }
      if (resolvedSelections.length) {
        return error || "incomplete action";
      }
      try {
        for (const move of this._cfg.moves)
          move(...args);
      } catch (e) {
        console.error(e);
        return e.message;
      }
    }
    do(move) {
      this._cfg.moves.push(move);
      return this;
    }
    message(message) {
      this._cfg.messages.push(message);
      return this;
    }
    chooseFrom({ choices, prompt, initial, skipIfOnlyOne, skipIf, expand }) {
      this._cfg.selections.push(new Selection({ prompt, skipIfOnlyOne, skipIf, expand, selectFromChoices: { choices, initial } }));
      return this;
    }
    enterText({ prompt, regexp, initial }) {
      this._cfg.selections.push(new Selection({ prompt, enterText: { regexp, initial } }));
      return this;
    }
    confirm(prompt) {
      this._cfg.selections.push(new Selection({ prompt, skipIfOnlyOne: false, value: true }));
      return this;
    }
    chooseNumber({ min, max, prompt, initial, skipIfOnlyOne, skipIf, expand }) {
      this._cfg.selections.push(new Selection({ prompt, skipIfOnlyOne, skipIf, expand, selectNumber: { min, max, initial } }));
      return this;
    }
    chooseOnBoard({ choices, prompt, min, max, number, skipIfOnlyOne, skipIf, expand }) {
      this._cfg.selections.push(new Selection({ prompt, skipIfOnlyOne, skipIf, expand, selectOnBoard: { chooseFrom: choices, min, max, number } }));
      if (min !== void 0 || max !== void 0 || number !== void 0) {
        return this;
      }
      return this;
    }
    move({ piece, into, choosePiece, chooseInto, prompt, promptInto }) {
      const numberOfPriorSelections = this._cfg.selections.length;
      if (choosePiece) {
        this._cfg.selections.push(new Selection({
          prompt,
          skipIfOnlyOne: false,
          selectOnBoard: { chooseFrom: choosePiece },
          clientContext: { dragInto: chooseInto || into }
        }));
      }
      if (chooseInto) {
        this._cfg.selections.push(new Selection({
          prompt: promptInto || prompt,
          selectOnBoard: { chooseFrom: chooseInto },
          clientContext: { dragFrom: choosePiece || piece }
        }));
      }
      if (!choosePiece && !chooseInto) {
        this._cfg.moves.push(() => resolve(piece).putInto(resolve(into)));
      }
      if (choosePiece && !chooseInto) {
        this._cfg.moves.push((...args) => args[numberOfPriorSelections].putInto(resolve(into)));
      }
      if (!choosePiece && chooseInto) {
        this._cfg.moves.push((...args) => resolve(piece).putInto(args[numberOfPriorSelections]));
      }
      if (choosePiece && chooseInto) {
        this._cfg.moves.push((...args) => args[numberOfPriorSelections].putInto(args[numberOfPriorSelections + 1]));
      }
      return this;
    }
  };
  var resolve = /* @__PURE__ */ __name((q, ...args) => {
    if (typeof q === "string")
      throw Error("not impl");
    return typeof q === "function" ? q(...args) : q;
  }, "resolve");

  // ../boardzilla-core/game/action/index.ts
  var action = /* @__PURE__ */ __name((definition) => new Action(definition), "action");

  // ../boardzilla-core/ui/game/components/PlayerControls.tsx
  var PlayerControls = /* @__PURE__ */ __name(({ onSubmit, disambiguateElement }) => {
    const [game, position, move, selected, step, moves, prompt] = gameStore((s) => [s.game, s.position, s.move, s.selected, s.step, s.pendingMoves, s.prompt]);
    console.log("render PlayerControls", moves, move);
    const onSubmitForm = (0, import_react3.useCallback)((e, pendingMove) => {
      e.preventDefault();
      const form = e.currentTarget;
      if (!form)
        throw Error("No form in submit");
      let arg = void 0;
      if (pendingMove.selection?.type === "board" && pendingMove.selection.isMulti()) {
        arg = selected;
      } else if (pendingMove.selection?.type === "board" && disambiguateElement) {
        arg = selected[0];
      } else if (pendingMove.selection?.type === "button") {
        arg = pendingMove.selection.value;
      } else {
        const value = new FormData(form, e.nativeEvent.submitter).get("selection")?.toString();
        if (value) {
          arg = value;
          if (pendingMove.selection?.type === "number")
            arg = parseInt(arg.toString());
          if (pendingMove.selection?.type === "choices")
            arg = deserializeArg(arg, game);
        }
      }
      onSubmit(pendingMove, arg);
    }, [onSubmit, game]);
    const controls = (0, import_react3.useMemo)(() => {
      const layouts = {};
      const messages = moves || [];
      if (game.players.currentPosition !== position)
        messages.push("out-of-turn");
      if (disambiguateElement) {
        const elementPosition = disambiguateElement.element.relativeTransformToBoard();
        const style = {};
        if (elementPosition.left > 100 - elementPosition.left - elementPosition.width) {
          style.right = `calc(${100 - elementPosition.left}% + 1rem)`;
        } else {
          style.left = `calc(${elementPosition.left + elementPosition.width}% + 1rem)`;
        }
        style.top = `${elementPosition.top}%`;
        layouts["disambiguate-board-selection"] = { moves: disambiguateElement.moves, style };
      } else {
        for (const pendingMove of messages) {
          if (!move && typeof pendingMove === "object" && pendingMove.action.slice(0, 4) === "_god")
            continue;
          let layoutName = "";
          const actionLayout = typeof pendingMove === "object" ? "action:" + pendingMove.action : void 0;
          const stepLayout = "step:" + (typeof pendingMove === "string" ? pendingMove : step);
          if (actionLayout && game.board._ui.stepLayouts[actionLayout]) {
            layoutName = actionLayout;
          } else if (stepLayout && game.board._ui.stepLayouts[stepLayout]) {
            layoutName = stepLayout;
          }
          if (layoutName) {
            const existing = layouts[layoutName];
            if (existing) {
              if (typeof pendingMove === "object")
                existing.moves.push(pendingMove);
            } else {
              let style = { left: 0, top: 0 };
              const layout = game.board._ui.stepLayouts[layoutName];
              const position2 = (typeof layout.element === "function" ? layout.element() : layout.element)._ui.computedStyle;
              if (position2)
                style = {
                  left: layout.left !== void 0 ? layout.left * position2.width / 100 + position2.left + "%" : void 0,
                  top: layout.top !== void 0 ? layout.top * position2.height / 100 + position2.top + "%" : void 0,
                  right: layout.right !== void 0 ? 100 + (layout.right * position2.width / 100 - position2.left - position2.width) + "%" : void 0,
                  bottom: layout.bottom !== void 0 ? 100 + (layout.bottom * position2.height / 100 - position2.top - position2.height) + "%" : void 0,
                  width: layout.width !== void 0 ? layout.width * position2.width / 100 + "%" : void 0,
                  height: layout.height !== void 0 ? layout.height * position2.height / 100 + "%" : void 0
                };
              layouts[layoutName] = { moves: typeof pendingMove === "object" ? [pendingMove] : [], style };
            }
          }
        }
      }
      return layouts;
    }, [game, moves, move, position, disambiguateElement]);
    if (!position)
      return null;
    return Object.entries(controls).map(([layoutName, { moves: moves2, style }]) => {
      const boardPrompts = moves2.map((m) => m.selection.type === "board" ? m.selection.prompt : void 0).filter((p) => p);
      const boardPrompt = new Set(boardPrompts).size === 1 ? boardPrompts[0] : prompt;
      const boardID = boardPrompt ? moves2.find((m) => m.selection.prompt === boardPrompt)?.action : "";
      return /* @__PURE__ */ import_react3.default.createElement("div", { key: layoutName, className: `player-controls ${layoutName.replace(":", "-")}`, style }, layoutName === "step:out-of-turn" && `${game.players.current().name} is taking their turn`, boardPrompt && /* @__PURE__ */ import_react3.default.createElement("div", { id: boardID, className: "prompt" }, boardPrompt), moves2.map((pendingMove) => /* @__PURE__ */ import_react3.default.createElement("form", { key: pendingMove.action + pendingMove.selection.prompt, id: pendingMove.action, onSubmit: (e) => onSubmitForm(e, pendingMove) }, /* @__PURE__ */ import_react3.default.createElement("div", null, pendingMove.selection.type === "choices" && pendingMove.selection.choices && /* @__PURE__ */ import_react3.default.createElement(import_react3.default.Fragment, null, /* @__PURE__ */ import_react3.default.createElement("div", { className: "prompt" }, pendingMove.selection.prompt), (pendingMove.selection.choices instanceof Array ? pendingMove.selection.choices.map((c) => [c, c]) : Object.entries(pendingMove.selection.choices)).map(([k, v]) => /* @__PURE__ */ import_react3.default.createElement("button", { key: String(serializeArg(k)), type: "submit", name: "selection", value: String(serializeArg(k)) }, humanizeArg(v)))), pendingMove.selection.type === "number" && /* @__PURE__ */ import_react3.default.createElement(import_react3.default.Fragment, null, /* @__PURE__ */ import_react3.default.createElement(
        "input",
        {
          name: "selection",
          type: "number",
          min: pendingMove.selection.min,
          max: pendingMove.selection.max,
          defaultValue: String(pendingMove.selection.initial || ""),
          autoComplete: "off"
        }
      ), /* @__PURE__ */ import_react3.default.createElement("button", { type: "submit" }, pendingMove.selection.prompt)), pendingMove.selection.type === "text" && /* @__PURE__ */ import_react3.default.createElement(import_react3.default.Fragment, null, /* @__PURE__ */ import_react3.default.createElement("input", { name: "selection", defaultValue: String(pendingMove.selection.initial || ""), autoComplete: "off" }), /* @__PURE__ */ import_react3.default.createElement("button", { type: "submit" }, pendingMove.selection.prompt)), pendingMove.selection.type === "button" && /* @__PURE__ */ import_react3.default.createElement("button", { name: "selection", value: "confirm", type: "submit" }, pendingMove.selection.prompt), pendingMove.selection.type === "board" && pendingMove.selection.isMulti() && (selected.length >= (pendingMove.selection.min ?? 1) && selected.length <= (pendingMove.selection.max ?? Infinity)) && /* @__PURE__ */ import_react3.default.createElement("button", { type: "submit" }, "Done"), pendingMove.selection.type === "board" && layoutName === "disambiguate-board-selection" && /* @__PURE__ */ import_react3.default.createElement("button", { type: "submit" }, pendingMove.selection.prompt)))), (move || layoutName === "disambiguate-board-selection") && /* @__PURE__ */ import_react3.default.createElement(import_react3.default.Fragment, null, /* @__PURE__ */ import_react3.default.createElement("button", { onClick: () => onSubmit() }, "Cancel")));
    });
  }, "PlayerControls");
  var PlayerControls_default = PlayerControls;

  // ../boardzilla-core/ui/assets/click_004.ogg
  var click_004_default = "data:application/ogg;base64,T2dnUwACAAAAAAAAAAAISQAAAAAAAFRKKQUBHgF2b3JiaXMAAAAAAUSsAAAAAAAAAHcBAAAAAAC4AU9nZ1MAAAAAAAAAAAAACEkAAAEAAAB6l/yzEJf//////////////////8kDdm9yYmlzKwAAAFhpcGguT3JnIGxpYlZvcmJpcyBJIDIwMTIwMjAzIChPbW5pcHJlc2VudCkCAAAADQAAAEFSVElTVD1LZW5uZXlHAAAAQ09NTUVOVFM9U291bmQgZ2VuZXJhdGVkIGJ5IEdhbWVTeW50aCBmcm9tIFRzdWdpICh3d3cudHN1Z2ktc3R1ZGlvLmNvbSkBBXZvcmJpcylCQ1YBAAgAAAAxTCDFgNCQVQAAEAAAYCQpDpNmSSmllKEoeZiUSEkppZTFMImYlInFGGOMMcYYY4wxxhhjjCA0ZBUAAAQAgCgJjqPmSWrOOWcYJ45yoDlpTjinIAeKUeA5CcL1JmNuprSma27OKSUIDVkFAAACAEBIIYUUUkghhRRiiCGGGGKIIYcccsghp5xyCiqooIIKMsggg0wy6aSTTjrpqKOOOuootNBCCy200kpMMdVWY669Bl18c84555xzzjnnnHPOCUJDVgEAIAAABEIGGWQQQgghhRRSiCmmmHIKMsiA0JBVAAAgAIAAAAAAR5EUSbEUy7EczdEkT/IsURM10TNFU1RNVVVVVXVdV3Zl13Z113Z9WZiFW7h9WbiFW9iFXfeFYRiGYRiGYRiGYfh93/d93/d9IDRkFQAgAQCgIzmW4ymiIhqi4jmiA4SGrAIAZAAABAAgCZIiKZKjSaZmaq5pm7Zoq7Zty7Isy7IMhIasAgAAAQAEAAAAAACgaZqmaZqmaZqmaZqmaZqmaZqmaZpmWZZlWZZlWZZlWZZlWZZlWZZlWZZlWZZlWZZlWZZlWZZlWZZlWUBoyCoAQAIAQMdxHMdxJEVSJMdyLAcIDVkFAMgAAAgAQFIsxXI0R3M0x3M8x3M8R3REyZRMzfRMDwgNWQUAAAIACAAAAAAAQDEcxXEcydEkT1It03I1V3M913NN13VdV1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWB0JBVAAAEAAAhnWaWaoAIM5BhIDRkFQCAAAAAGKEIQwwIDVkFAAAEAACIoeQgmtCa8805DprloKkUm9PBiVSbJ7mpmJtzzjnnnGzOGeOcc84pypnFoJnQmnPOSQyapaCZ0JpzznkSmwetqdKac84Z55wOxhlhnHPOadKaB6nZWJtzzlnQmuaouRSbc86JlJsntblUm3POOeecc84555xzzqlenM7BOeGcc86J2ptruQldnHPO+WSc7s0J4ZxzzjnnnHPOOeecc84JQkNWAQBAAAAEYdgYxp2CIH2OBmIUIaYhkx50jw6ToDHIKaQejY5GSqmDUFIZJ6V0gtCQVQAAIAAAhBBSSCGFFFJIIYUUUkghhhhiiCGnnHIKKqikkooqyiizzDLLLLPMMsusw84667DDEEMMMbTSSiw11VZjjbXmnnOuOUhrpbXWWiullFJKKaUgNGQVAAACAEAgZJBBBhmFFFJIIYaYcsopp6CCCggNWQUAAAIACAAAAPAkzxEd0REd0REd0REd0REdz/EcURIlURIl0TItUzM9VVRVV3ZtWZd127eFXdh139d939eNXxeGZVmWZVmWZVmWZVmWZVmWZQlCQ1YBACAAAABCCCGEFFJIIYWUYowxx5yDTkIJgdCQVQAAIACAAAAAAEdxFMeRHMmRJEuyJE3SLM3yNE/zNNETRVE0TVMVXdEVddMWZVM2XdM1ZdNVZdV2Zdm2ZVu3fVm2fd/3fd/3fd/3fd/3fd/XdSA0ZBUAIAEAoCM5kiIpkiI5juNIkgSEhqwCAGQAAAQAoCiO4jiOI0mSJFmSJnmWZ4maqZme6amiCoSGrAIAAAEABAAAAAAAoGiKp5iKp4iK54iOKImWaYmaqrmibMqu67qu67qu67qu67qu67qu67qu67qu67qu67qu67qu67qu67pAaMgqAEACAEBHciRHciRFUiRFciQHCA1ZBQDIAAAIAMAxHENSJMeyLE3zNE/zNNETPdEzPVV0RRcIDVkFAAACAAgAAAAAAMCQDEuxHM3RJFFSLdVSNdVSLVVUPVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVdU0TdM0gdCQlQAAGQAAI0EGGYQQinKQQm49WAgx5iQFoTkGocQYhKcQMww5DSJ0kEEnPbiSOcMM8+BSKBVETIONJTeOIA3CplxJ5TgIQkNWBABRAACAMcgxxBhyzknJoETOMQmdlMg5J6WT0kkpLZYYMyklphJj45yj0knJpJQYS4qdpBJjia0AAIAABwCAAAuh0JAVAUAUAABiDFIKKYWUUs4p5pBSyjHlHFJKOaecU845CB2EyjEGnYMQKaUcU84pxxyEzEHlnIPQQSgAACDAAQAgwEIoNGRFABAnAOBwJM+TNEsUJUsTRc8UZdcTTdeVNM00NVFUVcsTVdVUVdsWTVW2JU0TTU30VFUTRVUVVdOWTVW1bc80ZdlUVd0WVdW2ZdsWfleWdd8zTVkWVdXWTVW1ddeWfV/WbV2YNM00NVFUVU0UVdVUVds2Vde2NVF0VVFVZVlUVVl2ZVn3VVfWfUsUVdVTTdkVVVW2Vdn1bVWWfeF0VV1XZdn3VVkWflvXheH2feEYVdXWTdfVdVWWfWHWZWG3dd8oaZppaqKoqpooqqqpqrZtqq6tW6LoqqKqyrJnqq6syrKvq65s65ooqq6oqrIsqqosq7Ks+6os67aoqrqtyrKwm66r67bvC8Ms67pwqq6uq7Ls+6os67qt68Zx67owfKYpy6ar6rqpurpu67pxzLZtHKOq6r4qy8KwyrLv67ovtHUhUVV13ZRd41dlWfdtX3eeW/eFsm07v637ynHrutL4Oc9vHLm2bRyzbhu/rfvG8ys/YTiOpWeatm2qqq2bqqvrsm4rw6zrQlFVfV2VZd83XVkXbt83jlvXjaKq6roqy76wyrIx3MZvHLswHF3bNo5b152yrQt9Y8j3Cc9r28Zx+zrj9nWjrwwJx48AAIABBwCAABPKQKEhKwKAOAEABiHnFFMQKsUgdBBS6iCkVDEGIXNOSsUclFBKaiGU1CrGIFSOScickxJKaCmU0lIHoaVQSmuhlNZSa7Gm1GLtIKQWSmktlNJaaqnG1FqMEWMQMuekZM5JCaW0FkppLXNOSuegpA5CSqWkFEtKLVbMScmgo9JBSKmkElNJqbVQSmulpBZLSjG2FFtuMdYcSmktpBJbSSnGFFNtLcaaI8YgZM5JyZyTEkppLZTSWuWYlA5CSpmDkkpKrZWSUsyck9JBSKmDjkpJKbaSSkyhlNZKSrGFUlpsMdacUmw1lNJaSSnGkkpsLcZaW0y1dRBaC6W0FkpprbVWa2qtxlBKayWlGEtKsbUWa24x5hpKaa2kEltJqcUWW44txppTazWm1mpuMeYaW2091ppzSq3W1FKNLcaaY2291Zp77yCkFkppLZTSYmotxtZiraGU1koqsZWSWmwx5tpajDmU0mJJqcWSUowtxppbbLmmlmpsMeaaUou15tpzbDX21FqsLcaaU0u11lpzj7n1VgAAwIADAECACWWg0JCVAEAUAABBiFLOSWkQcsw5KglCzDknqXJMQikpVcxBCCW1zjkpKcXWOQglpRZLKi3FVmspKbUWay0AAKDAAQAgwAZNicUBCg1ZCQBEAQAgxiDEGIQGGaUYg9AYpBRjECKlGHNOSqUUY85JyRhzDkIqGWPOQSgphFBKKimFEEpJJaUCAAAKHAAAAmzQlFgcoNCQFQFAFAAAYAxiDDGGIHRUMioRhExKJ6mBEFoLrXXWUmulxcxaaq202EAIrYXWMkslxtRaZq3EmForAADswAEA7MBCKDRkJQCQBwBAGKMUY845ZxBizDnoHDQIMeYchA4qxpyDDkIIFWPOQQghhMw5CCGEEELmHIQQQgihgxBCCKWU0kEIIYRSSukghBBCKaV0EEIIoZRSCgAAKnAAAAiwUWRzgpGgQkNWAgB5AACAMUo5B6GURinGIJSSUqMUYxBKSalyDEIpKcVWOQehlJRa7CCU0lpsNXYQSmktxlpDSq3FWGuuIaXWYqw119RajLXmmmtKLcZaa825AADcBQcAsAMbRTYnGAkqNGQlAJAHAIAgpBRjjDGGFGKKMeecQwgpxZhzzimmGHPOOeeUYow555xzjDHnnHPOOcaYc8455xxzzjnnnHOOOeecc84555xzzjnnnHPOOeecc84JAAAqcAAACLBRZHOCkaBCQ1YCAKkAAAARVmKMMcYYGwgxxhhjjDFGEmKMMcYYY2wxxhhjjDHGmGKMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhba6211lprrbXWWmuttdZaa60AQL8KBwD/BxtWRzgpGgssNGQlABAOAAAYw5hzjjkGHYSGKeikhA5CCKFDSjkoJYRQSikpc05KSqWklFpKmXNSUiolpZZS6iCk1FpKLbXWWgclpdZSaq211joIpbTUWmuttdhBSCml1lqLLcZQSkqttdhijDWGUlJqrcXYYqwxpNJSbC3GGGOsoZTWWmsxxhhrLSm11mKMtcZaa0mptdZiizXWWgsA4G5wAIBIsHGGlaSzwtHgQkNWAgAhAQAEQow555xzEEIIIVKKMeeggxBCCCFESjHmHHQQQgghhIwx56CDEEIIIYSQMeYcdBBCCCGEEDrnHIQQQgihhFJK5xx0EEIIIZRQQukghBBCCKGEUkopHYQQQiihhFJKKSWEEEIJpZRSSimlhBBCCKGEEkoppZQQQgillFJKKaWUEkIIIZRSSimllFJCCKGUUEoppZRSSgghhFJKKaWUUkoJIYRQSimllFJKKSGEEkoppZRSSimlAACAAwcAgAAj6CSjyiJsNOHCA1BoyEoAgAwAAHHYausp1sggxZyElkuEkHIQYi4RUoo5R7FlSBnFGNWUMaUUU1Jr6JxijFFPnWNKMcOslFZKKJGC0nKstXbMAQAAIAgAMBAhM4FAARQYyACAA4QEKQCgsMDQMVwEBOQSMgoMCseEc9JpAwAQhMgMkYhYDBITqoGiYjoAWFxgyAeADI2NtIsL6DLABV3cdSCEIAQhiMUBFJCAgxNueOINT7jBCTpFpQ4CAAAAAAABAB4AAJINICIimjmODo8PkBCREZISkxOUAAAAAADgAYAPAIAkBYiIiGaOo8PjAyREZISkxOQEJQAAAAAAAAAAAAgICAAAAAAABAAAAAgIT2dnUwAEugEAAAAAAAAISQAAAgAAAK53kAkFOjM2Ndekhj2CvV1AgdsXUTYG69yxV3eJobEdXDTI8dnZ3SP6997W4dSa/TeKs53YVbJ930+NR/+/s2A0tuzedIJFCAQA8GsAsuS0NxU/atI8IutdgXAdXR6YwtyfXhEy7aotcXaVVhWsSOw05XELa/MD/EV1CPtQfRTYY70TAFTK3kVzbq8Xs+PBnL5ZdcqW7vrROclWCt72skTeInGBuv/pv48IlEzGhP08EEgggOmTDKDSG17CqLmM6nbBMrTtceV6p3E6A/ynVRMF3DtXkp7VskprO7Pcta+RNgG6ZbwkIeG2T1xaQc7H2eY2buM2buM2buMQAVUVY4gQCJlwBYDVpz5/6cqVK5uy4tOH73/9/3+vvHLp0qVLly5d2jQ/P//3//7f//t//+///UUpFEue7dlLKYHl13//75/oIhQffPZnr0BJSUlJScmzP/uzP3tJSUkJhmnxr3//7//9hRcBilMMPLsxPPjsz/7sdV5CwXp+fn5+fn7+69//+39/cXFx8brXBaampqampqamjgNAmZqampqampqaYtzPz3/3rRYXEeQlU1N+AABQpqampqaqAA==";

  // ../boardzilla-core/ui/game/Game.tsx
  var Game_default = /* @__PURE__ */ __name(() => {
    const [game, position, selectMove, selected, setSelected, setAspectRatio, dragElement, boardJSON] = gameStore((s) => [s.game, s.position, s.selectMove, s.selected, s.setSelected, s.setAspectRatio, s.dragElement, s.boardJSON]);
    const clickAudio = (0, import_react4.useRef)(null);
    const [dimensions, setDimensions] = (0, import_react4.useState)();
    const [disambiguateElement, setDisambiguateElement] = (0, import_react4.useState)();
    const [victoryMessageDismissed, setVictoryMessageDismissed] = (0, import_react4.useState)(false);
    if (!position)
      return null;
    const player = game.players.atPosition(position);
    if (!player) {
      console.log("no player to render");
      return null;
    }
    const submitMove = /* @__PURE__ */ __name((pendingMove, ...args) => {
      clickAudio.current?.play();
      setDisambiguateElement(void 0);
      selectMove(pendingMove, ...args);
    }, "submitMove");
    const onSelectElement = /* @__PURE__ */ __name((moves, ...elements) => {
      clickAudio.current?.play();
      setDisambiguateElement(void 0);
      if (moves.length === 0)
        return;
      if (moves.length > 1) {
        setSelected([elements[0]]);
        return setDisambiguateElement({ element: elements[0], moves });
      }
      const move = moves[0];
      if (move.selection?.type === "board") {
        if (!move.selection.isMulti()) {
          return submitMove(move, ...elements);
        }
        const newSelected = selected.includes(elements[0]) ? selected.filter((s) => s !== elements[0]) : selected.concat([elements[0]]);
        setSelected(newSelected);
      }
    }, "onSelectElement");
    (0, import_react4.useEffect)(() => {
      const resize = /* @__PURE__ */ __name(() => {
        const aspectRatio = window.innerWidth / window.innerHeight;
        setAspectRatio(aspectRatio);
        const ratio = (game.board._ui.appearance.aspectRatio ?? 1) / aspectRatio;
        let rem = window.innerHeight / 25;
        if (ratio > 1) {
          setDimensions({
            width: 100,
            height: 100 / ratio
          });
          rem /= ratio;
        } else {
          setDimensions({
            width: 100 * ratio,
            height: 100
          });
        }
        window.document.childNodes[0].style.fontSize = rem + "px";
      }, "resize");
      window.addEventListener("resize", resize);
      resize();
      return () => window.removeEventListener("resize", resize);
    }, []);
    if (!dimensions)
      return;
    console.log("GAME render");
    return /* @__PURE__ */ import_react4.default.createElement("div", { id: "game", className: game.board._ui.appearance.className, style: { position: "relative", width: dimensions.width + "%", height: dimensions.height + "%" }, onClick: () => game.phase === "finished" && setVictoryMessageDismissed(true) }, /* @__PURE__ */ import_react4.default.createElement("audio", { ref: clickAudio, src: click_004_default, id: "click" }), /* @__PURE__ */ import_react4.default.createElement("div", { id: "play-area", style: { width: "100%", height: "100%" }, className: dragElement ? "in-drag-movement" : "" }, /* @__PURE__ */ import_react4.default.createElement(
      Element_default,
      {
        element: game.board,
        json: boardJSON[0],
        selected,
        onSelectElement
      }
    ), /* @__PURE__ */ import_react4.default.createElement("div", { style: { position: "absolute", backgroundColor: "red" } })), /* @__PURE__ */ import_react4.default.createElement(PlayerControls_default, { onSubmit: submitMove, disambiguateElement }), game.godMode && /* @__PURE__ */ import_react4.default.createElement("div", { className: "god-mode-enabled" }, "God mode enabled"), game.phase === "finished" && !victoryMessageDismissed && /* @__PURE__ */ import_react4.default.createElement("div", { className: "game-finished" }, "Game finished"));
  }, "default");

  // ../boardzilla-core/ui/setup/Setup.tsx
  var import_react55 = __toESM(require_react());

  // ../boardzilla-core/ui/setup/components/Seating.tsx
  var import_react54 = __toESM(require_react());

  // ../boardzilla-core/game/flow/flow.ts
  var Flow = class _Flow {
    constructor({ name, do: block }) {
      // if block is an array, indicates the index of execution
      this.type = "sequence";
      this.name = name;
      this.block = block;
      this.top = this;
    }
    static {
      __name(this, "Flow");
    }
    validateNoDuplicate() {
      const name = this.name;
      this.name = void 0;
      if (name && this.getStep(name))
        throw Error(`Duplicate flow name: ${name}`);
      this.name = name;
    }
    flowStepArgs() {
      const args = {};
      let flow = this.top;
      while (flow instanceof _Flow) {
        if ("position" in flow && flow.position) {
          if (flow.type === "action" && "action" in flow.position && "args" in flow.position) {
            args[flow.position.action] = flow.position.args;
          }
          if ("value" in flow.position && flow.name) {
            args[flow.name] = flow.position.value;
          }
        }
        flow = flow.step;
      }
      return args;
    }
    branchJSON(forPlayer = true) {
      if (this.position === void 0 && this.sequence === void 0)
        return [];
      let branch = {
        type: this.type
      };
      if (this.name)
        branch.name = this.name;
      if (this.position !== void 0)
        branch.position = this.toJSON(forPlayer);
      if (this.sequence !== void 0 && this.currentBlock() instanceof Array)
        branch.sequence = this.sequence;
      const thisBranch = branch;
      if (this.step instanceof _Flow)
        return [thisBranch].concat(this.step.branchJSON(forPlayer));
      return [thisBranch];
    }
    setBranchFromJSON(branch) {
      const node = branch[0];
      if (!node)
        throw Error(`Insufficient position elements sent to flow for ${this.name}`);
      if (node.type !== this.type || node.name !== this.name) {
        throw Error(`Flow mismatch. Trying to set ${node.type}:${node.name} on ${this.type}:${this.name}`);
      }
      this.setPositionFromJSON(node.position, node.sequence);
      if (this.step instanceof _Flow) {
        this.step.setBranchFromJSON(branch.slice(1));
      }
    }
    setPosition(position, sequence, reset = true) {
      this.position = position;
      const block = this.currentBlock();
      if (!block) {
        this.step = void 0;
      } else if (block instanceof Array) {
        if (sequence === void 0)
          sequence = 0;
        this.sequence = sequence;
        if (!block[sequence])
          throw Error(`Invalid sequence for ${this.type}:${this.name} ${sequence}/${block.length}`);
        this.step = block[sequence];
      } else {
        this.step = block;
      }
      if (this.step instanceof _Flow) {
        this.step.game = this.game;
        this.step.top = this.top;
        this.step.parent = this;
        if (reset)
          this.step.reset();
      }
    }
    setPositionFromJSON(positionJSON, sequence) {
      this.setPosition(this.fromJSON(positionJSON), sequence, false);
    }
    currentFlow() {
      return !this.step || typeof this.step === "function" || typeof this.step === "string" ? this : this.step.currentFlow();
    }
    actionNeeded() {
      const flow = this.currentFlow();
      if ("awaitingAction" in flow) {
        const actions = flow.awaitingAction();
        if (actions)
          return {
            step: flow.name,
            prompt: flow.prompt,
            actions,
            skipIfOnlyOne: flow.skipIfOnlyOne,
            expand: flow.expand
          };
      }
    }
    processMove(move) {
      const step = this.currentFlow();
      if (!step || step.type !== "action")
        throw Error(`Cannot process action currently ${JSON.stringify(this.branchJSON())}`);
      return step.processMove(move);
    }
    getStep(name) {
      if (this.name === name) {
        this.validateNoDuplicate();
        return this;
      }
      const steps = this.allSteps();
      if (!steps)
        return;
      for (const step of steps instanceof Array ? steps : [steps]) {
        if (step instanceof _Flow) {
          const found = step.getStep(name);
          if (found)
            return found;
        }
      }
    }
    /**
     * Advance flow one step and return FlowControl.complete if complete,
     * FlowControl.ok if can continue, Do to interupted the current
     * loop. Return a list of actions if now waiting for player input. override
     * for self-contained flows that do not have subflows.
     */
    playOneStep() {
      const step = this.step;
      let result = "COMPLETE" /* complete */;
      if (step instanceof Function) {
        result = step(this.flowStepArgs()) || "COMPLETE" /* complete */;
      } else if (typeof step === "string") {
        result = step;
      } else if (step instanceof _Flow) {
        const actions = step.actionNeeded();
        if (actions?.actions)
          return actions.actions;
        result = step.playOneStep();
      }
      if (result === "OK" /* ok */ || result instanceof Array)
        return result;
      if (result !== "COMPLETE" /* complete */) {
        if ("advance" in this && typeof this.advance === "function" && result === "CONTINUE" /* continue */)
          return this.advance();
        if ("repeat" in this && typeof this.repeat === "function" && result === "REPEAT" /* repeat */)
          return this.repeat();
        if ("exit" in this && typeof this.exit === "function" && result === "BREAK" /* break */)
          return this.exit();
        return result;
      }
      const block = this.currentBlock();
      if (block instanceof Array) {
        if (this.sequence !== void 0) {
          if (this.sequence + 1 !== block.length) {
            this.setPosition(this.position, this.sequence + 1);
            return "OK" /* ok */;
          }
        }
      }
      return this.advance();
    }
    // play until action required (returns list) or game over
    play() {
      let step;
      do {
        step = this.playOneStep();
      } while (step === "OK" /* ok */ && this.game.phase !== "finished");
      if (step === "CONTINUE" /* continue */ || step === "REPEAT" /* repeat */ || step === "BREAK" /* break */)
        throw Error("Cannot skip/repeat/break when not in a loop");
      if (step !== "COMPLETE" /* complete */ && step !== "OK" /* ok */)
        return step;
    }
    // must override. reset runs any logic needed and call setPosition. Must not modify state.
    reset() {
      this.setPosition(null);
    }
    // must override. must rely solely on this.position
    currentBlock() {
      return this.block;
    }
    // override if position contains objects that need serialization
    toJSON(forPlayer = true) {
      return this.position;
    }
    // override if position contains objects that need deserialization
    fromJSON(json) {
      return json;
    }
    // override for steps that advance through their subflows. call setPosition if needed. return ok/complete
    advance() {
      return "COMPLETE" /* complete */;
    }
    // override return all subflows
    allSteps() {
      return this.block ?? null;
    }
    toString() {
      return "";
    }
  };

  // ../boardzilla-core/game/game.ts
  var import_random_seed2 = __toESM(require_random_seed());
  var Game = class {
    constructor() {
      this.players = new PlayerCollection();
      this.phase = "define";
      this.messages = [];
      this.godMode = false;
      this.winner = [];
    }
    static {
      __name(this, "Game");
    }
    /**
     * configuration functions
     */
    defineFlow(flowDefinition) {
      if (this.phase !== "define")
        throw Error("cannot call defineFlow once started");
      this.flowDefinition = flowDefinition;
    }
    defineActions(actions) {
      if (this.phase !== "define")
        throw Error("cannot call defineActions once started");
      this.actions = actions;
    }
    defineBoard(className, classRegistry) {
      if (this.phase !== "define")
        throw Error("cannot call defineBoard once started");
      this.board = new className({ game: this, classRegistry: [GameElement, Space, Piece, ...classRegistry] });
      return this.board;
    }
    definePlayers(className) {
      if (this.phase !== "define")
        throw Error("cannot call definePlayer once started");
      this.players = new PlayerCollection();
      this.players.game = this;
      this.players.className = className;
      return this.players;
    }
    setSettings(settings) {
      this.settings = settings;
    }
    setRandomSeed(rseed) {
      this.rseed = rseed;
      this.random = import_random_seed2.default.create(rseed).random;
    }
    /**
     * flow functions
     */
    start() {
      if (this.phase === "started")
        throw Error("cannot call start once started");
      if (!this.players.length) {
        throw Error("No players");
      }
      this.phase = "started";
      this.buildFlow();
      this.flow.reset();
    }
    finish(winner) {
      this.phase = "finished";
      if (winner)
        this.winner = winner instanceof Array ? winner : [winner];
    }
    buildFlow() {
      const flow = this.flowDefinition(this.board);
      this.flow = new Flow({ do: flow });
      this.flow.game = this;
    }
    /**
     * state management functions
     */
    setState(state) {
      this.players.fromJSON(state.players);
      this.setSettings(state.settings);
      this.board.fromJSON(state.board);
      this.buildFlow();
      this.flow.setBranchFromJSON(state.position);
      this.setRandomSeed(state.rseed);
    }
    // state variables for server updates. does not includes phase, current player or winners.
    getState(forPlayer) {
      return {
        players: this.players.map((p) => p.toJSON()),
        // TODO scrub
        settings: this.settings,
        position: this.flow.branchJSON(!!forPlayer),
        board: this.board.allJSON(forPlayer),
        rseed: this.rseed
      };
    }
    getPlayerStates() {
      return this.players.map((p) => ({
        position: p.position,
        state: this.getState(p.position)
      }));
    }
    getUpdate() {
      if (this.phase === "started") {
        return {
          game: {
            ...this.getState(),
            currentPlayers: this.players.currentPosition ? [this.players.currentPosition] : [],
            phase: this.phase
          },
          players: this.getPlayerStates(),
          messages: this.messages
        };
      }
      if (this.phase === "finished") {
        return {
          game: {
            ...this.getState(),
            winners: this.winner.map((p) => p.position),
            phase: this.phase
          },
          players: this.getPlayerStates(),
          messages: this.messages
        };
      }
      throw Error("unable to initialize game");
    }
    contextualizeBoardToPlayer(player) {
      const prev = this.board._ctx.player;
      this.board._ctx.player = player;
      return prev;
    }
    inContextOfPlayer(player, fn) {
      const prev = this.contextualizeBoardToPlayer(player);
      const results = fn();
      this.contextualizeBoardToPlayer(prev);
      return results;
    }
    trackMovement(track = true) {
      this.board._ctx.trackMovement = track;
    }
    /**
     * action functions
     */
    action(name, player) {
      if (this.godMode) {
        const godModeAction = this.godModeActions()[name];
        if (godModeAction) {
          godModeAction.name = name;
          return godModeAction;
        }
      }
      return this.inContextOfPlayer(player, () => {
        const playerAction = this.actions(this.board, action, player)[name];
        if (!playerAction)
          throw Error(`No such action ${name}`);
        playerAction.name = name;
        return playerAction;
      });
    }
    godModeActions() {
      if (this.phase !== "started")
        throw Error("cannot call god mode actions until started");
      return {
        _godMove: action({
          prompt: "Move"
        }).move({
          choosePiece: this.board.all(Piece),
          chooseInto: this.board.all(GameElement)
        }),
        _godEdit: action({
          prompt: "Change"
        }).chooseOnBoard({
          choices: this.board.all(GameElement)
        }).chooseFrom({
          prompt: "Change property",
          choices: (el) => Object.keys(el).filter((a) => !["_t", "_ctx", "_ui", "_eventHandlers", "_visible", "mine", "board", "game", "pile", "mine"].includes(a))
        }).enterText({
          prompt: (_, prop) => `Change ${prop}`,
          initial: (el, attr) => String(el[attr])
        }).do((el, attr, value) => {
          if (value === "true") {
            value = true;
          } else if (value === "false") {
            value = false;
          } else if (parseInt(value).toString() === value) {
            value = parseInt(value);
          }
          if (attr !== "mine")
            el[attr] = value;
        })
      };
    }
    play() {
      if (this.phase !== "started")
        throw Error("cannot call play until started");
      return this.flow.play();
    }
    // given a player's move (minimum a selected action), attempts to process
    // it. if not, returns next selection for that player, plus any implied partial
    // moves
    processMove({ player, action: action2, args }) {
      let error;
      this.messages = [];
      return this.inContextOfPlayer(player, () => {
        if (this.godMode && this.godModeActions()[action2]) {
          const godModeAction = this.godModeActions()[action2];
          error = godModeAction._process(...args);
        } else {
          error = this.flow.processMove({
            action: action2,
            player: player.position,
            args
          });
        }
        if (error)
          return error;
      });
    }
    allowedActions(player) {
      const allowedActions = this.godMode ? Object.keys(this.godModeActions()) : [];
      if (this.players.currentPosition && player !== this.players.current())
        return {
          actions: allowedActions,
          skipIfOnlyOne: true,
          expand: true
        };
      return this.inContextOfPlayer(player, () => {
        const actionStep = this.flow.actionNeeded();
        if (actionStep) {
          return {
            step: actionStep.step,
            prompt: actionStep.prompt,
            skipIfOnlyOne: actionStep.skipIfOnlyOne,
            expand: actionStep.expand,
            actions: allowedActions.concat(actionStep.actions?.filter((a) => this.action(a, player).isPossible()) || [])
          };
        }
        return {
          skipIfOnlyOne: true,
          expand: true,
          actions: []
        };
      });
    }
    getResolvedSelections(player, action2, ...args) {
      const allowedActions = this.allowedActions(player);
      if (!allowedActions.actions.length)
        return;
      const { step, prompt, actions, skipIfOnlyOne, expand } = allowedActions;
      if (!action2) {
        let possibleActions = [];
        let resolvedSelections = [];
        for (const action3 of actions) {
          const playerAction = this.action(action3, player);
          let submoves = playerAction._getResolvedSelections();
          if (submoves !== void 0) {
            possibleActions.push(action3);
            if (expand && submoves.length === 0) {
              submoves = [{
                action: action3,
                args: [],
                selection: new Selection({ prompt: playerAction.prompt, value: action3 }).resolve()
              }];
            }
            resolvedSelections = resolvedSelections.concat(submoves);
          }
        }
        if (!possibleActions.length)
          return void 0;
        if (skipIfOnlyOne && possibleActions.length === 1)
          return { step, prompt, moves: resolvedSelections };
        if (expand && resolvedSelections.length)
          return { step, prompt, moves: resolvedSelections };
        return {
          step,
          prompt,
          moves: [{
            action: "/",
            args: [],
            selection: new Selection({ prompt, selectFromChoices: { choices: actions } }).resolve()
          }]
        };
      } else {
        const moves = this.action(action2, player)?._getResolvedSelections(...args);
        if (moves)
          return { step, prompt, moves };
      }
    }
    message(message, ...args) {
      let replacements = {};
      if (args.length) {
        const lastArg = args[args.length - 1];
        if (typeof lastArg === "object" && !(lastArg instanceof Array) && !(lastArg instanceof Player) && !(lastArg instanceof GameElement)) {
          replacements = Object.fromEntries(Object.entries(lastArg).map(([k, v]) => [k, escapeArgument(v)]));
          ;
          args = args.slice(0, -1);
        }
      }
      for (let i = 0; i !== args.length; i++) {
        replacements[i + 1] = escapeArgument(args[i]);
      }
      Object.entries(replacements).forEach(([k, v]) => {
        message = message.replace(new RegExp(`\\$${k}\\b`), v);
      });
      this.messages.push({ body: message });
    }
  };

  // ../boardzilla-core/game/settingComponents.tsx
  var import_react5 = __toESM(require_react());
  var toggleSetting = /* @__PURE__ */ __name((label) => ({ name, settings, updateKey }) => /* @__PURE__ */ import_react5.default.createElement("div", null, /* @__PURE__ */ import_react5.default.createElement("label", null, label, ": "), /* @__PURE__ */ import_react5.default.createElement("input", { type: "checkbox", value: settings && settings[name], onChange: (e) => updateKey(name, e.target.checked) })), "toggleSetting");
  var choiceSetting = /* @__PURE__ */ __name((label, choices) => ({ name, settings, updateKey }) => /* @__PURE__ */ import_react5.default.createElement("div", null, /* @__PURE__ */ import_react5.default.createElement("label", null, label, ": "), /* @__PURE__ */ import_react5.default.createElement("select", { value: settings ? settings[name] || "" : "", onChange: (e) => updateKey(name, e.target.value) }, Object.entries(choices).map(([value, name2]) => /* @__PURE__ */ import_react5.default.createElement("option", { key: value, value }, name2)))), "choiceSetting");
  var textSetting = /* @__PURE__ */ __name((label) => ({ name, settings, updateKey }) => /* @__PURE__ */ import_react5.default.createElement("div", null, /* @__PURE__ */ import_react5.default.createElement("label", null, label, ": "), /* @__PURE__ */ import_react5.default.createElement("input", { value: settings ? settings[name] || "" : "", onChange: (e) => updateKey(name, e.target.value) })), "textSetting");
  var numberSetting = /* @__PURE__ */ __name((label, min, max) => ({ name, settings, updateKey }) => /* @__PURE__ */ import_react5.default.createElement("div", null, /* @__PURE__ */ import_react5.default.createElement("label", null, label, ": "), /* @__PURE__ */ import_react5.default.createElement("input", { type: "number", min, max, value: settings ? settings[name] || "" : "", onChange: (e) => updateKey(name, e.target.value) })), "numberSetting");

  // ../boardzilla-core/game/flow/action-step.ts
  var ActionStep = class extends Flow {
    constructor({ name, player, actions, prompt, expand, skipIfOnlyOne }) {
      super({ name });
      this.type = "action";
      this.actions = actions;
      this.prompt = prompt;
      this.expand = expand ?? true;
      this.skipIfOnlyOne = skipIfOnlyOne ?? false;
      this.player = player;
    }
    static {
      __name(this, "ActionStep");
    }
    reset() {
      if (this.player)
        this.game.players.setCurrent(this.player(this.flowStepArgs()));
      this.position = {};
    }
    currentBlock() {
      if (!this.position.action)
        return;
      const step = this.actions[this.position.action];
      if (step)
        return step;
    }
    awaitingAction() {
      if (!this.position.action) {
        return Object.keys(this.actions);
      }
    }
    processMove(move) {
      if (!(move.action in this.actions))
        throw Error(`No action ${move.action} available at this point. Waiting for ${Object.keys(this.actions).join(", ")}`);
      const game = this.game;
      if (game.players.currentPosition && move.player !== game.players.currentPosition) {
        throw Error(`move ${move.action} from player #${move.player} not allowed. player #${game.players.currentPosition} turn`);
      }
      const player = game.players.atPosition(move.player);
      const gameAction = game.action(move.action, player);
      const error = gameAction._process(...move.args);
      if (error) {
        return error;
      } else {
        this.setPosition(move);
        for (const message of gameAction._cfg.messages) {
          if (typeof message === "function") {
            game.message(message(...move.args));
          } else {
            game.message(message, ...move.args, { player });
          }
        }
      }
    }
    toJSON(forPlayer = true) {
      if (!this.position?.action)
        return {};
      return {
        player: this.position.player,
        action: this.position.action,
        args: this.position.args?.map((a) => serializeArg(a, forPlayer))
      };
    }
    fromJSON(position) {
      return {
        player: position.player,
        action: position.action,
        args: position.args?.map((a) => deserializeArg(a, this.game))
      };
    }
    allSteps() {
      return Object.values(this.actions).reduce((a, f) => a.concat(f), []);
    }
    toString() {
      return `step${this.name ? ":" + this.name : ""} (${Object.keys(this.actions).join(", ")})`;
    }
  };

  // ../boardzilla-core/game/flow/while-loop.ts
  var WhileLoop = class extends Flow {
    constructor({ do: block, while: whileCondition }) {
      super({ do: block });
      this.type = "loop";
      this.while = whileCondition;
    }
    static {
      __name(this, "WhileLoop");
    }
    reset() {
      const position = { index: 0 };
      this.setPosition(position);
      if (!this.while(this.flowStepArgs()))
        this.setPosition({ ...position, index: -1 });
    }
    currentBlock() {
      if (this.position.index !== -1)
        return this.block;
    }
    advance() {
      const position = { index: this.position.index + 1 };
      this.setPosition(position);
      if (!this.while(this.flowStepArgs()))
        return this.exit();
      return "OK" /* ok */;
    }
    repeat() {
      this.setPosition(this.position);
      if (!this.while(this.flowStepArgs()))
        return this.exit();
      return "OK" /* ok */;
    }
    exit() {
      this.setPosition({ ...this.position, index: -1 });
      return "COMPLETE" /* complete */;
    }
    allSteps() {
      return this.block;
    }
    toString() {
      return `loop${this.name ? ":" + this.name : ""} (index: ${this.position.index})$`;
    }
  };

  // ../boardzilla-core/game/flow/for-loop.ts
  var ForLoop = class extends Flow {
    constructor({ name, initial, next, do: block, while: whileCondition }) {
      super({ name, do: block });
      this.type = "loop";
      this.initial = initial;
      this.next = next;
      this.while = whileCondition;
    }
    static {
      __name(this, "ForLoop");
    }
    reset() {
      const position = {
        index: 0,
        value: this.initial instanceof Function ? this.initial(this.flowStepArgs()) : this.initial
      };
      this.setPosition(position);
      if (!this.while(position.value))
        this.setPosition({ ...position, index: -1 });
    }
    currentBlock() {
      if (this.position.index !== -1)
        return this.block;
    }
    advance() {
      if (this.position.index === -1)
        return "COMPLETE" /* complete */;
      const position = { ...this.position, index: this.position.index + 1 };
      if (this.next && this.position.value !== void 0)
        position.value = this.next(this.position.value);
      this.setPosition(position);
      if (!this.while(position.value))
        return this.exit();
      return "OK" /* ok */;
    }
    repeat() {
      this.setPosition(this.position);
      if (!this.while(this.position.value))
        return this.exit();
      return "OK" /* ok */;
    }
    exit() {
      this.setPosition({ ...this.position, index: -1 });
      return "COMPLETE" /* complete */;
    }
    toString() {
      return `loop${this.name ? ":" + this.name : ""} (index: ${this.position.index}, value: ${this.position.value})$`;
    }
  };

  // ../boardzilla-core/game/flow/each-player.ts
  var EachPlayer = class extends ForLoop {
    static {
      __name(this, "EachPlayer");
    }
    constructor({ name, startingPlayer, nextPlayer, turns, continueUntil, do: block }) {
      let initial;
      if (startingPlayer) {
        initial = /* @__PURE__ */ __name(() => startingPlayer instanceof Function ? startingPlayer(this.flowStepArgs()) : startingPlayer, "initial");
      } else {
        initial = /* @__PURE__ */ __name(() => {
          this.game.players.setTurnMode();
          return this.game.players.current();
        }, "initial");
      }
      let next = /* @__PURE__ */ __name((player) => nextPlayer ? nextPlayer(player) : this.game.players.after(player), "next");
      super({
        name,
        initial,
        next,
        while: (player) => continueUntil !== void 0 ? !continueUntil(player) : this.position.index < this.game.players.length * (turns || 1),
        do: block
      });
    }
    setPosition(position, sequence, reset = true) {
      super.setPosition(position, sequence, reset);
      if (this.position.value) {
        this.game.players.setCurrent(this.position.value);
        this.game.contextualizeBoardToPlayer(this.position.value);
      }
    }
    toJSON() {
      return {
        index: this.position.index,
        value: this.position.value ? serializeSingleArg(this.position.value) : void 0
      };
    }
    fromJSON(position) {
      return {
        index: position.index,
        value: position.value ? deserializeSingleArg(position.value, this.game) : void 0
      };
    }
    allSteps() {
      return this.block;
    }
    toString() {
      return `each-player${this.name ? ":" + this.name : ""} (player: ${this.position?.value?.position}`;
    }
  };

  // ../boardzilla-core/game/flow/switch-case.ts
  var SwitchCase = class extends Flow {
    constructor({ name, switch: switchExpr, cases, default: def }) {
      super({ name });
      this.type = "switch-case";
      this.switch = switchExpr;
      this.cases = cases;
      this.default = def;
    }
    static {
      __name(this, "SwitchCase");
    }
    reset() {
      const test = typeof this.switch === "function" ? this.switch(this.flowStepArgs()) : this.switch;
      let position = { index: -1, value: test };
      for (let c = 0; c != this.cases.length; c += 1) {
        const ca = this.cases[c];
        if ("test" in ca && ca.test(test) || "eq" in ca && ca.eq === test) {
          position.index = c;
          break;
        }
      }
      if (position.index === -1 && this.default)
        position.default = true;
      this.setPosition(position);
    }
    currentBlock() {
      if (this.position.default)
        return this.default;
      if (this.position.index !== void 0 && this.position.index >= 0) {
        return this.cases[this.position.index].do;
      }
    }
    toJSON(forPlayer = true) {
      return {
        index: this.position.index,
        value: serialize(this.position.value, forPlayer),
        default: !!this.position.default
      };
    }
    fromJSON(position) {
      return {
        index: position.index,
        value: deserialize(position.value, this.game),
        default: position.default
      };
    }
    allSteps() {
      const cases = this.cases.reduce((a, f) => a.concat(f.do ? f.do instanceof Array ? f.do : [f.do] : []), []);
      const defaultExpr = this.default ? this.default instanceof Array ? this.default : [this.default] : [];
      return cases.concat(defaultExpr);
    }
    toString() {
      return `switch-case${this.name ? ":" + this.name : ""} (${this.position.index})`;
    }
  };

  // ../boardzilla-core/game/flow/if-else.ts
  var If = class extends SwitchCase {
    static {
      __name(this, "If");
    }
    constructor({ name, if: test, do: doExpr, else: elseExpr }) {
      super({ name, switch: test, cases: [{ eq: true, do: doExpr }], default: elseExpr });
    }
    toString() {
      return `if-else${this.name ? ":" + this.name : ""} (${this.position.index})`;
    }
  };

  // ../boardzilla-core/game/flow/index.ts
  var playerActions = /* @__PURE__ */ __name((options) => new ActionStep(options), "playerActions");
  var whileLoop = /* @__PURE__ */ __name((options) => new WhileLoop(options), "whileLoop");
  var eachPlayer = /* @__PURE__ */ __name((options) => new EachPlayer(options), "eachPlayer");
  var ifElse = /* @__PURE__ */ __name((options) => new If(options), "ifElse");

  // ../boardzilla-core/game/index.ts
  var boardClasses = /* @__PURE__ */ __name((_) => ({
    GameElement,
    Board,
    Space,
    Piece
  }), "boardClasses");
  var createGame = /* @__PURE__ */ __name(({ playerClass, boardClass, elementClasses, settings, setup, flow, actions, breakpoints, layout }) => (state, options) => {
    console.time("setup");
    const game = new Game();
    let rseed = "";
    if (state && "rseed" in state) {
      rseed = state.rseed;
    } else {
      if (globalThis.window?.sessionStorage) {
        rseed = sessionStorage.getItem("rseed");
        if (!rseed) {
          rseed = String(Math.random());
          sessionStorage.setItem("rseed", rseed);
        }
      }
    }
    game.setRandomSeed(rseed);
    game.setupComponents = settings;
    game.definePlayers(playerClass);
    game.defineBoard(boardClass, elementClasses || []);
    game.defineFlow(flow);
    game.defineActions(actions);
    if (state)
      game.setSettings(state.settings);
    if (state) {
      if (!("board" in state)) {
        game.players.fromJSON(state.players);
        if (options?.start) {
          if (setup)
            setup(game.board);
          game.start();
        }
      } else {
        game.players.fromJSON(state.players);
        if (options?.start) {
          if (setup)
            setup(game.board);
        }
        if (options?.trackMovement)
          game.trackMovement(true);
        game.phase = "started";
        game.setState(state);
      }
    } else {
      game.phase = "new";
    }
    if (options?.start) {
      if (game.phase !== "finished")
        game.play();
      if (options?.currentPlayerPosition)
        game.players.setCurrent(options?.currentPlayerPosition);
    }
    game.board._ui.breakpoints = breakpoints;
    game.board._ui.setupLayout = layout;
    console.timeEnd("setup");
    return game;
  }, "createGame");

  // ../boardzilla-core/node_modules/react-color/es/components/alpha/Alpha.js
  var import_react16 = __toESM(require_react());
  var import_reactcss9 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/common/Alpha.js
  var import_react7 = __toESM(require_react());
  var import_reactcss2 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/helpers/alpha.js
  var calculateChange = /* @__PURE__ */ __name(function calculateChange2(e, hsl, direction, initialA, container) {
    var containerWidth = container.clientWidth;
    var containerHeight = container.clientHeight;
    var x = typeof e.pageX === "number" ? e.pageX : e.touches[0].pageX;
    var y = typeof e.pageY === "number" ? e.pageY : e.touches[0].pageY;
    var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
    var top = y - (container.getBoundingClientRect().top + window.pageYOffset);
    if (direction === "vertical") {
      var a = void 0;
      if (top < 0) {
        a = 0;
      } else if (top > containerHeight) {
        a = 1;
      } else {
        a = Math.round(top * 100 / containerHeight) / 100;
      }
      if (hsl.a !== a) {
        return {
          h: hsl.h,
          s: hsl.s,
          l: hsl.l,
          a,
          source: "rgb"
        };
      }
    } else {
      var _a = void 0;
      if (left < 0) {
        _a = 0;
      } else if (left > containerWidth) {
        _a = 1;
      } else {
        _a = Math.round(left * 100 / containerWidth) / 100;
      }
      if (initialA !== _a) {
        return {
          h: hsl.h,
          s: hsl.s,
          l: hsl.l,
          a: _a,
          source: "rgb"
        };
      }
    }
    return null;
  }, "calculateChange");

  // ../boardzilla-core/node_modules/react-color/es/components/common/Checkboard.js
  var import_react6 = __toESM(require_react());
  var import_reactcss = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/helpers/checkboard.js
  var checkboardCache = {};
  var render = /* @__PURE__ */ __name(function render2(c1, c2, size, serverCanvas) {
    if (typeof document === "undefined" && !serverCanvas) {
      return null;
    }
    var canvas = serverCanvas ? new serverCanvas() : document.createElement("canvas");
    canvas.width = size * 2;
    canvas.height = size * 2;
    var ctx = canvas.getContext("2d");
    if (!ctx) {
      return null;
    }
    ctx.fillStyle = c1;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = c2;
    ctx.fillRect(0, 0, size, size);
    ctx.translate(size, size);
    ctx.fillRect(0, 0, size, size);
    return canvas.toDataURL();
  }, "render");
  var get = /* @__PURE__ */ __name(function get2(c1, c2, size, serverCanvas) {
    var key = c1 + "-" + c2 + "-" + size + (serverCanvas ? "-server" : "");
    if (checkboardCache[key]) {
      return checkboardCache[key];
    }
    var checkboard = render(c1, c2, size, serverCanvas);
    checkboardCache[key] = checkboard;
    return checkboard;
  }, "get");

  // ../boardzilla-core/node_modules/react-color/es/components/common/Checkboard.js
  var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var Checkboard = /* @__PURE__ */ __name(function Checkboard2(_ref) {
    var white = _ref.white, grey = _ref.grey, size = _ref.size, renderers = _ref.renderers, borderRadius = _ref.borderRadius, boxShadow = _ref.boxShadow, children = _ref.children;
    var styles = (0, import_reactcss.default)({
      "default": {
        grid: {
          borderRadius,
          boxShadow,
          absolute: "0px 0px 0px 0px",
          background: "url(" + get(white, grey, size, renderers.canvas) + ") center left"
        }
      }
    });
    return (0, import_react6.isValidElement)(children) ? import_react6.default.cloneElement(children, _extends({}, children.props, { style: _extends({}, children.props.style, styles.grid) })) : import_react6.default.createElement("div", { style: styles.grid });
  }, "Checkboard");
  Checkboard.defaultProps = {
    size: 8,
    white: "transparent",
    grey: "rgba(0,0,0,.08)",
    renderers: {}
  };
  var Checkboard_default = Checkboard;

  // ../boardzilla-core/node_modules/react-color/es/components/common/Alpha.js
  var _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var _createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    __name(defineProperties, "defineProperties");
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  __name(_classCallCheck, "_classCallCheck");
  function _possibleConstructorReturn(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  __name(_possibleConstructorReturn, "_possibleConstructorReturn");
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  __name(_inherits, "_inherits");
  var Alpha = function(_ref) {
    _inherits(Alpha2, _ref);
    function Alpha2() {
      var _ref2;
      var _temp, _this, _ret;
      _classCallCheck(this, Alpha2);
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Alpha2.__proto__ || Object.getPrototypeOf(Alpha2)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function(e) {
        var change = calculateChange(e, _this.props.hsl, _this.props.direction, _this.props.a, _this.container);
        change && typeof _this.props.onChange === "function" && _this.props.onChange(change, e);
      }, _this.handleMouseDown = function(e) {
        _this.handleChange(e);
        window.addEventListener("mousemove", _this.handleChange);
        window.addEventListener("mouseup", _this.handleMouseUp);
      }, _this.handleMouseUp = function() {
        _this.unbindEventListeners();
      }, _this.unbindEventListeners = function() {
        window.removeEventListener("mousemove", _this.handleChange);
        window.removeEventListener("mouseup", _this.handleMouseUp);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    __name(Alpha2, "Alpha");
    _createClass(Alpha2, [{
      key: "componentWillUnmount",
      value: /* @__PURE__ */ __name(function componentWillUnmount() {
        this.unbindEventListeners();
      }, "componentWillUnmount")
    }, {
      key: "render",
      value: /* @__PURE__ */ __name(function render3() {
        var _this2 = this;
        var rgb = this.props.rgb;
        var styles = (0, import_reactcss2.default)({
          "default": {
            alpha: {
              absolute: "0px 0px 0px 0px",
              borderRadius: this.props.radius
            },
            checkboard: {
              absolute: "0px 0px 0px 0px",
              overflow: "hidden",
              borderRadius: this.props.radius
            },
            gradient: {
              absolute: "0px 0px 0px 0px",
              background: "linear-gradient(to right, rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 0) 0%,\n           rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 1) 100%)",
              boxShadow: this.props.shadow,
              borderRadius: this.props.radius
            },
            container: {
              position: "relative",
              height: "100%",
              margin: "0 3px"
            },
            pointer: {
              position: "absolute",
              left: rgb.a * 100 + "%"
            },
            slider: {
              width: "4px",
              borderRadius: "1px",
              height: "8px",
              boxShadow: "0 0 2px rgba(0, 0, 0, .6)",
              background: "#fff",
              marginTop: "1px",
              transform: "translateX(-2px)"
            }
          },
          "vertical": {
            gradient: {
              background: "linear-gradient(to bottom, rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 0) 0%,\n           rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 1) 100%)"
            },
            pointer: {
              left: 0,
              top: rgb.a * 100 + "%"
            }
          },
          "overwrite": _extends2({}, this.props.style)
        }, {
          vertical: this.props.direction === "vertical",
          overwrite: true
        });
        return import_react7.default.createElement(
          "div",
          { style: styles.alpha },
          import_react7.default.createElement(
            "div",
            { style: styles.checkboard },
            import_react7.default.createElement(Checkboard_default, { renderers: this.props.renderers })
          ),
          import_react7.default.createElement("div", { style: styles.gradient }),
          import_react7.default.createElement(
            "div",
            {
              style: styles.container,
              ref: /* @__PURE__ */ __name(function ref(container) {
                return _this2.container = container;
              }, "ref"),
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            },
            import_react7.default.createElement(
              "div",
              { style: styles.pointer },
              this.props.pointer ? import_react7.default.createElement(this.props.pointer, this.props) : import_react7.default.createElement("div", { style: styles.slider })
            )
          )
        );
      }, "render")
    }]);
    return Alpha2;
  }(import_react7.PureComponent || import_react7.Component);
  var Alpha_default = Alpha;

  // ../boardzilla-core/node_modules/react-color/es/components/common/EditableInput.js
  var import_react8 = __toESM(require_react());
  var import_reactcss3 = __toESM(require_lib());
  var _createClass2 = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    __name(defineProperties, "defineProperties");
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  __name(_defineProperty, "_defineProperty");
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  __name(_classCallCheck2, "_classCallCheck");
  function _possibleConstructorReturn2(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  __name(_possibleConstructorReturn2, "_possibleConstructorReturn");
  function _inherits2(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  __name(_inherits2, "_inherits");
  var DEFAULT_ARROW_OFFSET = 1;
  var UP_KEY_CODE = 38;
  var DOWN_KEY_CODE = 40;
  var VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];
  var isValidKeyCode = /* @__PURE__ */ __name(function isValidKeyCode2(keyCode) {
    return VALID_KEY_CODES.indexOf(keyCode) > -1;
  }, "isValidKeyCode");
  var getNumberValue = /* @__PURE__ */ __name(function getNumberValue2(value) {
    return Number(String(value).replace(/%/g, ""));
  }, "getNumberValue");
  var idCounter = 1;
  var EditableInput = function(_ref) {
    _inherits2(EditableInput2, _ref);
    function EditableInput2(props) {
      _classCallCheck2(this, EditableInput2);
      var _this = _possibleConstructorReturn2(this, (EditableInput2.__proto__ || Object.getPrototypeOf(EditableInput2)).call(this));
      _this.handleBlur = function() {
        if (_this.state.blurValue) {
          _this.setState({ value: _this.state.blurValue, blurValue: null });
        }
      };
      _this.handleChange = function(e) {
        _this.setUpdatedValue(e.target.value, e);
      };
      _this.handleKeyDown = function(e) {
        var value = getNumberValue(e.target.value);
        if (!isNaN(value) && isValidKeyCode(e.keyCode)) {
          var offset = _this.getArrowOffset();
          var updatedValue = e.keyCode === UP_KEY_CODE ? value + offset : value - offset;
          _this.setUpdatedValue(updatedValue, e);
        }
      };
      _this.handleDrag = function(e) {
        if (_this.props.dragLabel) {
          var newValue = Math.round(_this.props.value + e.movementX);
          if (newValue >= 0 && newValue <= _this.props.dragMax) {
            _this.props.onChange && _this.props.onChange(_this.getValueObjectWithLabel(newValue), e);
          }
        }
      };
      _this.handleMouseDown = function(e) {
        if (_this.props.dragLabel) {
          e.preventDefault();
          _this.handleDrag(e);
          window.addEventListener("mousemove", _this.handleDrag);
          window.addEventListener("mouseup", _this.handleMouseUp);
        }
      };
      _this.handleMouseUp = function() {
        _this.unbindEventListeners();
      };
      _this.unbindEventListeners = function() {
        window.removeEventListener("mousemove", _this.handleDrag);
        window.removeEventListener("mouseup", _this.handleMouseUp);
      };
      _this.state = {
        value: String(props.value).toUpperCase(),
        blurValue: String(props.value).toUpperCase()
      };
      _this.inputId = "rc-editable-input-" + idCounter++;
      return _this;
    }
    __name(EditableInput2, "EditableInput");
    _createClass2(EditableInput2, [{
      key: "componentDidUpdate",
      value: /* @__PURE__ */ __name(function componentDidUpdate(prevProps, prevState) {
        if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {
          if (this.input === document.activeElement) {
            this.setState({ blurValue: String(this.props.value).toUpperCase() });
          } else {
            this.setState({ value: String(this.props.value).toUpperCase(), blurValue: !this.state.blurValue && String(this.props.value).toUpperCase() });
          }
        }
      }, "componentDidUpdate")
    }, {
      key: "componentWillUnmount",
      value: /* @__PURE__ */ __name(function componentWillUnmount() {
        this.unbindEventListeners();
      }, "componentWillUnmount")
    }, {
      key: "getValueObjectWithLabel",
      value: /* @__PURE__ */ __name(function getValueObjectWithLabel(value) {
        return _defineProperty({}, this.props.label, value);
      }, "getValueObjectWithLabel")
    }, {
      key: "getArrowOffset",
      value: /* @__PURE__ */ __name(function getArrowOffset() {
        return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;
      }, "getArrowOffset")
    }, {
      key: "setUpdatedValue",
      value: /* @__PURE__ */ __name(function setUpdatedValue(value, e) {
        var onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value;
        this.props.onChange && this.props.onChange(onChangeValue, e);
        this.setState({ value });
      }, "setUpdatedValue")
    }, {
      key: "render",
      value: /* @__PURE__ */ __name(function render3() {
        var _this2 = this;
        var styles = (0, import_reactcss3.default)({
          "default": {
            wrap: {
              position: "relative"
            }
          },
          "user-override": {
            wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},
            input: this.props.style && this.props.style.input ? this.props.style.input : {},
            label: this.props.style && this.props.style.label ? this.props.style.label : {}
          },
          "dragLabel-true": {
            label: {
              cursor: "ew-resize"
            }
          }
        }, {
          "user-override": true
        }, this.props);
        return import_react8.default.createElement(
          "div",
          { style: styles.wrap },
          import_react8.default.createElement("input", {
            id: this.inputId,
            style: styles.input,
            ref: /* @__PURE__ */ __name(function ref(input) {
              return _this2.input = input;
            }, "ref"),
            value: this.state.value,
            onKeyDown: this.handleKeyDown,
            onChange: this.handleChange,
            onBlur: this.handleBlur,
            placeholder: this.props.placeholder,
            spellCheck: "false"
          }),
          this.props.label && !this.props.hideLabel ? import_react8.default.createElement(
            "label",
            {
              htmlFor: this.inputId,
              style: styles.label,
              onMouseDown: this.handleMouseDown
            },
            this.props.label
          ) : null
        );
      }, "render")
    }]);
    return EditableInput2;
  }(import_react8.PureComponent || import_react8.Component);
  var EditableInput_default = EditableInput;

  // ../boardzilla-core/node_modules/react-color/es/components/common/Hue.js
  var import_react9 = __toESM(require_react());
  var import_reactcss4 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/helpers/hue.js
  var calculateChange3 = /* @__PURE__ */ __name(function calculateChange4(e, direction, hsl, container) {
    var containerWidth = container.clientWidth;
    var containerHeight = container.clientHeight;
    var x = typeof e.pageX === "number" ? e.pageX : e.touches[0].pageX;
    var y = typeof e.pageY === "number" ? e.pageY : e.touches[0].pageY;
    var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
    var top = y - (container.getBoundingClientRect().top + window.pageYOffset);
    if (direction === "vertical") {
      var h = void 0;
      if (top < 0) {
        h = 359;
      } else if (top > containerHeight) {
        h = 0;
      } else {
        var percent = -(top * 100 / containerHeight) + 100;
        h = 360 * percent / 100;
      }
      if (hsl.h !== h) {
        return {
          h,
          s: hsl.s,
          l: hsl.l,
          a: hsl.a,
          source: "hsl"
        };
      }
    } else {
      var _h = void 0;
      if (left < 0) {
        _h = 0;
      } else if (left > containerWidth) {
        _h = 359;
      } else {
        var _percent = left * 100 / containerWidth;
        _h = 360 * _percent / 100;
      }
      if (hsl.h !== _h) {
        return {
          h: _h,
          s: hsl.s,
          l: hsl.l,
          a: hsl.a,
          source: "hsl"
        };
      }
    }
    return null;
  }, "calculateChange");

  // ../boardzilla-core/node_modules/react-color/es/components/common/Hue.js
  var _createClass3 = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    __name(defineProperties, "defineProperties");
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck3(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  __name(_classCallCheck3, "_classCallCheck");
  function _possibleConstructorReturn3(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  __name(_possibleConstructorReturn3, "_possibleConstructorReturn");
  function _inherits3(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  __name(_inherits3, "_inherits");
  var Hue = function(_ref) {
    _inherits3(Hue2, _ref);
    function Hue2() {
      var _ref2;
      var _temp, _this, _ret;
      _classCallCheck3(this, Hue2);
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _ret = (_temp = (_this = _possibleConstructorReturn3(this, (_ref2 = Hue2.__proto__ || Object.getPrototypeOf(Hue2)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function(e) {
        var change = calculateChange3(e, _this.props.direction, _this.props.hsl, _this.container);
        change && typeof _this.props.onChange === "function" && _this.props.onChange(change, e);
      }, _this.handleMouseDown = function(e) {
        _this.handleChange(e);
        window.addEventListener("mousemove", _this.handleChange);
        window.addEventListener("mouseup", _this.handleMouseUp);
      }, _this.handleMouseUp = function() {
        _this.unbindEventListeners();
      }, _temp), _possibleConstructorReturn3(_this, _ret);
    }
    __name(Hue2, "Hue");
    _createClass3(Hue2, [{
      key: "componentWillUnmount",
      value: /* @__PURE__ */ __name(function componentWillUnmount() {
        this.unbindEventListeners();
      }, "componentWillUnmount")
    }, {
      key: "unbindEventListeners",
      value: /* @__PURE__ */ __name(function unbindEventListeners() {
        window.removeEventListener("mousemove", this.handleChange);
        window.removeEventListener("mouseup", this.handleMouseUp);
      }, "unbindEventListeners")
    }, {
      key: "render",
      value: /* @__PURE__ */ __name(function render3() {
        var _this2 = this;
        var _props$direction = this.props.direction, direction = _props$direction === void 0 ? "horizontal" : _props$direction;
        var styles = (0, import_reactcss4.default)({
          "default": {
            hue: {
              absolute: "0px 0px 0px 0px",
              borderRadius: this.props.radius,
              boxShadow: this.props.shadow
            },
            container: {
              padding: "0 2px",
              position: "relative",
              height: "100%",
              borderRadius: this.props.radius
            },
            pointer: {
              position: "absolute",
              left: this.props.hsl.h * 100 / 360 + "%"
            },
            slider: {
              marginTop: "1px",
              width: "4px",
              borderRadius: "1px",
              height: "8px",
              boxShadow: "0 0 2px rgba(0, 0, 0, .6)",
              background: "#fff",
              transform: "translateX(-2px)"
            }
          },
          "vertical": {
            pointer: {
              left: "0px",
              top: -(this.props.hsl.h * 100 / 360) + 100 + "%"
            }
          }
        }, { vertical: direction === "vertical" });
        return import_react9.default.createElement(
          "div",
          { style: styles.hue },
          import_react9.default.createElement(
            "div",
            {
              className: "hue-" + direction,
              style: styles.container,
              ref: /* @__PURE__ */ __name(function ref(container) {
                return _this2.container = container;
              }, "ref"),
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            },
            import_react9.default.createElement(
              "style",
              null,
              "\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          "
            ),
            import_react9.default.createElement(
              "div",
              { style: styles.pointer },
              this.props.pointer ? import_react9.default.createElement(this.props.pointer, this.props) : import_react9.default.createElement("div", { style: styles.slider })
            )
          )
        );
      }, "render")
    }]);
    return Hue2;
  }(import_react9.PureComponent || import_react9.Component);
  var Hue_default = Hue;

  // ../boardzilla-core/node_modules/react-color/es/components/common/Raised.js
  var import_react10 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());
  var import_reactcss5 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/lodash-es/_listCacheClear.js
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  __name(listCacheClear, "listCacheClear");
  var listCacheClear_default = listCacheClear;

  // ../boardzilla-core/node_modules/lodash-es/eq.js
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  __name(eq, "eq");
  var eq_default = eq;

  // ../boardzilla-core/node_modules/lodash-es/_assocIndexOf.js
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq_default(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  __name(assocIndexOf, "assocIndexOf");
  var assocIndexOf_default = assocIndexOf;

  // ../boardzilla-core/node_modules/lodash-es/_listCacheDelete.js
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  __name(listCacheDelete, "listCacheDelete");
  var listCacheDelete_default = listCacheDelete;

  // ../boardzilla-core/node_modules/lodash-es/_listCacheGet.js
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  __name(listCacheGet, "listCacheGet");
  var listCacheGet_default = listCacheGet;

  // ../boardzilla-core/node_modules/lodash-es/_listCacheHas.js
  function listCacheHas(key) {
    return assocIndexOf_default(this.__data__, key) > -1;
  }
  __name(listCacheHas, "listCacheHas");
  var listCacheHas_default = listCacheHas;

  // ../boardzilla-core/node_modules/lodash-es/_listCacheSet.js
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  __name(listCacheSet, "listCacheSet");
  var listCacheSet_default = listCacheSet;

  // ../boardzilla-core/node_modules/lodash-es/_ListCache.js
  function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  __name(ListCache, "ListCache");
  ListCache.prototype.clear = listCacheClear_default;
  ListCache.prototype["delete"] = listCacheDelete_default;
  ListCache.prototype.get = listCacheGet_default;
  ListCache.prototype.has = listCacheHas_default;
  ListCache.prototype.set = listCacheSet_default;
  var ListCache_default = ListCache;

  // ../boardzilla-core/node_modules/lodash-es/_stackClear.js
  function stackClear() {
    this.__data__ = new ListCache_default();
    this.size = 0;
  }
  __name(stackClear, "stackClear");
  var stackClear_default = stackClear;

  // ../boardzilla-core/node_modules/lodash-es/_stackDelete.js
  function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  __name(stackDelete, "stackDelete");
  var stackDelete_default = stackDelete;

  // ../boardzilla-core/node_modules/lodash-es/_stackGet.js
  function stackGet(key) {
    return this.__data__.get(key);
  }
  __name(stackGet, "stackGet");
  var stackGet_default = stackGet;

  // ../boardzilla-core/node_modules/lodash-es/_stackHas.js
  function stackHas(key) {
    return this.__data__.has(key);
  }
  __name(stackHas, "stackHas");
  var stackHas_default = stackHas;

  // ../boardzilla-core/node_modules/lodash-es/_freeGlobal.js
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeGlobal_default = freeGlobal;

  // ../boardzilla-core/node_modules/lodash-es/_root.js
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal_default || freeSelf || Function("return this")();
  var root_default = root;

  // ../boardzilla-core/node_modules/lodash-es/_Symbol.js
  var Symbol2 = root_default.Symbol;
  var Symbol_default = Symbol2;

  // ../boardzilla-core/node_modules/lodash-es/_getRawTag.js
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  __name(getRawTag, "getRawTag");
  var getRawTag_default = getRawTag;

  // ../boardzilla-core/node_modules/lodash-es/_objectToString.js
  var objectProto2 = Object.prototype;
  var nativeObjectToString2 = objectProto2.toString;
  function objectToString(value) {
    return nativeObjectToString2.call(value);
  }
  __name(objectToString, "objectToString");
  var objectToString_default = objectToString;

  // ../boardzilla-core/node_modules/lodash-es/_baseGetTag.js
  var nullTag = "[object Null]";
  var undefinedTag = "[object Undefined]";
  var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
  }
  __name(baseGetTag, "baseGetTag");
  var baseGetTag_default = baseGetTag;

  // ../boardzilla-core/node_modules/lodash-es/isObject.js
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  __name(isObject, "isObject");
  var isObject_default = isObject;

  // ../boardzilla-core/node_modules/lodash-es/isFunction.js
  var asyncTag = "[object AsyncFunction]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var proxyTag = "[object Proxy]";
  function isFunction(value) {
    if (!isObject_default(value)) {
      return false;
    }
    var tag = baseGetTag_default(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  __name(isFunction, "isFunction");
  var isFunction_default = isFunction;

  // ../boardzilla-core/node_modules/lodash-es/_coreJsData.js
  var coreJsData = root_default["__core-js_shared__"];
  var coreJsData_default = coreJsData;

  // ../boardzilla-core/node_modules/lodash-es/_isMasked.js
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  __name(isMasked, "isMasked");
  var isMasked_default = isMasked;

  // ../boardzilla-core/node_modules/lodash-es/_toSource.js
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  __name(toSource, "toSource");
  var toSource_default = toSource;

  // ../boardzilla-core/node_modules/lodash-es/_baseIsNative.js
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto2 = Function.prototype;
  var objectProto3 = Object.prototype;
  var funcToString2 = funcProto2.toString;
  var hasOwnProperty2 = objectProto3.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative(value) {
    if (!isObject_default(value) || isMasked_default(value)) {
      return false;
    }
    var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource_default(value));
  }
  __name(baseIsNative, "baseIsNative");
  var baseIsNative_default = baseIsNative;

  // ../boardzilla-core/node_modules/lodash-es/_getValue.js
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  __name(getValue, "getValue");
  var getValue_default = getValue;

  // ../boardzilla-core/node_modules/lodash-es/_getNative.js
  function getNative(object, key) {
    var value = getValue_default(object, key);
    return baseIsNative_default(value) ? value : void 0;
  }
  __name(getNative, "getNative");
  var getNative_default = getNative;

  // ../boardzilla-core/node_modules/lodash-es/_Map.js
  var Map2 = getNative_default(root_default, "Map");
  var Map_default = Map2;

  // ../boardzilla-core/node_modules/lodash-es/_nativeCreate.js
  var nativeCreate = getNative_default(Object, "create");
  var nativeCreate_default = nativeCreate;

  // ../boardzilla-core/node_modules/lodash-es/_hashClear.js
  function hashClear() {
    this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
    this.size = 0;
  }
  __name(hashClear, "hashClear");
  var hashClear_default = hashClear;

  // ../boardzilla-core/node_modules/lodash-es/_hashDelete.js
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  __name(hashDelete, "hashDelete");
  var hashDelete_default = hashDelete;

  // ../boardzilla-core/node_modules/lodash-es/_hashGet.js
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto4 = Object.prototype;
  var hasOwnProperty3 = objectProto4.hasOwnProperty;
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate_default) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty3.call(data, key) ? data[key] : void 0;
  }
  __name(hashGet, "hashGet");
  var hashGet_default = hashGet;

  // ../boardzilla-core/node_modules/lodash-es/_hashHas.js
  var objectProto5 = Object.prototype;
  var hasOwnProperty4 = objectProto5.hasOwnProperty;
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty4.call(data, key);
  }
  __name(hashHas, "hashHas");
  var hashHas_default = hashHas;

  // ../boardzilla-core/node_modules/lodash-es/_hashSet.js
  var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
    return this;
  }
  __name(hashSet, "hashSet");
  var hashSet_default = hashSet;

  // ../boardzilla-core/node_modules/lodash-es/_Hash.js
  function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  __name(Hash, "Hash");
  Hash.prototype.clear = hashClear_default;
  Hash.prototype["delete"] = hashDelete_default;
  Hash.prototype.get = hashGet_default;
  Hash.prototype.has = hashHas_default;
  Hash.prototype.set = hashSet_default;
  var Hash_default = Hash;

  // ../boardzilla-core/node_modules/lodash-es/_mapCacheClear.js
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash_default(),
      "map": new (Map_default || ListCache_default)(),
      "string": new Hash_default()
    };
  }
  __name(mapCacheClear, "mapCacheClear");
  var mapCacheClear_default = mapCacheClear;

  // ../boardzilla-core/node_modules/lodash-es/_isKeyable.js
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  __name(isKeyable, "isKeyable");
  var isKeyable_default = isKeyable;

  // ../boardzilla-core/node_modules/lodash-es/_getMapData.js
  function getMapData(map2, key) {
    var data = map2.__data__;
    return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  __name(getMapData, "getMapData");
  var getMapData_default = getMapData;

  // ../boardzilla-core/node_modules/lodash-es/_mapCacheDelete.js
  function mapCacheDelete(key) {
    var result = getMapData_default(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  __name(mapCacheDelete, "mapCacheDelete");
  var mapCacheDelete_default = mapCacheDelete;

  // ../boardzilla-core/node_modules/lodash-es/_mapCacheGet.js
  function mapCacheGet(key) {
    return getMapData_default(this, key).get(key);
  }
  __name(mapCacheGet, "mapCacheGet");
  var mapCacheGet_default = mapCacheGet;

  // ../boardzilla-core/node_modules/lodash-es/_mapCacheHas.js
  function mapCacheHas(key) {
    return getMapData_default(this, key).has(key);
  }
  __name(mapCacheHas, "mapCacheHas");
  var mapCacheHas_default = mapCacheHas;

  // ../boardzilla-core/node_modules/lodash-es/_mapCacheSet.js
  function mapCacheSet(key, value) {
    var data = getMapData_default(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  __name(mapCacheSet, "mapCacheSet");
  var mapCacheSet_default = mapCacheSet;

  // ../boardzilla-core/node_modules/lodash-es/_MapCache.js
  function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  __name(MapCache, "MapCache");
  MapCache.prototype.clear = mapCacheClear_default;
  MapCache.prototype["delete"] = mapCacheDelete_default;
  MapCache.prototype.get = mapCacheGet_default;
  MapCache.prototype.has = mapCacheHas_default;
  MapCache.prototype.set = mapCacheSet_default;
  var MapCache_default = MapCache;

  // ../boardzilla-core/node_modules/lodash-es/_stackSet.js
  var LARGE_ARRAY_SIZE = 200;
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache_default) {
      var pairs = data.__data__;
      if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache_default(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  __name(stackSet, "stackSet");
  var stackSet_default = stackSet;

  // ../boardzilla-core/node_modules/lodash-es/_Stack.js
  function Stack(entries) {
    var data = this.__data__ = new ListCache_default(entries);
    this.size = data.size;
  }
  __name(Stack, "Stack");
  Stack.prototype.clear = stackClear_default;
  Stack.prototype["delete"] = stackDelete_default;
  Stack.prototype.get = stackGet_default;
  Stack.prototype.has = stackHas_default;
  Stack.prototype.set = stackSet_default;
  var Stack_default = Stack;

  // ../boardzilla-core/node_modules/lodash-es/_defineProperty.js
  var defineProperty = function() {
    try {
      var func = getNative_default(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e) {
    }
  }();
  var defineProperty_default = defineProperty;

  // ../boardzilla-core/node_modules/lodash-es/_baseAssignValue.js
  function baseAssignValue(object, key, value) {
    if (key == "__proto__" && defineProperty_default) {
      defineProperty_default(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object[key] = value;
    }
  }
  __name(baseAssignValue, "baseAssignValue");
  var baseAssignValue_default = baseAssignValue;

  // ../boardzilla-core/node_modules/lodash-es/_assignMergeValue.js
  function assignMergeValue(object, key, value) {
    if (value !== void 0 && !eq_default(object[key], value) || value === void 0 && !(key in object)) {
      baseAssignValue_default(object, key, value);
    }
  }
  __name(assignMergeValue, "assignMergeValue");
  var assignMergeValue_default = assignMergeValue;

  // ../boardzilla-core/node_modules/lodash-es/_createBaseFor.js
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  __name(createBaseFor, "createBaseFor");
  var createBaseFor_default = createBaseFor;

  // ../boardzilla-core/node_modules/lodash-es/_baseFor.js
  var baseFor = createBaseFor_default();
  var baseFor_default = baseFor;

  // ../boardzilla-core/node_modules/lodash-es/_cloneBuffer.js
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer2 = moduleExports ? root_default.Buffer : void 0;
  var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }
  __name(cloneBuffer, "cloneBuffer");
  var cloneBuffer_default = cloneBuffer;

  // ../boardzilla-core/node_modules/lodash-es/_Uint8Array.js
  var Uint8Array2 = root_default.Uint8Array;
  var Uint8Array_default = Uint8Array2;

  // ../boardzilla-core/node_modules/lodash-es/_cloneArrayBuffer.js
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer));
    return result;
  }
  __name(cloneArrayBuffer, "cloneArrayBuffer");
  var cloneArrayBuffer_default = cloneArrayBuffer;

  // ../boardzilla-core/node_modules/lodash-es/_cloneTypedArray.js
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  __name(cloneTypedArray, "cloneTypedArray");
  var cloneTypedArray_default = cloneTypedArray;

  // ../boardzilla-core/node_modules/lodash-es/_copyArray.js
  function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }
  __name(copyArray, "copyArray");
  var copyArray_default = copyArray;

  // ../boardzilla-core/node_modules/lodash-es/_baseCreate.js
  var objectCreate = Object.create;
  var baseCreate = function() {
    function object() {
    }
    __name(object, "object");
    return function(proto) {
      if (!isObject_default(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  var baseCreate_default = baseCreate;

  // ../boardzilla-core/node_modules/lodash-es/_overArg.js
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  __name(overArg, "overArg");
  var overArg_default = overArg;

  // ../boardzilla-core/node_modules/lodash-es/_getPrototype.js
  var getPrototype = overArg_default(Object.getPrototypeOf, Object);
  var getPrototype_default = getPrototype;

  // ../boardzilla-core/node_modules/lodash-es/_isPrototype.js
  var objectProto6 = Object.prototype;
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto6;
    return value === proto;
  }
  __name(isPrototype, "isPrototype");
  var isPrototype_default = isPrototype;

  // ../boardzilla-core/node_modules/lodash-es/_initCloneObject.js
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
  }
  __name(initCloneObject, "initCloneObject");
  var initCloneObject_default = initCloneObject;

  // ../boardzilla-core/node_modules/lodash-es/isObjectLike.js
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  __name(isObjectLike, "isObjectLike");
  var isObjectLike_default = isObjectLike;

  // ../boardzilla-core/node_modules/lodash-es/_baseIsArguments.js
  var argsTag = "[object Arguments]";
  function baseIsArguments(value) {
    return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
  }
  __name(baseIsArguments, "baseIsArguments");
  var baseIsArguments_default = baseIsArguments;

  // ../boardzilla-core/node_modules/lodash-es/isArguments.js
  var objectProto7 = Object.prototype;
  var hasOwnProperty5 = objectProto7.hasOwnProperty;
  var propertyIsEnumerable = objectProto7.propertyIsEnumerable;
  var isArguments = baseIsArguments_default(function() {
    return arguments;
  }()) ? baseIsArguments_default : function(value) {
    return isObjectLike_default(value) && hasOwnProperty5.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  var isArguments_default = isArguments;

  // ../boardzilla-core/node_modules/lodash-es/isArray.js
  var isArray = Array.isArray;
  var isArray_default = isArray;

  // ../boardzilla-core/node_modules/lodash-es/isLength.js
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  __name(isLength, "isLength");
  var isLength_default = isLength;

  // ../boardzilla-core/node_modules/lodash-es/isArrayLike.js
  function isArrayLike(value) {
    return value != null && isLength_default(value.length) && !isFunction_default(value);
  }
  __name(isArrayLike, "isArrayLike");
  var isArrayLike_default = isArrayLike;

  // ../boardzilla-core/node_modules/lodash-es/isArrayLikeObject.js
  function isArrayLikeObject(value) {
    return isObjectLike_default(value) && isArrayLike_default(value);
  }
  __name(isArrayLikeObject, "isArrayLikeObject");
  var isArrayLikeObject_default = isArrayLikeObject;

  // ../boardzilla-core/node_modules/lodash-es/stubFalse.js
  function stubFalse() {
    return false;
  }
  __name(stubFalse, "stubFalse");
  var stubFalse_default = stubFalse;

  // ../boardzilla-core/node_modules/lodash-es/isBuffer.js
  var freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
  var Buffer3 = moduleExports2 ? root_default.Buffer : void 0;
  var nativeIsBuffer = Buffer3 ? Buffer3.isBuffer : void 0;
  var isBuffer = nativeIsBuffer || stubFalse_default;
  var isBuffer_default = isBuffer;

  // ../boardzilla-core/node_modules/lodash-es/isPlainObject.js
  var objectTag = "[object Object]";
  var funcProto3 = Function.prototype;
  var objectProto8 = Object.prototype;
  var funcToString3 = funcProto3.toString;
  var hasOwnProperty6 = objectProto8.hasOwnProperty;
  var objectCtorString = funcToString3.call(Object);
  function isPlainObject(value) {
    if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag) {
      return false;
    }
    var proto = getPrototype_default(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty6.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
  }
  __name(isPlainObject, "isPlainObject");
  var isPlainObject_default = isPlainObject;

  // ../boardzilla-core/node_modules/lodash-es/_baseIsTypedArray.js
  var argsTag2 = "[object Arguments]";
  var arrayTag = "[object Array]";
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var funcTag2 = "[object Function]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var objectTag2 = "[object Object]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var float32Tag = "[object Float32Array]";
  var float64Tag = "[object Float64Array]";
  var int8Tag = "[object Int8Array]";
  var int16Tag = "[object Int16Array]";
  var int32Tag = "[object Int32Array]";
  var uint8Tag = "[object Uint8Array]";
  var uint8ClampedTag = "[object Uint8ClampedArray]";
  var uint16Tag = "[object Uint16Array]";
  var uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag2] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  function baseIsTypedArray(value) {
    return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
  }
  __name(baseIsTypedArray, "baseIsTypedArray");
  var baseIsTypedArray_default = baseIsTypedArray;

  // ../boardzilla-core/node_modules/lodash-es/_baseUnary.js
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  __name(baseUnary, "baseUnary");
  var baseUnary_default = baseUnary;

  // ../boardzilla-core/node_modules/lodash-es/_nodeUtil.js
  var freeExports3 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule3 = freeExports3 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
  var freeProcess = moduleExports3 && freeGlobal_default.process;
  var nodeUtil = function() {
    try {
      var types = freeModule3 && freeModule3.require && freeModule3.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  var nodeUtil_default = nodeUtil;

  // ../boardzilla-core/node_modules/lodash-es/isTypedArray.js
  var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
  var isTypedArray_default = isTypedArray;

  // ../boardzilla-core/node_modules/lodash-es/_safeGet.js
  function safeGet(object, key) {
    if (key === "constructor" && typeof object[key] === "function") {
      return;
    }
    if (key == "__proto__") {
      return;
    }
    return object[key];
  }
  __name(safeGet, "safeGet");
  var safeGet_default = safeGet;

  // ../boardzilla-core/node_modules/lodash-es/_assignValue.js
  var objectProto9 = Object.prototype;
  var hasOwnProperty7 = objectProto9.hasOwnProperty;
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty7.call(object, key) && eq_default(objValue, value)) || value === void 0 && !(key in object)) {
      baseAssignValue_default(object, key, value);
    }
  }
  __name(assignValue, "assignValue");
  var assignValue_default = assignValue;

  // ../boardzilla-core/node_modules/lodash-es/_copyObject.js
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue_default(object, key, newValue);
      } else {
        assignValue_default(object, key, newValue);
      }
    }
    return object;
  }
  __name(copyObject, "copyObject");
  var copyObject_default = copyObject;

  // ../boardzilla-core/node_modules/lodash-es/_baseTimes.js
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  __name(baseTimes, "baseTimes");
  var baseTimes_default = baseTimes;

  // ../boardzilla-core/node_modules/lodash-es/_isIndex.js
  var MAX_SAFE_INTEGER2 = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER2 : length;
    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  __name(isIndex, "isIndex");
  var isIndex_default = isIndex;

  // ../boardzilla-core/node_modules/lodash-es/_arrayLikeKeys.js
  var objectProto10 = Object.prototype;
  var hasOwnProperty8 = objectProto10.hasOwnProperty;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && isBuffer_default(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty8.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
      isIndex_default(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  __name(arrayLikeKeys, "arrayLikeKeys");
  var arrayLikeKeys_default = arrayLikeKeys;

  // ../boardzilla-core/node_modules/lodash-es/_nativeKeysIn.js
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  __name(nativeKeysIn, "nativeKeysIn");
  var nativeKeysIn_default = nativeKeysIn;

  // ../boardzilla-core/node_modules/lodash-es/_baseKeysIn.js
  var objectProto11 = Object.prototype;
  var hasOwnProperty9 = objectProto11.hasOwnProperty;
  function baseKeysIn(object) {
    if (!isObject_default(object)) {
      return nativeKeysIn_default(object);
    }
    var isProto = isPrototype_default(object), result = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty9.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  __name(baseKeysIn, "baseKeysIn");
  var baseKeysIn_default = baseKeysIn;

  // ../boardzilla-core/node_modules/lodash-es/keysIn.js
  function keysIn(object) {
    return isArrayLike_default(object) ? arrayLikeKeys_default(object, true) : baseKeysIn_default(object);
  }
  __name(keysIn, "keysIn");
  var keysIn_default = keysIn;

  // ../boardzilla-core/node_modules/lodash-es/toPlainObject.js
  function toPlainObject(value) {
    return copyObject_default(value, keysIn_default(value));
  }
  __name(toPlainObject, "toPlainObject");
  var toPlainObject_default = toPlainObject;

  // ../boardzilla-core/node_modules/lodash-es/_baseMergeDeep.js
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet_default(object, key), srcValue = safeGet_default(source, key), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue_default(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray_default(srcValue), isBuff = !isArr && isBuffer_default(srcValue), isTyped = !isArr && !isBuff && isTypedArray_default(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray_default(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject_default(objValue)) {
          newValue = copyArray_default(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer_default(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray_default(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject_default(srcValue) || isArguments_default(srcValue)) {
        newValue = objValue;
        if (isArguments_default(objValue)) {
          newValue = toPlainObject_default(objValue);
        } else if (!isObject_default(objValue) || isFunction_default(objValue)) {
          newValue = initCloneObject_default(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue_default(object, key, newValue);
  }
  __name(baseMergeDeep, "baseMergeDeep");
  var baseMergeDeep_default = baseMergeDeep;

  // ../boardzilla-core/node_modules/lodash-es/_baseMerge.js
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor_default(source, function(srcValue, key) {
      stack || (stack = new Stack_default());
      if (isObject_default(srcValue)) {
        baseMergeDeep_default(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet_default(object, key), srcValue, key + "", object, source, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue_default(object, key, newValue);
      }
    }, keysIn_default);
  }
  __name(baseMerge, "baseMerge");
  var baseMerge_default = baseMerge;

  // ../boardzilla-core/node_modules/lodash-es/identity.js
  function identity(value) {
    return value;
  }
  __name(identity, "identity");
  var identity_default = identity;

  // ../boardzilla-core/node_modules/lodash-es/_apply.js
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  __name(apply, "apply");
  var apply_default = apply;

  // ../boardzilla-core/node_modules/lodash-es/_overRest.js
  var nativeMax = Math.max;
  function overRest(func, start, transform) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply_default(func, this, otherArgs);
    };
  }
  __name(overRest, "overRest");
  var overRest_default = overRest;

  // ../boardzilla-core/node_modules/lodash-es/constant.js
  function constant(value) {
    return function() {
      return value;
    };
  }
  __name(constant, "constant");
  var constant_default = constant;

  // ../boardzilla-core/node_modules/lodash-es/_baseSetToString.js
  var baseSetToString = !defineProperty_default ? identity_default : function(func, string) {
    return defineProperty_default(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant_default(string),
      "writable": true
    });
  };
  var baseSetToString_default = baseSetToString;

  // ../boardzilla-core/node_modules/lodash-es/_shortOut.js
  var HOT_COUNT = 800;
  var HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  __name(shortOut, "shortOut");
  var shortOut_default = shortOut;

  // ../boardzilla-core/node_modules/lodash-es/_setToString.js
  var setToString = shortOut_default(baseSetToString_default);
  var setToString_default = setToString;

  // ../boardzilla-core/node_modules/lodash-es/_baseRest.js
  function baseRest(func, start) {
    return setToString_default(overRest_default(func, start, identity_default), func + "");
  }
  __name(baseRest, "baseRest");
  var baseRest_default = baseRest;

  // ../boardzilla-core/node_modules/lodash-es/_isIterateeCall.js
  function isIterateeCall(value, index, object) {
    if (!isObject_default(object)) {
      return false;
    }
    var type = typeof index;
    if (type == "number" ? isArrayLike_default(object) && isIndex_default(index, object.length) : type == "string" && index in object) {
      return eq_default(object[index], value);
    }
    return false;
  }
  __name(isIterateeCall, "isIterateeCall");
  var isIterateeCall_default = isIterateeCall;

  // ../boardzilla-core/node_modules/lodash-es/_createAssigner.js
  function createAssigner(assigner) {
    return baseRest_default(function(object, sources) {
      var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
      if (guard && isIterateeCall_default(sources[0], sources[1], guard)) {
        customizer = length < 3 ? void 0 : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }
  __name(createAssigner, "createAssigner");
  var createAssigner_default = createAssigner;

  // ../boardzilla-core/node_modules/lodash-es/merge.js
  var merge = createAssigner_default(function(object, source, srcIndex) {
    baseMerge_default(object, source, srcIndex);
  });
  var merge_default = merge;

  // ../boardzilla-core/node_modules/react-color/es/components/common/Raised.js
  var Raised = /* @__PURE__ */ __name(function Raised2(_ref) {
    var zDepth = _ref.zDepth, radius = _ref.radius, background = _ref.background, children = _ref.children, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles;
    var styles = (0, import_reactcss5.default)(merge_default({
      "default": {
        wrap: {
          position: "relative",
          display: "inline-block"
        },
        content: {
          position: "relative"
        },
        bg: {
          absolute: "0px 0px 0px 0px",
          boxShadow: "0 " + zDepth + "px " + zDepth * 4 + "px rgba(0,0,0,.24)",
          borderRadius: radius,
          background
        }
      },
      "zDepth-0": {
        bg: {
          boxShadow: "none"
        }
      },
      "zDepth-1": {
        bg: {
          boxShadow: "0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)"
        }
      },
      "zDepth-2": {
        bg: {
          boxShadow: "0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)"
        }
      },
      "zDepth-3": {
        bg: {
          boxShadow: "0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)"
        }
      },
      "zDepth-4": {
        bg: {
          boxShadow: "0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)"
        }
      },
      "zDepth-5": {
        bg: {
          boxShadow: "0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)"
        }
      },
      "square": {
        bg: {
          borderRadius: "0"
        }
      },
      "circle": {
        bg: {
          borderRadius: "50%"
        }
      }
    }, passedStyles), { "zDepth-1": zDepth === 1 });
    return import_react10.default.createElement(
      "div",
      { style: styles.wrap },
      import_react10.default.createElement("div", { style: styles.bg }),
      import_react10.default.createElement(
        "div",
        { style: styles.content },
        children
      )
    );
  }, "Raised");
  Raised.propTypes = {
    background: import_prop_types.default.string,
    zDepth: import_prop_types.default.oneOf([0, 1, 2, 3, 4, 5]),
    radius: import_prop_types.default.number,
    styles: import_prop_types.default.object
  };
  Raised.defaultProps = {
    background: "#fff",
    zDepth: 1,
    radius: 2,
    styles: {}
  };
  var Raised_default = Raised;

  // ../boardzilla-core/node_modules/react-color/es/components/common/Saturation.js
  var import_react11 = __toESM(require_react());
  var import_reactcss6 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/lodash-es/now.js
  var now = /* @__PURE__ */ __name(function() {
    return root_default.Date.now();
  }, "now");
  var now_default = now;

  // ../boardzilla-core/node_modules/lodash-es/_trimmedEndIndex.js
  var reWhitespace = /\s/;
  function trimmedEndIndex(string) {
    var index = string.length;
    while (index-- && reWhitespace.test(string.charAt(index))) {
    }
    return index;
  }
  __name(trimmedEndIndex, "trimmedEndIndex");
  var trimmedEndIndex_default = trimmedEndIndex;

  // ../boardzilla-core/node_modules/lodash-es/_baseTrim.js
  var reTrimStart = /^\s+/;
  function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
  }
  __name(baseTrim, "baseTrim");
  var baseTrim_default = baseTrim;

  // ../boardzilla-core/node_modules/lodash-es/isSymbol.js
  var symbolTag = "[object Symbol]";
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
  }
  __name(isSymbol, "isSymbol");
  var isSymbol_default = isSymbol;

  // ../boardzilla-core/node_modules/lodash-es/toNumber.js
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol_default(value)) {
      return NAN;
    }
    if (isObject_default(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject_default(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim_default(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  __name(toNumber, "toNumber");
  var toNumber_default = toNumber;

  // ../boardzilla-core/node_modules/lodash-es/debounce.js
  var FUNC_ERROR_TEXT = "Expected a function";
  var nativeMax2 = Math.max;
  var nativeMin = Math.min;
  function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber_default(wait) || 0;
    if (isObject_default(options)) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      maxWait = maxing ? nativeMax2(toNumber_default(options.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }
    __name(invokeFunc, "invokeFunc");
    function leadingEdge(time) {
      lastInvokeTime = time;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time) : result;
    }
    __name(leadingEdge, "leadingEdge");
    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    __name(remainingWait, "remainingWait");
    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    __name(shouldInvoke, "shouldInvoke");
    function timerExpired() {
      var time = now_default();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      timerId = setTimeout(timerExpired, remainingWait(time));
    }
    __name(timerExpired, "timerExpired");
    function trailingEdge(time) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    __name(trailingEdge, "trailingEdge");
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    __name(cancel, "cancel");
    function flush() {
      return timerId === void 0 ? result : trailingEdge(now_default());
    }
    __name(flush, "flush");
    function debounced() {
      var time = now_default(), isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    __name(debounced, "debounced");
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  __name(debounce, "debounce");
  var debounce_default = debounce;

  // ../boardzilla-core/node_modules/lodash-es/throttle.js
  var FUNC_ERROR_TEXT2 = "Expected a function";
  function throttle(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT2);
    }
    if (isObject_default(options)) {
      leading = "leading" in options ? !!options.leading : leading;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    return debounce_default(func, wait, {
      "leading": leading,
      "maxWait": wait,
      "trailing": trailing
    });
  }
  __name(throttle, "throttle");
  var throttle_default = throttle;

  // ../boardzilla-core/node_modules/react-color/es/helpers/saturation.js
  var calculateChange5 = /* @__PURE__ */ __name(function calculateChange6(e, hsl, container) {
    var _container$getBoundin = container.getBoundingClientRect(), containerWidth = _container$getBoundin.width, containerHeight = _container$getBoundin.height;
    var x = typeof e.pageX === "number" ? e.pageX : e.touches[0].pageX;
    var y = typeof e.pageY === "number" ? e.pageY : e.touches[0].pageY;
    var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
    var top = y - (container.getBoundingClientRect().top + window.pageYOffset);
    if (left < 0) {
      left = 0;
    } else if (left > containerWidth) {
      left = containerWidth;
    }
    if (top < 0) {
      top = 0;
    } else if (top > containerHeight) {
      top = containerHeight;
    }
    var saturation = left / containerWidth;
    var bright = 1 - top / containerHeight;
    return {
      h: hsl.h,
      s: saturation,
      v: bright,
      a: hsl.a,
      source: "hsv"
    };
  }, "calculateChange");

  // ../boardzilla-core/node_modules/react-color/es/components/common/Saturation.js
  var _createClass4 = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    __name(defineProperties, "defineProperties");
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck4(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  __name(_classCallCheck4, "_classCallCheck");
  function _possibleConstructorReturn4(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  __name(_possibleConstructorReturn4, "_possibleConstructorReturn");
  function _inherits4(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  __name(_inherits4, "_inherits");
  var Saturation = function(_ref) {
    _inherits4(Saturation2, _ref);
    function Saturation2(props) {
      _classCallCheck4(this, Saturation2);
      var _this = _possibleConstructorReturn4(this, (Saturation2.__proto__ || Object.getPrototypeOf(Saturation2)).call(this, props));
      _this.handleChange = function(e) {
        typeof _this.props.onChange === "function" && _this.throttle(_this.props.onChange, calculateChange5(e, _this.props.hsl, _this.container), e);
      };
      _this.handleMouseDown = function(e) {
        _this.handleChange(e);
        var renderWindow = _this.getContainerRenderWindow();
        renderWindow.addEventListener("mousemove", _this.handleChange);
        renderWindow.addEventListener("mouseup", _this.handleMouseUp);
      };
      _this.handleMouseUp = function() {
        _this.unbindEventListeners();
      };
      _this.throttle = throttle_default(function(fn, data, e) {
        fn(data, e);
      }, 50);
      return _this;
    }
    __name(Saturation2, "Saturation");
    _createClass4(Saturation2, [{
      key: "componentWillUnmount",
      value: /* @__PURE__ */ __name(function componentWillUnmount() {
        this.throttle.cancel();
        this.unbindEventListeners();
      }, "componentWillUnmount")
    }, {
      key: "getContainerRenderWindow",
      value: /* @__PURE__ */ __name(function getContainerRenderWindow() {
        var container = this.container;
        var renderWindow = window;
        while (!renderWindow.document.contains(container) && renderWindow.parent !== renderWindow) {
          renderWindow = renderWindow.parent;
        }
        return renderWindow;
      }, "getContainerRenderWindow")
    }, {
      key: "unbindEventListeners",
      value: /* @__PURE__ */ __name(function unbindEventListeners() {
        var renderWindow = this.getContainerRenderWindow();
        renderWindow.removeEventListener("mousemove", this.handleChange);
        renderWindow.removeEventListener("mouseup", this.handleMouseUp);
      }, "unbindEventListeners")
    }, {
      key: "render",
      value: /* @__PURE__ */ __name(function render3() {
        var _this2 = this;
        var _ref2 = this.props.style || {}, color = _ref2.color, white = _ref2.white, black = _ref2.black, pointer = _ref2.pointer, circle = _ref2.circle;
        var styles = (0, import_reactcss6.default)({
          "default": {
            color: {
              absolute: "0px 0px 0px 0px",
              background: "hsl(" + this.props.hsl.h + ",100%, 50%)",
              borderRadius: this.props.radius
            },
            white: {
              absolute: "0px 0px 0px 0px",
              borderRadius: this.props.radius
            },
            black: {
              absolute: "0px 0px 0px 0px",
              boxShadow: this.props.shadow,
              borderRadius: this.props.radius
            },
            pointer: {
              position: "absolute",
              top: -(this.props.hsv.v * 100) + 100 + "%",
              left: this.props.hsv.s * 100 + "%",
              cursor: "default"
            },
            circle: {
              width: "4px",
              height: "4px",
              boxShadow: "0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)",
              borderRadius: "50%",
              cursor: "hand",
              transform: "translate(-2px, -2px)"
            }
          },
          "custom": {
            color,
            white,
            black,
            pointer,
            circle
          }
        }, { "custom": !!this.props.style });
        return import_react11.default.createElement(
          "div",
          {
            style: styles.color,
            ref: /* @__PURE__ */ __name(function ref(container) {
              return _this2.container = container;
            }, "ref"),
            onMouseDown: this.handleMouseDown,
            onTouchMove: this.handleChange,
            onTouchStart: this.handleChange
          },
          import_react11.default.createElement(
            "style",
            null,
            "\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        "
          ),
          import_react11.default.createElement(
            "div",
            { style: styles.white, className: "saturation-white" },
            import_react11.default.createElement("div", { style: styles.black, className: "saturation-black" }),
            import_react11.default.createElement(
              "div",
              { style: styles.pointer },
              this.props.pointer ? import_react11.default.createElement(this.props.pointer, this.props) : import_react11.default.createElement("div", { style: styles.circle })
            )
          )
        );
      }, "render")
    }]);
    return Saturation2;
  }(import_react11.PureComponent || import_react11.Component);
  var Saturation_default = Saturation;

  // ../boardzilla-core/node_modules/react-color/es/components/common/ColorWrap.js
  var import_react12 = __toESM(require_react());

  // ../boardzilla-core/node_modules/lodash-es/_arrayEach.js
  function arrayEach(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  __name(arrayEach, "arrayEach");
  var arrayEach_default = arrayEach;

  // ../boardzilla-core/node_modules/lodash-es/_nativeKeys.js
  var nativeKeys = overArg_default(Object.keys, Object);
  var nativeKeys_default = nativeKeys;

  // ../boardzilla-core/node_modules/lodash-es/_baseKeys.js
  var objectProto12 = Object.prototype;
  var hasOwnProperty10 = objectProto12.hasOwnProperty;
  function baseKeys(object) {
    if (!isPrototype_default(object)) {
      return nativeKeys_default(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty10.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  __name(baseKeys, "baseKeys");
  var baseKeys_default = baseKeys;

  // ../boardzilla-core/node_modules/lodash-es/keys.js
  function keys(object) {
    return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
  }
  __name(keys, "keys");
  var keys_default = keys;

  // ../boardzilla-core/node_modules/lodash-es/_baseForOwn.js
  function baseForOwn(object, iteratee) {
    return object && baseFor_default(object, iteratee, keys_default);
  }
  __name(baseForOwn, "baseForOwn");
  var baseForOwn_default = baseForOwn;

  // ../boardzilla-core/node_modules/lodash-es/_createBaseEach.js
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike_default(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }
  __name(createBaseEach, "createBaseEach");
  var createBaseEach_default = createBaseEach;

  // ../boardzilla-core/node_modules/lodash-es/_baseEach.js
  var baseEach = createBaseEach_default(baseForOwn_default);
  var baseEach_default = baseEach;

  // ../boardzilla-core/node_modules/lodash-es/_castFunction.js
  function castFunction(value) {
    return typeof value == "function" ? value : identity_default;
  }
  __name(castFunction, "castFunction");
  var castFunction_default = castFunction;

  // ../boardzilla-core/node_modules/lodash-es/forEach.js
  function forEach2(collection, iteratee) {
    var func = isArray_default(collection) ? arrayEach_default : baseEach_default;
    return func(collection, castFunction_default(iteratee));
  }
  __name(forEach2, "forEach");
  var forEach_default = forEach2;

  // ../boardzilla-core/node_modules/tinycolor2/esm/tinycolor.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }
  __name(_typeof, "_typeof");
  var trimLeft = /^\s+/;
  var trimRight = /\s+$/;
  function tinycolor(color, opts) {
    color = color ? color : "";
    opts = opts || {};
    if (color instanceof tinycolor) {
      return color;
    }
    if (!(this instanceof tinycolor)) {
      return new tinycolor(color, opts);
    }
    var rgb = inputToRGB(color);
    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;
    if (this._r < 1)
      this._r = Math.round(this._r);
    if (this._g < 1)
      this._g = Math.round(this._g);
    if (this._b < 1)
      this._b = Math.round(this._b);
    this._ok = rgb.ok;
  }
  __name(tinycolor, "tinycolor");
  tinycolor.prototype = {
    isDark: /* @__PURE__ */ __name(function isDark() {
      return this.getBrightness() < 128;
    }, "isDark"),
    isLight: /* @__PURE__ */ __name(function isLight() {
      return !this.isDark();
    }, "isLight"),
    isValid: /* @__PURE__ */ __name(function isValid() {
      return this._ok;
    }, "isValid"),
    getOriginalInput: /* @__PURE__ */ __name(function getOriginalInput() {
      return this._originalInput;
    }, "getOriginalInput"),
    getFormat: /* @__PURE__ */ __name(function getFormat() {
      return this._format;
    }, "getFormat"),
    getAlpha: /* @__PURE__ */ __name(function getAlpha() {
      return this._a;
    }, "getAlpha"),
    getBrightness: /* @__PURE__ */ __name(function getBrightness() {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    }, "getBrightness"),
    getLuminance: /* @__PURE__ */ __name(function getLuminance() {
      var rgb = this.toRgb();
      var RsRGB, GsRGB, BsRGB, R, G, B;
      RsRGB = rgb.r / 255;
      GsRGB = rgb.g / 255;
      BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928)
        R = RsRGB / 12.92;
      else
        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      if (GsRGB <= 0.03928)
        G = GsRGB / 12.92;
      else
        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      if (BsRGB <= 0.03928)
        B = BsRGB / 12.92;
      else
        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    }, "getLuminance"),
    setAlpha: /* @__PURE__ */ __name(function setAlpha(value) {
      this._a = boundAlpha(value);
      this._roundA = Math.round(100 * this._a) / 100;
      return this;
    }, "setAlpha"),
    toHsv: /* @__PURE__ */ __name(function toHsv() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this._a
      };
    }, "toHsv"),
    toHsvString: /* @__PURE__ */ __name(function toHsvString() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      var h = Math.round(hsv.h * 360), s = Math.round(hsv.s * 100), v = Math.round(hsv.v * 100);
      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
    }, "toHsvString"),
    toHsl: /* @__PURE__ */ __name(function toHsl() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this._a
      };
    }, "toHsl"),
    toHslString: /* @__PURE__ */ __name(function toHslString() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      var h = Math.round(hsl.h * 360), s = Math.round(hsl.s * 100), l = Math.round(hsl.l * 100);
      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
    }, "toHslString"),
    toHex: /* @__PURE__ */ __name(function toHex(allow3Char) {
      return rgbToHex(this._r, this._g, this._b, allow3Char);
    }, "toHex"),
    toHexString: /* @__PURE__ */ __name(function toHexString(allow3Char) {
      return "#" + this.toHex(allow3Char);
    }, "toHexString"),
    toHex8: /* @__PURE__ */ __name(function toHex8(allow4Char) {
      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    }, "toHex8"),
    toHex8String: /* @__PURE__ */ __name(function toHex8String(allow4Char) {
      return "#" + this.toHex8(allow4Char);
    }, "toHex8String"),
    toRgb: /* @__PURE__ */ __name(function toRgb() {
      return {
        r: Math.round(this._r),
        g: Math.round(this._g),
        b: Math.round(this._b),
        a: this._a
      };
    }, "toRgb"),
    toRgbString: /* @__PURE__ */ __name(function toRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
    }, "toRgbString"),
    toPercentageRgb: /* @__PURE__ */ __name(function toPercentageRgb() {
      return {
        r: Math.round(bound01(this._r, 255) * 100) + "%",
        g: Math.round(bound01(this._g, 255) * 100) + "%",
        b: Math.round(bound01(this._b, 255) * 100) + "%",
        a: this._a
      };
    }, "toPercentageRgb"),
    toPercentageRgbString: /* @__PURE__ */ __name(function toPercentageRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    }, "toPercentageRgbString"),
    toName: /* @__PURE__ */ __name(function toName() {
      if (this._a === 0) {
        return "transparent";
      }
      if (this._a < 1) {
        return false;
      }
      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    }, "toName"),
    toFilter: /* @__PURE__ */ __name(function toFilter(secondColor) {
      var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
      var secondHex8String = hex8String;
      var gradientType = this._gradientType ? "GradientType = 1, " : "";
      if (secondColor) {
        var s = tinycolor(secondColor);
        secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
      }
      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
    }, "toFilter"),
    toString: /* @__PURE__ */ __name(function toString(format) {
      var formatSet = !!format;
      format = format || this._format;
      var formattedString = false;
      var hasAlpha = this._a < 1 && this._a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
      if (needsAlphaFormat) {
        if (format === "name" && this._a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    }, "toString"),
    clone: /* @__PURE__ */ __name(function clone() {
      return tinycolor(this.toString());
    }, "clone"),
    _applyModification: /* @__PURE__ */ __name(function _applyModification(fn, args) {
      var color = fn.apply(null, [this].concat([].slice.call(args)));
      this._r = color._r;
      this._g = color._g;
      this._b = color._b;
      this.setAlpha(color._a);
      return this;
    }, "_applyModification"),
    lighten: /* @__PURE__ */ __name(function lighten() {
      return this._applyModification(_lighten, arguments);
    }, "lighten"),
    brighten: /* @__PURE__ */ __name(function brighten() {
      return this._applyModification(_brighten, arguments);
    }, "brighten"),
    darken: /* @__PURE__ */ __name(function darken() {
      return this._applyModification(_darken, arguments);
    }, "darken"),
    desaturate: /* @__PURE__ */ __name(function desaturate() {
      return this._applyModification(_desaturate, arguments);
    }, "desaturate"),
    saturate: /* @__PURE__ */ __name(function saturate() {
      return this._applyModification(_saturate, arguments);
    }, "saturate"),
    greyscale: /* @__PURE__ */ __name(function greyscale() {
      return this._applyModification(_greyscale, arguments);
    }, "greyscale"),
    spin: /* @__PURE__ */ __name(function spin() {
      return this._applyModification(_spin, arguments);
    }, "spin"),
    _applyCombination: /* @__PURE__ */ __name(function _applyCombination(fn, args) {
      return fn.apply(null, [this].concat([].slice.call(args)));
    }, "_applyCombination"),
    analogous: /* @__PURE__ */ __name(function analogous() {
      return this._applyCombination(_analogous, arguments);
    }, "analogous"),
    complement: /* @__PURE__ */ __name(function complement() {
      return this._applyCombination(_complement, arguments);
    }, "complement"),
    monochromatic: /* @__PURE__ */ __name(function monochromatic() {
      return this._applyCombination(_monochromatic, arguments);
    }, "monochromatic"),
    splitcomplement: /* @__PURE__ */ __name(function splitcomplement() {
      return this._applyCombination(_splitcomplement, arguments);
    }, "splitcomplement"),
    // Disabled until https://github.com/bgrins/TinyColor/issues/254
    // polyad: function (number) {
    //   return this._applyCombination(polyad, [number]);
    // },
    triad: /* @__PURE__ */ __name(function triad() {
      return this._applyCombination(polyad, [3]);
    }, "triad"),
    tetrad: /* @__PURE__ */ __name(function tetrad() {
      return this._applyCombination(polyad, [4]);
    }, "tetrad")
  };
  tinycolor.fromRatio = function(color, opts) {
    if (_typeof(color) == "object") {
      var newColor = {};
      for (var i in color) {
        if (color.hasOwnProperty(i)) {
          if (i === "a") {
            newColor[i] = color[i];
          } else {
            newColor[i] = convertToPercentage(color[i]);
          }
        }
      }
      color = newColor;
    }
    return tinycolor(color, opts);
  };
  function inputToRGB(color) {
    var rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color == "string") {
      color = stringInputToObject(color);
    }
    if (_typeof(color) == "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s = convertToPercentage(color.s);
        v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s = convertToPercentage(color.s);
        l = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s, l);
        ok = true;
        format = "hsl";
      }
      if (color.hasOwnProperty("a")) {
        a = color.a;
      }
    }
    a = boundAlpha(a);
    return {
      ok,
      format: color.format || format,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a
    };
  }
  __name(inputToRGB, "inputToRGB");
  function rgbToRgb(r, g, b) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  }
  __name(rgbToRgb, "rgbToRgb");
  function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;
    if (max == min) {
      h = s = 0;
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h,
      s,
      l
    };
  }
  __name(rgbToHsl, "rgbToHsl");
  function hslToRgb(h, s, l) {
    var r, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    function hue2rgb(p2, q2, t) {
      if (t < 0)
        t += 1;
      if (t > 1)
        t -= 1;
      if (t < 1 / 6)
        return p2 + (q2 - p2) * 6 * t;
      if (t < 1 / 2)
        return q2;
      if (t < 2 / 3)
        return p2 + (q2 - p2) * (2 / 3 - t) * 6;
      return p2;
    }
    __name(hue2rgb, "hue2rgb");
    if (s === 0) {
      r = g = b = l;
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }
  __name(hslToRgb, "hslToRgb");
  function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max == min) {
      h = 0;
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h,
      s,
      v
    };
  }
  __name(rgbToHsv, "rgbToHsv");
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [v, q, p, p, t, v][mod], g = [t, v, v, q, p, p][mod], b = [p, p, t, v, v, q][mod];
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }
  __name(hsvToRgb, "hsvToRgb");
  function rgbToHex(r, g, b, allow3Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join("");
  }
  __name(rgbToHex, "rgbToHex");
  function rgbaToHex(r, g, b, a, allow4Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join("");
  }
  __name(rgbaToHex, "rgbaToHex");
  function rgbaToArgbHex(r, g, b, a) {
    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
    return hex.join("");
  }
  __name(rgbaToArgbHex, "rgbaToArgbHex");
  tinycolor.equals = function(color1, color2) {
    if (!color1 || !color2)
      return false;
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };
  tinycolor.random = function() {
    return tinycolor.fromRatio({
      r: Math.random(),
      g: Math.random(),
      b: Math.random()
    });
  };
  function _desaturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  __name(_desaturate, "_desaturate");
  function _saturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  __name(_saturate, "_saturate");
  function _greyscale(color) {
    return tinycolor(color).desaturate(100);
  }
  __name(_greyscale, "_greyscale");
  function _lighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  __name(_lighten, "_lighten");
  function _brighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color).toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return tinycolor(rgb);
  }
  __name(_brighten, "_brighten");
  function _darken(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  __name(_darken, "_darken");
  function _spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
  }
  __name(_spin, "_spin");
  function _complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
  }
  __name(_complement, "_complement");
  function polyad(color, number) {
    if (isNaN(number) || number <= 0) {
      throw new Error("Argument to polyad must be a positive number");
    }
    var hsl = tinycolor(color).toHsl();
    var result = [tinycolor(color)];
    var step = 360 / number;
    for (var i = 1; i < number; i++) {
      result.push(tinycolor({
        h: (hsl.h + i * step) % 360,
        s: hsl.s,
        l: hsl.l
      }));
    }
    return result;
  }
  __name(polyad, "polyad");
  function _splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 72) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 216) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }
  __name(_splitcomplement, "_splitcomplement");
  function _analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(tinycolor(hsl));
    }
    return ret;
  }
  __name(_analogous, "_analogous");
  function _monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;
    while (results--) {
      ret.push(tinycolor({
        h,
        s,
        v
      }));
      v = (v + modification) % 1;
    }
    return ret;
  }
  __name(_monochromatic, "_monochromatic");
  tinycolor.mix = function(color1, color2, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();
    var p = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return tinycolor(rgba);
  };
  tinycolor.readability = function(color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
  };
  tinycolor.isReadable = function(color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;
    out = false;
    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
      case "AAsmall":
      case "AAAlarge":
        out = readability >= 4.5;
        break;
      case "AAlarge":
        out = readability >= 3;
        break;
      case "AAAsmall":
        out = readability >= 7;
        break;
    }
    return out;
  };
  tinycolor.mostReadable = function(baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors;
    level = args.level;
    size = args.size;
    for (var i = 0; i < colorList.length; i++) {
      readability = tinycolor.readability(baseColor, colorList[i]);
      if (readability > bestScore) {
        bestScore = readability;
        bestColor = tinycolor(colorList[i]);
      }
    }
    if (tinycolor.isReadable(baseColor, bestColor, {
      level,
      size
    }) || !includeFallbackColors) {
      return bestColor;
    } else {
      args.includeFallbackColors = false;
      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
    }
  };
  var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
  };
  var hexNames = tinycolor.hexNames = flip(names);
  function flip(o) {
    var flipped = {};
    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        flipped[o[i]] = i;
      }
    }
    return flipped;
  }
  __name(flip, "flip");
  function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }
    return a;
  }
  __name(boundAlpha, "boundAlpha");
  function bound01(n, max) {
    if (isOnePointZero(n))
      n = "100%";
    var processPercent = isPercentage(n);
    n = Math.min(max, Math.max(0, parseFloat(n)));
    if (processPercent) {
      n = parseInt(n * max, 10) / 100;
    }
    if (Math.abs(n - max) < 1e-6) {
      return 1;
    }
    return n % max / parseFloat(max);
  }
  __name(bound01, "bound01");
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }
  __name(clamp01, "clamp01");
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }
  __name(parseIntFromHex, "parseIntFromHex");
  function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
  }
  __name(isOnePointZero, "isOnePointZero");
  function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") != -1;
  }
  __name(isPercentage, "isPercentage");
  function pad2(c) {
    return c.length == 1 ? "0" + c : "" + c;
  }
  __name(pad2, "pad2");
  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + "%";
    }
    return n;
  }
  __name(convertToPercentage, "convertToPercentage");
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  __name(convertDecimalToHex, "convertDecimalToHex");
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  __name(convertHexToDecimal, "convertHexToDecimal");
  var matchers = function() {
    var CSS_INTEGER = "[-\\+]?\\d+%?";
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    return {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  }();
  function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
  }
  __name(isValidCSSUnit, "isValidCSSUnit");
  function stringInputToObject(color) {
    color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color == "transparent") {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: "name"
      };
    }
    var match;
    if (match = matchers.rgb.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3]
      };
    }
    if (match = matchers.rgba.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsl.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3]
      };
    }
    if (match = matchers.hsla.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsv.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3]
      };
    }
    if (match = matchers.hsva.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hex8.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex6.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? "name" : "hex"
      };
    }
    if (match = matchers.hex4.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        a: convertHexToDecimal(match[4] + "" + match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex3.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  __name(stringInputToObject, "stringInputToObject");
  function validateWCAG2Parms(parms) {
    var level, size;
    parms = parms || {
      level: "AA",
      size: "small"
    };
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
      level = "AA";
    }
    if (size !== "small" && size !== "large") {
      size = "small";
    }
    return {
      level,
      size
    };
  }
  __name(validateWCAG2Parms, "validateWCAG2Parms");

  // ../boardzilla-core/node_modules/react-color/es/helpers/color.js
  var simpleCheckForValidColor = /* @__PURE__ */ __name(function simpleCheckForValidColor2(data) {
    var keysToCheck = ["r", "g", "b", "a", "h", "s", "l", "v"];
    var checked = 0;
    var passed = 0;
    forEach_default(keysToCheck, function(letter) {
      if (data[letter]) {
        checked += 1;
        if (!isNaN(data[letter])) {
          passed += 1;
        }
        if (letter === "s" || letter === "l") {
          var percentPatt = /^\d+%$/;
          if (percentPatt.test(data[letter])) {
            passed += 1;
          }
        }
      }
    });
    return checked === passed ? data : false;
  }, "simpleCheckForValidColor");
  var toState = /* @__PURE__ */ __name(function toState2(data, oldHue) {
    var color = data.hex ? tinycolor(data.hex) : tinycolor(data);
    var hsl = color.toHsl();
    var hsv = color.toHsv();
    var rgb = color.toRgb();
    var hex = color.toHex();
    if (hsl.s === 0) {
      hsl.h = oldHue || 0;
      hsv.h = oldHue || 0;
    }
    var transparent = hex === "000000" && rgb.a === 0;
    return {
      hsl,
      hex: transparent ? "transparent" : "#" + hex,
      rgb,
      hsv,
      oldHue: data.h || oldHue || hsl.h,
      source: data.source
    };
  }, "toState");
  var isValidHex = /* @__PURE__ */ __name(function isValidHex2(hex) {
    if (hex === "transparent") {
      return true;
    }
    var lh = String(hex).charAt(0) === "#" ? 1 : 0;
    return hex.length !== 4 + lh && hex.length < 7 + lh && tinycolor(hex).isValid();
  }, "isValidHex");
  var getContrastingColor = /* @__PURE__ */ __name(function getContrastingColor2(data) {
    if (!data) {
      return "#fff";
    }
    var col = toState(data);
    if (col.hex === "transparent") {
      return "rgba(0,0,0,0.4)";
    }
    var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1e3;
    return yiq >= 128 ? "#000" : "#fff";
  }, "getContrastingColor");
  var isvalidColorString = /* @__PURE__ */ __name(function isvalidColorString2(string, type) {
    var stringWithoutDegree = string.replace("\xB0", "");
    return tinycolor(type + " (" + stringWithoutDegree + ")")._ok;
  }, "isvalidColorString");

  // ../boardzilla-core/node_modules/react-color/es/components/common/ColorWrap.js
  var _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var _createClass5 = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    __name(defineProperties, "defineProperties");
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck5(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  __name(_classCallCheck5, "_classCallCheck");
  function _possibleConstructorReturn5(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  __name(_possibleConstructorReturn5, "_possibleConstructorReturn");
  function _inherits5(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  __name(_inherits5, "_inherits");
  var ColorWrap = /* @__PURE__ */ __name(function ColorWrap2(Picker) {
    var ColorPicker = function(_ref) {
      _inherits5(ColorPicker2, _ref);
      function ColorPicker2(props) {
        _classCallCheck5(this, ColorPicker2);
        var _this = _possibleConstructorReturn5(this, (ColorPicker2.__proto__ || Object.getPrototypeOf(ColorPicker2)).call(this));
        _this.handleChange = function(data, event) {
          var isValidColor = simpleCheckForValidColor(data);
          if (isValidColor) {
            var colors2 = toState(data, data.h || _this.state.oldHue);
            _this.setState(colors2);
            _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors2, event);
            _this.props.onChange && _this.props.onChange(colors2, event);
          }
        };
        _this.handleSwatchHover = function(data, event) {
          var isValidColor = simpleCheckForValidColor(data);
          if (isValidColor) {
            var colors2 = toState(data, data.h || _this.state.oldHue);
            _this.props.onSwatchHover && _this.props.onSwatchHover(colors2, event);
          }
        };
        _this.state = _extends3({}, toState(props.color, 0));
        _this.debounce = debounce_default(function(fn, data, event) {
          fn(data, event);
        }, 100);
        return _this;
      }
      __name(ColorPicker2, "ColorPicker");
      _createClass5(ColorPicker2, [{
        key: "render",
        value: /* @__PURE__ */ __name(function render3() {
          var optionalEvents = {};
          if (this.props.onSwatchHover) {
            optionalEvents.onSwatchHover = this.handleSwatchHover;
          }
          return import_react12.default.createElement(Picker, _extends3({}, this.props, this.state, {
            onChange: this.handleChange
          }, optionalEvents));
        }, "render")
      }], [{
        key: "getDerivedStateFromProps",
        value: /* @__PURE__ */ __name(function getDerivedStateFromProps(nextProps, state) {
          return _extends3({}, toState(nextProps.color, state.oldHue));
        }, "getDerivedStateFromProps")
      }]);
      return ColorPicker2;
    }(import_react12.PureComponent || import_react12.Component);
    ColorPicker.propTypes = _extends3({}, Picker.propTypes);
    ColorPicker.defaultProps = _extends3({}, Picker.defaultProps, {
      color: {
        h: 250,
        s: 0.5,
        l: 0.2,
        a: 1
      }
    });
    return ColorPicker;
  }, "ColorWrap");
  var ColorWrap_default = ColorWrap;

  // ../boardzilla-core/node_modules/react-color/es/components/common/Swatch.js
  var import_react14 = __toESM(require_react());
  var import_reactcss7 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/helpers/interaction.js
  var import_react13 = __toESM(require_react());
  var _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var _createClass6 = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    __name(defineProperties, "defineProperties");
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck6(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  __name(_classCallCheck6, "_classCallCheck");
  function _possibleConstructorReturn6(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  __name(_possibleConstructorReturn6, "_possibleConstructorReturn");
  function _inherits6(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  __name(_inherits6, "_inherits");
  var handleFocus = /* @__PURE__ */ __name(function handleFocus2(Component6) {
    var Span = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
    return function(_React$Component) {
      _inherits6(Focus, _React$Component);
      function Focus() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck6(this, Focus);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn6(this, (_ref = Focus.__proto__ || Object.getPrototypeOf(Focus)).call.apply(_ref, [this].concat(args))), _this), _this.state = { focus: false }, _this.handleFocus = function() {
          return _this.setState({ focus: true });
        }, _this.handleBlur = function() {
          return _this.setState({ focus: false });
        }, _temp), _possibleConstructorReturn6(_this, _ret);
      }
      __name(Focus, "Focus");
      _createClass6(Focus, [{
        key: "render",
        value: /* @__PURE__ */ __name(function render3() {
          return import_react13.default.createElement(
            Span,
            { onFocus: this.handleFocus, onBlur: this.handleBlur },
            import_react13.default.createElement(Component6, _extends4({}, this.props, this.state))
          );
        }, "render")
      }]);
      return Focus;
    }(import_react13.default.Component);
  }, "handleFocus");

  // ../boardzilla-core/node_modules/react-color/es/components/common/Swatch.js
  var _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var ENTER = 13;
  var Swatch = /* @__PURE__ */ __name(function Swatch2(_ref) {
    var color = _ref.color, style = _ref.style, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
    } : _ref$onClick, onHover = _ref.onHover, _ref$title = _ref.title, title = _ref$title === void 0 ? color : _ref$title, children = _ref.children, focus = _ref.focus, _ref$focusStyle = _ref.focusStyle, focusStyle = _ref$focusStyle === void 0 ? {} : _ref$focusStyle;
    var transparent = color === "transparent";
    var styles = (0, import_reactcss7.default)({
      default: {
        swatch: _extends5({
          background: color,
          height: "100%",
          width: "100%",
          cursor: "pointer",
          position: "relative",
          outline: "none"
        }, style, focus ? focusStyle : {})
      }
    });
    var handleClick = /* @__PURE__ */ __name(function handleClick2(e) {
      return onClick(color, e);
    }, "handleClick");
    var handleKeyDown = /* @__PURE__ */ __name(function handleKeyDown2(e) {
      return e.keyCode === ENTER && onClick(color, e);
    }, "handleKeyDown");
    var handleHover3 = /* @__PURE__ */ __name(function handleHover4(e) {
      return onHover(color, e);
    }, "handleHover");
    var optionalEvents = {};
    if (onHover) {
      optionalEvents.onMouseOver = handleHover3;
    }
    return import_react14.default.createElement(
      "div",
      _extends5({
        style: styles.swatch,
        onClick: handleClick,
        title,
        tabIndex: 0,
        onKeyDown: handleKeyDown
      }, optionalEvents),
      children,
      transparent && import_react14.default.createElement(Checkboard_default, {
        borderRadius: styles.swatch.borderRadius,
        boxShadow: "inset 0 0 0 1px rgba(0,0,0,0.1)"
      })
    );
  }, "Swatch");
  var Swatch_default = handleFocus(Swatch);

  // ../boardzilla-core/node_modules/react-color/es/components/alpha/AlphaPointer.js
  var import_react15 = __toESM(require_react());
  var import_reactcss8 = __toESM(require_lib());
  var AlphaPointer = /* @__PURE__ */ __name(function AlphaPointer2(_ref) {
    var direction = _ref.direction;
    var styles = (0, import_reactcss8.default)({
      "default": {
        picker: {
          width: "18px",
          height: "18px",
          borderRadius: "50%",
          transform: "translate(-9px, -1px)",
          backgroundColor: "rgb(248, 248, 248)",
          boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
        }
      },
      "vertical": {
        picker: {
          transform: "translate(-3px, -9px)"
        }
      }
    }, { vertical: direction === "vertical" });
    return import_react15.default.createElement("div", { style: styles.picker });
  }, "AlphaPointer");
  var AlphaPointer_default = AlphaPointer;

  // ../boardzilla-core/node_modules/react-color/es/components/alpha/Alpha.js
  var _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var AlphaPicker = /* @__PURE__ */ __name(function AlphaPicker2(_ref) {
    var rgb = _ref.rgb, hsl = _ref.hsl, width = _ref.width, height = _ref.height, onChange = _ref.onChange, direction = _ref.direction, style = _ref.style, renderers = _ref.renderers, pointer = _ref.pointer, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss9.default)({
      "default": {
        picker: {
          position: "relative",
          width,
          height
        },
        alpha: {
          radius: "2px",
          style
        }
      }
    });
    return import_react16.default.createElement(
      "div",
      { style: styles.picker, className: "alpha-picker " + className },
      import_react16.default.createElement(Alpha_default, _extends6({}, styles.alpha, {
        rgb,
        hsl,
        pointer,
        renderers,
        onChange,
        direction
      }))
    );
  }, "AlphaPicker");
  AlphaPicker.defaultProps = {
    width: "316px",
    height: "16px",
    direction: "horizontal",
    pointer: AlphaPointer_default
  };
  var Alpha_default2 = ColorWrap_default(AlphaPicker);

  // ../boardzilla-core/node_modules/react-color/es/components/block/Block.js
  var import_react18 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());
  var import_reactcss11 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/block/BlockSwatches.js
  var import_react17 = __toESM(require_react());
  var import_reactcss10 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/lodash-es/_arrayMap.js
  function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  __name(arrayMap, "arrayMap");
  var arrayMap_default = arrayMap;

  // ../boardzilla-core/node_modules/lodash-es/_setCacheAdd.js
  var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED3);
    return this;
  }
  __name(setCacheAdd, "setCacheAdd");
  var setCacheAdd_default = setCacheAdd;

  // ../boardzilla-core/node_modules/lodash-es/_setCacheHas.js
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  __name(setCacheHas, "setCacheHas");
  var setCacheHas_default = setCacheHas;

  // ../boardzilla-core/node_modules/lodash-es/_SetCache.js
  function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache_default();
    while (++index < length) {
      this.add(values[index]);
    }
  }
  __name(SetCache, "SetCache");
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd_default;
  SetCache.prototype.has = setCacheHas_default;
  var SetCache_default = SetCache;

  // ../boardzilla-core/node_modules/lodash-es/_arraySome.js
  function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  __name(arraySome, "arraySome");
  var arraySome_default = arraySome;

  // ../boardzilla-core/node_modules/lodash-es/_cacheHas.js
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  __name(cacheHas, "cacheHas");
  var cacheHas_default = cacheHas;

  // ../boardzilla-core/node_modules/lodash-es/_equalArrays.js
  var COMPARE_PARTIAL_FLAG = 1;
  var COMPARE_UNORDERED_FLAG = 2;
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache_default() : void 0;
    stack.set(array, other);
    stack.set(other, array);
    while (++index < arrLength) {
      var arrValue = array[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome_default(other, function(othValue2, othIndex) {
          if (!cacheHas_default(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
  }
  __name(equalArrays, "equalArrays");
  var equalArrays_default = equalArrays;

  // ../boardzilla-core/node_modules/lodash-es/_mapToArray.js
  function mapToArray(map2) {
    var index = -1, result = Array(map2.size);
    map2.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  __name(mapToArray, "mapToArray");
  var mapToArray_default = mapToArray;

  // ../boardzilla-core/node_modules/lodash-es/_setToArray.js
  function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  __name(setToArray, "setToArray");
  var setToArray_default = setToArray;

  // ../boardzilla-core/node_modules/lodash-es/_equalByTag.js
  var COMPARE_PARTIAL_FLAG2 = 1;
  var COMPARE_UNORDERED_FLAG2 = 2;
  var boolTag2 = "[object Boolean]";
  var dateTag2 = "[object Date]";
  var errorTag2 = "[object Error]";
  var mapTag2 = "[object Map]";
  var numberTag2 = "[object Number]";
  var regexpTag2 = "[object RegExp]";
  var setTag2 = "[object Set]";
  var stringTag2 = "[object String]";
  var symbolTag2 = "[object Symbol]";
  var arrayBufferTag2 = "[object ArrayBuffer]";
  var dataViewTag2 = "[object DataView]";
  var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag2:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag2:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array_default(object), new Uint8Array_default(other))) {
          return false;
        }
        return true;
      case boolTag2:
      case dateTag2:
      case numberTag2:
        return eq_default(+object, +other);
      case errorTag2:
        return object.name == other.name && object.message == other.message;
      case regexpTag2:
      case stringTag2:
        return object == other + "";
      case mapTag2:
        var convert = mapToArray_default;
      case setTag2:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
        convert || (convert = setToArray_default);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG2;
        stack.set(object, other);
        var result = equalArrays_default(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object);
        return result;
      case symbolTag2:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  __name(equalByTag, "equalByTag");
  var equalByTag_default = equalByTag;

  // ../boardzilla-core/node_modules/lodash-es/_arrayPush.js
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  __name(arrayPush, "arrayPush");
  var arrayPush_default = arrayPush;

  // ../boardzilla-core/node_modules/lodash-es/_baseGetAllKeys.js
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
  }
  __name(baseGetAllKeys, "baseGetAllKeys");
  var baseGetAllKeys_default = baseGetAllKeys;

  // ../boardzilla-core/node_modules/lodash-es/_arrayFilter.js
  function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  __name(arrayFilter, "arrayFilter");
  var arrayFilter_default = arrayFilter;

  // ../boardzilla-core/node_modules/lodash-es/stubArray.js
  function stubArray() {
    return [];
  }
  __name(stubArray, "stubArray");
  var stubArray_default = stubArray;

  // ../boardzilla-core/node_modules/lodash-es/_getSymbols.js
  var objectProto13 = Object.prototype;
  var propertyIsEnumerable2 = objectProto13.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray_default : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter_default(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable2.call(object, symbol);
    });
  };
  var getSymbols_default = getSymbols;

  // ../boardzilla-core/node_modules/lodash-es/_getAllKeys.js
  function getAllKeys(object) {
    return baseGetAllKeys_default(object, keys_default, getSymbols_default);
  }
  __name(getAllKeys, "getAllKeys");
  var getAllKeys_default = getAllKeys;

  // ../boardzilla-core/node_modules/lodash-es/_equalObjects.js
  var COMPARE_PARTIAL_FLAG3 = 1;
  var objectProto14 = Object.prototype;
  var hasOwnProperty11 = objectProto14.hasOwnProperty;
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG3, objProps = getAllKeys_default(object), objLength = objProps.length, othProps = getAllKeys_default(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty11.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
  }
  __name(equalObjects, "equalObjects");
  var equalObjects_default = equalObjects;

  // ../boardzilla-core/node_modules/lodash-es/_DataView.js
  var DataView = getNative_default(root_default, "DataView");
  var DataView_default = DataView;

  // ../boardzilla-core/node_modules/lodash-es/_Promise.js
  var Promise2 = getNative_default(root_default, "Promise");
  var Promise_default = Promise2;

  // ../boardzilla-core/node_modules/lodash-es/_Set.js
  var Set2 = getNative_default(root_default, "Set");
  var Set_default = Set2;

  // ../boardzilla-core/node_modules/lodash-es/_WeakMap.js
  var WeakMap2 = getNative_default(root_default, "WeakMap");
  var WeakMap_default = WeakMap2;

  // ../boardzilla-core/node_modules/lodash-es/_getTag.js
  var mapTag3 = "[object Map]";
  var objectTag3 = "[object Object]";
  var promiseTag = "[object Promise]";
  var setTag3 = "[object Set]";
  var weakMapTag2 = "[object WeakMap]";
  var dataViewTag3 = "[object DataView]";
  var dataViewCtorString = toSource_default(DataView_default);
  var mapCtorString = toSource_default(Map_default);
  var promiseCtorString = toSource_default(Promise_default);
  var setCtorString = toSource_default(Set_default);
  var weakMapCtorString = toSource_default(WeakMap_default);
  var getTag = baseGetTag_default;
  if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag3 || Map_default && getTag(new Map_default()) != mapTag3 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag3 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
    getTag = /* @__PURE__ */ __name(function(value) {
      var result = baseGetTag_default(value), Ctor = result == objectTag3 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag3;
          case mapCtorString:
            return mapTag3;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag3;
          case weakMapCtorString:
            return weakMapTag2;
        }
      }
      return result;
    }, "getTag");
  }
  var getTag_default = getTag;

  // ../boardzilla-core/node_modules/lodash-es/_baseIsEqualDeep.js
  var COMPARE_PARTIAL_FLAG4 = 1;
  var argsTag3 = "[object Arguments]";
  var arrayTag2 = "[object Array]";
  var objectTag4 = "[object Object]";
  var objectProto15 = Object.prototype;
  var hasOwnProperty12 = objectProto15.hasOwnProperty;
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_default(object), othIsArr = isArray_default(other), objTag = objIsArr ? arrayTag2 : getTag_default(object), othTag = othIsArr ? arrayTag2 : getTag_default(other);
    objTag = objTag == argsTag3 ? objectTag4 : objTag;
    othTag = othTag == argsTag3 ? objectTag4 : othTag;
    var objIsObj = objTag == objectTag4, othIsObj = othTag == objectTag4, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer_default(object)) {
      if (!isBuffer_default(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack_default());
      return objIsArr || isTypedArray_default(object) ? equalArrays_default(object, other, bitmask, customizer, equalFunc, stack) : equalByTag_default(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG4)) {
      var objIsWrapped = objIsObj && hasOwnProperty12.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty12.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack_default());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack_default());
    return equalObjects_default(object, other, bitmask, customizer, equalFunc, stack);
  }
  __name(baseIsEqualDeep, "baseIsEqualDeep");
  var baseIsEqualDeep_default = baseIsEqualDeep;

  // ../boardzilla-core/node_modules/lodash-es/_baseIsEqual.js
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike_default(value) && !isObjectLike_default(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep_default(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  __name(baseIsEqual, "baseIsEqual");
  var baseIsEqual_default = baseIsEqual;

  // ../boardzilla-core/node_modules/lodash-es/_baseIsMatch.js
  var COMPARE_PARTIAL_FLAG5 = 1;
  var COMPARE_UNORDERED_FLAG3 = 2;
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0], objValue = object[key], srcValue = data[1];
      if (noCustomizer && data[2]) {
        if (objValue === void 0 && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack_default();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === void 0 ? baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG5 | COMPARE_UNORDERED_FLAG3, customizer, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }
  __name(baseIsMatch, "baseIsMatch");
  var baseIsMatch_default = baseIsMatch;

  // ../boardzilla-core/node_modules/lodash-es/_isStrictComparable.js
  function isStrictComparable(value) {
    return value === value && !isObject_default(value);
  }
  __name(isStrictComparable, "isStrictComparable");
  var isStrictComparable_default = isStrictComparable;

  // ../boardzilla-core/node_modules/lodash-es/_getMatchData.js
  function getMatchData(object) {
    var result = keys_default(object), length = result.length;
    while (length--) {
      var key = result[length], value = object[key];
      result[length] = [key, value, isStrictComparable_default(value)];
    }
    return result;
  }
  __name(getMatchData, "getMatchData");
  var getMatchData_default = getMatchData;

  // ../boardzilla-core/node_modules/lodash-es/_matchesStrictComparable.js
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
    };
  }
  __name(matchesStrictComparable, "matchesStrictComparable");
  var matchesStrictComparable_default = matchesStrictComparable;

  // ../boardzilla-core/node_modules/lodash-es/_baseMatches.js
  function baseMatches(source) {
    var matchData = getMatchData_default(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable_default(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch_default(object, source, matchData);
    };
  }
  __name(baseMatches, "baseMatches");
  var baseMatches_default = baseMatches;

  // ../boardzilla-core/node_modules/lodash-es/_isKey.js
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
  var reIsPlainProp = /^\w*$/;
  function isKey(value, object) {
    if (isArray_default(value)) {
      return false;
    }
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }
  __name(isKey, "isKey");
  var isKey_default = isKey;

  // ../boardzilla-core/node_modules/lodash-es/memoize.js
  var FUNC_ERROR_TEXT3 = "Expected a function";
  function memoize(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT3);
    }
    var memoized = /* @__PURE__ */ __name(function() {
      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    }, "memoized");
    memoized.cache = new (memoize.Cache || MapCache_default)();
    return memoized;
  }
  __name(memoize, "memoize");
  memoize.Cache = MapCache_default;
  var memoize_default = memoize;

  // ../boardzilla-core/node_modules/lodash-es/_memoizeCapped.js
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped(func) {
    var result = memoize_default(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });
    var cache = result.cache;
    return result;
  }
  __name(memoizeCapped, "memoizeCapped");
  var memoizeCapped_default = memoizeCapped;

  // ../boardzilla-core/node_modules/lodash-es/_stringToPath.js
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped_default(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46) {
      result.push("");
    }
    string.replace(rePropName, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
    });
    return result;
  });
  var stringToPath_default = stringToPath;

  // ../boardzilla-core/node_modules/lodash-es/_baseToString.js
  var INFINITY = 1 / 0;
  var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolToString = symbolProto2 ? symbolProto2.toString : void 0;
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray_default(value)) {
      return arrayMap_default(value, baseToString) + "";
    }
    if (isSymbol_default(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  __name(baseToString, "baseToString");
  var baseToString_default = baseToString;

  // ../boardzilla-core/node_modules/lodash-es/toString.js
  function toString2(value) {
    return value == null ? "" : baseToString_default(value);
  }
  __name(toString2, "toString");
  var toString_default = toString2;

  // ../boardzilla-core/node_modules/lodash-es/_castPath.js
  function castPath(value, object) {
    if (isArray_default(value)) {
      return value;
    }
    return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
  }
  __name(castPath, "castPath");
  var castPath_default = castPath;

  // ../boardzilla-core/node_modules/lodash-es/_toKey.js
  var INFINITY2 = 1 / 0;
  function toKey(value) {
    if (typeof value == "string" || isSymbol_default(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY2 ? "-0" : result;
  }
  __name(toKey, "toKey");
  var toKey_default = toKey;

  // ../boardzilla-core/node_modules/lodash-es/_baseGet.js
  function baseGet(object, path) {
    path = castPath_default(path, object);
    var index = 0, length = path.length;
    while (object != null && index < length) {
      object = object[toKey_default(path[index++])];
    }
    return index && index == length ? object : void 0;
  }
  __name(baseGet, "baseGet");
  var baseGet_default = baseGet;

  // ../boardzilla-core/node_modules/lodash-es/get.js
  function get3(object, path, defaultValue) {
    var result = object == null ? void 0 : baseGet_default(object, path);
    return result === void 0 ? defaultValue : result;
  }
  __name(get3, "get");
  var get_default = get3;

  // ../boardzilla-core/node_modules/lodash-es/_baseHasIn.js
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }
  __name(baseHasIn, "baseHasIn");
  var baseHasIn_default = baseHasIn;

  // ../boardzilla-core/node_modules/lodash-es/_hasPath.js
  function hasPath(object, path, hasFunc) {
    path = castPath_default(path, object);
    var index = -1, length = path.length, result = false;
    while (++index < length) {
      var key = toKey_default(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength_default(length) && isIndex_default(key, length) && (isArray_default(object) || isArguments_default(object));
  }
  __name(hasPath, "hasPath");
  var hasPath_default = hasPath;

  // ../boardzilla-core/node_modules/lodash-es/hasIn.js
  function hasIn(object, path) {
    return object != null && hasPath_default(object, path, baseHasIn_default);
  }
  __name(hasIn, "hasIn");
  var hasIn_default = hasIn;

  // ../boardzilla-core/node_modules/lodash-es/_baseMatchesProperty.js
  var COMPARE_PARTIAL_FLAG6 = 1;
  var COMPARE_UNORDERED_FLAG4 = 2;
  function baseMatchesProperty(path, srcValue) {
    if (isKey_default(path) && isStrictComparable_default(srcValue)) {
      return matchesStrictComparable_default(toKey_default(path), srcValue);
    }
    return function(object) {
      var objValue = get_default(object, path);
      return objValue === void 0 && objValue === srcValue ? hasIn_default(object, path) : baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG6 | COMPARE_UNORDERED_FLAG4);
    };
  }
  __name(baseMatchesProperty, "baseMatchesProperty");
  var baseMatchesProperty_default = baseMatchesProperty;

  // ../boardzilla-core/node_modules/lodash-es/_baseProperty.js
  function baseProperty(key) {
    return function(object) {
      return object == null ? void 0 : object[key];
    };
  }
  __name(baseProperty, "baseProperty");
  var baseProperty_default = baseProperty;

  // ../boardzilla-core/node_modules/lodash-es/_basePropertyDeep.js
  function basePropertyDeep(path) {
    return function(object) {
      return baseGet_default(object, path);
    };
  }
  __name(basePropertyDeep, "basePropertyDeep");
  var basePropertyDeep_default = basePropertyDeep;

  // ../boardzilla-core/node_modules/lodash-es/property.js
  function property(path) {
    return isKey_default(path) ? baseProperty_default(toKey_default(path)) : basePropertyDeep_default(path);
  }
  __name(property, "property");
  var property_default = property;

  // ../boardzilla-core/node_modules/lodash-es/_baseIteratee.js
  function baseIteratee(value) {
    if (typeof value == "function") {
      return value;
    }
    if (value == null) {
      return identity_default;
    }
    if (typeof value == "object") {
      return isArray_default(value) ? baseMatchesProperty_default(value[0], value[1]) : baseMatches_default(value);
    }
    return property_default(value);
  }
  __name(baseIteratee, "baseIteratee");
  var baseIteratee_default = baseIteratee;

  // ../boardzilla-core/node_modules/lodash-es/_baseMap.js
  function baseMap(collection, iteratee) {
    var index = -1, result = isArrayLike_default(collection) ? Array(collection.length) : [];
    baseEach_default(collection, function(value, key, collection2) {
      result[++index] = iteratee(value, key, collection2);
    });
    return result;
  }
  __name(baseMap, "baseMap");
  var baseMap_default = baseMap;

  // ../boardzilla-core/node_modules/lodash-es/map.js
  function map(collection, iteratee) {
    var func = isArray_default(collection) ? arrayMap_default : baseMap_default;
    return func(collection, baseIteratee_default(iteratee, 3));
  }
  __name(map, "map");
  var map_default = map;

  // ../boardzilla-core/node_modules/react-color/es/components/block/BlockSwatches.js
  var BlockSwatches = /* @__PURE__ */ __name(function BlockSwatches2(_ref) {
    var colors2 = _ref.colors, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover;
    var styles = (0, import_reactcss10.default)({
      "default": {
        swatches: {
          marginRight: "-10px"
        },
        swatch: {
          width: "22px",
          height: "22px",
          float: "left",
          marginRight: "10px",
          marginBottom: "10px",
          borderRadius: "4px"
        },
        clear: {
          clear: "both"
        }
      }
    });
    return import_react17.default.createElement(
      "div",
      { style: styles.swatches },
      map_default(colors2, function(c) {
        return import_react17.default.createElement(Swatch_default, {
          key: c,
          color: c,
          style: styles.swatch,
          onClick,
          onHover: onSwatchHover,
          focusStyle: {
            boxShadow: "0 0 4px " + c
          }
        });
      }),
      import_react17.default.createElement("div", { style: styles.clear })
    );
  }, "BlockSwatches");
  var BlockSwatches_default = BlockSwatches;

  // ../boardzilla-core/node_modules/react-color/es/components/block/Block.js
  var Block = /* @__PURE__ */ __name(function Block2(_ref) {
    var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, hex = _ref.hex, colors2 = _ref.colors, width = _ref.width, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var transparent = hex === "transparent";
    var handleChange = /* @__PURE__ */ __name(function handleChange2(hexCode, e) {
      isValidHex(hexCode) && onChange({
        hex: hexCode,
        source: "hex"
      }, e);
    }, "handleChange");
    var styles = (0, import_reactcss11.default)(merge_default({
      "default": {
        card: {
          width,
          background: "#fff",
          boxShadow: "0 1px rgba(0,0,0,.1)",
          borderRadius: "6px",
          position: "relative"
        },
        head: {
          height: "110px",
          background: hex,
          borderRadius: "6px 6px 0 0",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          position: "relative"
        },
        body: {
          padding: "10px"
        },
        label: {
          fontSize: "18px",
          color: getContrastingColor(hex),
          position: "relative"
        },
        triangle: {
          width: "0px",
          height: "0px",
          borderStyle: "solid",
          borderWidth: "0 10px 10px 10px",
          borderColor: "transparent transparent " + hex + " transparent",
          position: "absolute",
          top: "-10px",
          left: "50%",
          marginLeft: "-10px"
        },
        input: {
          width: "100%",
          fontSize: "12px",
          color: "#666",
          border: "0px",
          outline: "none",
          height: "22px",
          boxShadow: "inset 0 0 0 1px #ddd",
          borderRadius: "4px",
          padding: "0 7px",
          boxSizing: "border-box"
        }
      },
      "hide-triangle": {
        triangle: {
          display: "none"
        }
      }
    }, passedStyles), { "hide-triangle": triangle === "hide" });
    return import_react18.default.createElement(
      "div",
      { style: styles.card, className: "block-picker " + className },
      import_react18.default.createElement("div", { style: styles.triangle }),
      import_react18.default.createElement(
        "div",
        { style: styles.head },
        transparent && import_react18.default.createElement(Checkboard_default, { borderRadius: "6px 6px 0 0" }),
        import_react18.default.createElement(
          "div",
          { style: styles.label },
          hex
        )
      ),
      import_react18.default.createElement(
        "div",
        { style: styles.body },
        import_react18.default.createElement(BlockSwatches_default, { colors: colors2, onClick: handleChange, onSwatchHover }),
        import_react18.default.createElement(EditableInput_default, {
          style: { input: styles.input },
          value: hex,
          onChange: handleChange
        })
      )
    );
  }, "Block");
  Block.propTypes = {
    width: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]),
    colors: import_prop_types2.default.arrayOf(import_prop_types2.default.string),
    triangle: import_prop_types2.default.oneOf(["top", "hide"]),
    styles: import_prop_types2.default.object
  };
  Block.defaultProps = {
    width: 170,
    colors: ["#D9E3F0", "#F47373", "#697689", "#37D67A", "#2CCCE4", "#555555", "#dce775", "#ff8a65", "#ba68c8"],
    triangle: "top",
    styles: {}
  };
  var Block_default = ColorWrap_default(Block);

  // ../boardzilla-core/node_modules/react-color/es/components/circle/Circle.js
  var import_react20 = __toESM(require_react());
  var import_prop_types3 = __toESM(require_prop_types());
  var import_reactcss13 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/material-colors/dist/colors.es2015.js
  var red = { "50": "#ffebee", "100": "#ffcdd2", "200": "#ef9a9a", "300": "#e57373", "400": "#ef5350", "500": "#f44336", "600": "#e53935", "700": "#d32f2f", "800": "#c62828", "900": "#b71c1c", "a100": "#ff8a80", "a200": "#ff5252", "a400": "#ff1744", "a700": "#d50000" };
  var pink = { "50": "#fce4ec", "100": "#f8bbd0", "200": "#f48fb1", "300": "#f06292", "400": "#ec407a", "500": "#e91e63", "600": "#d81b60", "700": "#c2185b", "800": "#ad1457", "900": "#880e4f", "a100": "#ff80ab", "a200": "#ff4081", "a400": "#f50057", "a700": "#c51162" };
  var purple = { "50": "#f3e5f5", "100": "#e1bee7", "200": "#ce93d8", "300": "#ba68c8", "400": "#ab47bc", "500": "#9c27b0", "600": "#8e24aa", "700": "#7b1fa2", "800": "#6a1b9a", "900": "#4a148c", "a100": "#ea80fc", "a200": "#e040fb", "a400": "#d500f9", "a700": "#aa00ff" };
  var deepPurple = { "50": "#ede7f6", "100": "#d1c4e9", "200": "#b39ddb", "300": "#9575cd", "400": "#7e57c2", "500": "#673ab7", "600": "#5e35b1", "700": "#512da8", "800": "#4527a0", "900": "#311b92", "a100": "#b388ff", "a200": "#7c4dff", "a400": "#651fff", "a700": "#6200ea" };
  var indigo = { "50": "#e8eaf6", "100": "#c5cae9", "200": "#9fa8da", "300": "#7986cb", "400": "#5c6bc0", "500": "#3f51b5", "600": "#3949ab", "700": "#303f9f", "800": "#283593", "900": "#1a237e", "a100": "#8c9eff", "a200": "#536dfe", "a400": "#3d5afe", "a700": "#304ffe" };
  var blue = { "50": "#e3f2fd", "100": "#bbdefb", "200": "#90caf9", "300": "#64b5f6", "400": "#42a5f5", "500": "#2196f3", "600": "#1e88e5", "700": "#1976d2", "800": "#1565c0", "900": "#0d47a1", "a100": "#82b1ff", "a200": "#448aff", "a400": "#2979ff", "a700": "#2962ff" };
  var lightBlue = { "50": "#e1f5fe", "100": "#b3e5fc", "200": "#81d4fa", "300": "#4fc3f7", "400": "#29b6f6", "500": "#03a9f4", "600": "#039be5", "700": "#0288d1", "800": "#0277bd", "900": "#01579b", "a100": "#80d8ff", "a200": "#40c4ff", "a400": "#00b0ff", "a700": "#0091ea" };
  var cyan = { "50": "#e0f7fa", "100": "#b2ebf2", "200": "#80deea", "300": "#4dd0e1", "400": "#26c6da", "500": "#00bcd4", "600": "#00acc1", "700": "#0097a7", "800": "#00838f", "900": "#006064", "a100": "#84ffff", "a200": "#18ffff", "a400": "#00e5ff", "a700": "#00b8d4" };
  var teal = { "50": "#e0f2f1", "100": "#b2dfdb", "200": "#80cbc4", "300": "#4db6ac", "400": "#26a69a", "500": "#009688", "600": "#00897b", "700": "#00796b", "800": "#00695c", "900": "#004d40", "a100": "#a7ffeb", "a200": "#64ffda", "a400": "#1de9b6", "a700": "#00bfa5" };
  var green = { "50": "#e8f5e9", "100": "#c8e6c9", "200": "#a5d6a7", "300": "#81c784", "400": "#66bb6a", "500": "#4caf50", "600": "#43a047", "700": "#388e3c", "800": "#2e7d32", "900": "#1b5e20", "a100": "#b9f6ca", "a200": "#69f0ae", "a400": "#00e676", "a700": "#00c853" };
  var lightGreen = { "50": "#f1f8e9", "100": "#dcedc8", "200": "#c5e1a5", "300": "#aed581", "400": "#9ccc65", "500": "#8bc34a", "600": "#7cb342", "700": "#689f38", "800": "#558b2f", "900": "#33691e", "a100": "#ccff90", "a200": "#b2ff59", "a400": "#76ff03", "a700": "#64dd17" };
  var lime = { "50": "#f9fbe7", "100": "#f0f4c3", "200": "#e6ee9c", "300": "#dce775", "400": "#d4e157", "500": "#cddc39", "600": "#c0ca33", "700": "#afb42b", "800": "#9e9d24", "900": "#827717", "a100": "#f4ff81", "a200": "#eeff41", "a400": "#c6ff00", "a700": "#aeea00" };
  var yellow = { "50": "#fffde7", "100": "#fff9c4", "200": "#fff59d", "300": "#fff176", "400": "#ffee58", "500": "#ffeb3b", "600": "#fdd835", "700": "#fbc02d", "800": "#f9a825", "900": "#f57f17", "a100": "#ffff8d", "a200": "#ffff00", "a400": "#ffea00", "a700": "#ffd600" };
  var amber = { "50": "#fff8e1", "100": "#ffecb3", "200": "#ffe082", "300": "#ffd54f", "400": "#ffca28", "500": "#ffc107", "600": "#ffb300", "700": "#ffa000", "800": "#ff8f00", "900": "#ff6f00", "a100": "#ffe57f", "a200": "#ffd740", "a400": "#ffc400", "a700": "#ffab00" };
  var orange = { "50": "#fff3e0", "100": "#ffe0b2", "200": "#ffcc80", "300": "#ffb74d", "400": "#ffa726", "500": "#ff9800", "600": "#fb8c00", "700": "#f57c00", "800": "#ef6c00", "900": "#e65100", "a100": "#ffd180", "a200": "#ffab40", "a400": "#ff9100", "a700": "#ff6d00" };
  var deepOrange = { "50": "#fbe9e7", "100": "#ffccbc", "200": "#ffab91", "300": "#ff8a65", "400": "#ff7043", "500": "#ff5722", "600": "#f4511e", "700": "#e64a19", "800": "#d84315", "900": "#bf360c", "a100": "#ff9e80", "a200": "#ff6e40", "a400": "#ff3d00", "a700": "#dd2c00" };
  var brown = { "50": "#efebe9", "100": "#d7ccc8", "200": "#bcaaa4", "300": "#a1887f", "400": "#8d6e63", "500": "#795548", "600": "#6d4c41", "700": "#5d4037", "800": "#4e342e", "900": "#3e2723" };
  var blueGrey = { "50": "#eceff1", "100": "#cfd8dc", "200": "#b0bec5", "300": "#90a4ae", "400": "#78909c", "500": "#607d8b", "600": "#546e7a", "700": "#455a64", "800": "#37474f", "900": "#263238" };

  // ../boardzilla-core/node_modules/react-color/es/components/circle/CircleSwatch.js
  var import_react19 = __toESM(require_react());
  var import_reactcss12 = __toESM(require_lib());
  var CircleSwatch = /* @__PURE__ */ __name(function CircleSwatch2(_ref) {
    var color = _ref.color, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover, hover = _ref.hover, active = _ref.active, circleSize = _ref.circleSize, circleSpacing = _ref.circleSpacing;
    var styles = (0, import_reactcss12.default)({
      "default": {
        swatch: {
          width: circleSize,
          height: circleSize,
          marginRight: circleSpacing,
          marginBottom: circleSpacing,
          transform: "scale(1)",
          transition: "100ms transform ease"
        },
        Swatch: {
          borderRadius: "50%",
          background: "transparent",
          boxShadow: "inset 0 0 0 " + (circleSize / 2 + 1) + "px " + color,
          transition: "100ms box-shadow ease"
        }
      },
      "hover": {
        swatch: {
          transform: "scale(1.2)"
        }
      },
      "active": {
        Swatch: {
          boxShadow: "inset 0 0 0 3px " + color
        }
      }
    }, { hover, active });
    return import_react19.default.createElement(
      "div",
      { style: styles.swatch },
      import_react19.default.createElement(Swatch_default, {
        style: styles.Swatch,
        color,
        onClick,
        onHover: onSwatchHover,
        focusStyle: { boxShadow: styles.Swatch.boxShadow + ", 0 0 5px " + color }
      })
    );
  }, "CircleSwatch");
  CircleSwatch.defaultProps = {
    circleSize: 28,
    circleSpacing: 14
  };
  var CircleSwatch_default = (0, import_reactcss12.handleHover)(CircleSwatch);

  // ../boardzilla-core/node_modules/react-color/es/components/circle/Circle.js
  var Circle = /* @__PURE__ */ __name(function Circle2(_ref) {
    var width = _ref.width, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors2 = _ref.colors, hex = _ref.hex, circleSize = _ref.circleSize, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, circleSpacing = _ref.circleSpacing, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss13.default)(merge_default({
      "default": {
        card: {
          width,
          display: "flex",
          flexWrap: "wrap",
          marginRight: -circleSpacing,
          marginBottom: -circleSpacing
        }
      }
    }, passedStyles));
    var handleChange = /* @__PURE__ */ __name(function handleChange2(hexCode, e) {
      return onChange({ hex: hexCode, source: "hex" }, e);
    }, "handleChange");
    return import_react20.default.createElement(
      "div",
      { style: styles.card, className: "circle-picker " + className },
      map_default(colors2, function(c) {
        return import_react20.default.createElement(CircleSwatch_default, {
          key: c,
          color: c,
          onClick: handleChange,
          onSwatchHover,
          active: hex === c.toLowerCase(),
          circleSize,
          circleSpacing
        });
      })
    );
  }, "Circle");
  Circle.propTypes = {
    width: import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.number]),
    circleSize: import_prop_types3.default.number,
    circleSpacing: import_prop_types3.default.number,
    styles: import_prop_types3.default.object
  };
  Circle.defaultProps = {
    width: 252,
    circleSize: 28,
    circleSpacing: 14,
    colors: [red["500"], pink["500"], purple["500"], deepPurple["500"], indigo["500"], blue["500"], lightBlue["500"], cyan["500"], teal["500"], green["500"], lightGreen["500"], lime["500"], yellow["500"], amber["500"], orange["500"], deepOrange["500"], brown["500"], blueGrey["500"]],
    styles: {}
  };
  var Circle_default = ColorWrap_default(Circle);

  // ../boardzilla-core/node_modules/react-color/es/components/chrome/Chrome.js
  var import_react24 = __toESM(require_react());
  var import_prop_types4 = __toESM(require_prop_types());
  var import_reactcss17 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/chrome/ChromeFields.js
  var import_react21 = __toESM(require_react());
  var import_reactcss14 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/lodash-es/isUndefined.js
  function isUndefined(value) {
    return value === void 0;
  }
  __name(isUndefined, "isUndefined");
  var isUndefined_default = isUndefined;

  // ../boardzilla-core/node_modules/react-color/es/components/chrome/ChromeFields.js
  var import_UnfoldMoreHorizontalIcon = __toESM(require_UnfoldMoreHorizontalIcon());
  var _createClass7 = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    __name(defineProperties, "defineProperties");
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck7(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  __name(_classCallCheck7, "_classCallCheck");
  function _possibleConstructorReturn7(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  __name(_possibleConstructorReturn7, "_possibleConstructorReturn");
  function _inherits7(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  __name(_inherits7, "_inherits");
  var ChromeFields = function(_React$Component) {
    _inherits7(ChromeFields2, _React$Component);
    function ChromeFields2(props) {
      _classCallCheck7(this, ChromeFields2);
      var _this = _possibleConstructorReturn7(this, (ChromeFields2.__proto__ || Object.getPrototypeOf(ChromeFields2)).call(this));
      _this.toggleViews = function() {
        if (_this.state.view === "hex") {
          _this.setState({ view: "rgb" });
        } else if (_this.state.view === "rgb") {
          _this.setState({ view: "hsl" });
        } else if (_this.state.view === "hsl") {
          if (_this.props.hsl.a === 1) {
            _this.setState({ view: "hex" });
          } else {
            _this.setState({ view: "rgb" });
          }
        }
      };
      _this.handleChange = function(data, e) {
        if (data.hex) {
          isValidHex(data.hex) && _this.props.onChange({
            hex: data.hex,
            source: "hex"
          }, e);
        } else if (data.r || data.g || data.b) {
          _this.props.onChange({
            r: data.r || _this.props.rgb.r,
            g: data.g || _this.props.rgb.g,
            b: data.b || _this.props.rgb.b,
            source: "rgb"
          }, e);
        } else if (data.a) {
          if (data.a < 0) {
            data.a = 0;
          } else if (data.a > 1) {
            data.a = 1;
          }
          _this.props.onChange({
            h: _this.props.hsl.h,
            s: _this.props.hsl.s,
            l: _this.props.hsl.l,
            a: Math.round(data.a * 100) / 100,
            source: "rgb"
          }, e);
        } else if (data.h || data.s || data.l) {
          if (typeof data.s === "string" && data.s.includes("%")) {
            data.s = data.s.replace("%", "");
          }
          if (typeof data.l === "string" && data.l.includes("%")) {
            data.l = data.l.replace("%", "");
          }
          if (data.s == 1) {
            data.s = 0.01;
          } else if (data.l == 1) {
            data.l = 0.01;
          }
          _this.props.onChange({
            h: data.h || _this.props.hsl.h,
            s: Number(!isUndefined_default(data.s) ? data.s : _this.props.hsl.s),
            l: Number(!isUndefined_default(data.l) ? data.l : _this.props.hsl.l),
            source: "hsl"
          }, e);
        }
      };
      _this.showHighlight = function(e) {
        e.currentTarget.style.background = "#eee";
      };
      _this.hideHighlight = function(e) {
        e.currentTarget.style.background = "transparent";
      };
      if (props.hsl.a !== 1 && props.view === "hex") {
        _this.state = {
          view: "rgb"
        };
      } else {
        _this.state = {
          view: props.view
        };
      }
      return _this;
    }
    __name(ChromeFields2, "ChromeFields");
    _createClass7(ChromeFields2, [{
      key: "render",
      value: /* @__PURE__ */ __name(function render3() {
        var _this2 = this;
        var styles = (0, import_reactcss14.default)({
          "default": {
            wrap: {
              paddingTop: "16px",
              display: "flex"
            },
            fields: {
              flex: "1",
              display: "flex",
              marginLeft: "-6px"
            },
            field: {
              paddingLeft: "6px",
              width: "100%"
            },
            alpha: {
              paddingLeft: "6px",
              width: "100%"
            },
            toggle: {
              width: "32px",
              textAlign: "right",
              position: "relative"
            },
            icon: {
              marginRight: "-4px",
              marginTop: "12px",
              cursor: "pointer",
              position: "relative"
            },
            iconHighlight: {
              position: "absolute",
              width: "24px",
              height: "28px",
              background: "#eee",
              borderRadius: "4px",
              top: "10px",
              left: "12px",
              display: "none"
            },
            input: {
              fontSize: "11px",
              color: "#333",
              width: "100%",
              borderRadius: "2px",
              border: "none",
              boxShadow: "inset 0 0 0 1px #dadada",
              height: "21px",
              textAlign: "center"
            },
            label: {
              textTransform: "uppercase",
              fontSize: "11px",
              lineHeight: "11px",
              color: "#969696",
              textAlign: "center",
              display: "block",
              marginTop: "12px"
            },
            svg: {
              fill: "#333",
              width: "24px",
              height: "24px",
              border: "1px transparent solid",
              borderRadius: "5px"
            }
          },
          "disableAlpha": {
            alpha: {
              display: "none"
            }
          }
        }, this.props, this.state);
        var fields = void 0;
        if (this.state.view === "hex") {
          fields = import_react21.default.createElement(
            "div",
            { style: styles.fields, className: "flexbox-fix" },
            import_react21.default.createElement(
              "div",
              { style: styles.field },
              import_react21.default.createElement(EditableInput_default, {
                style: { input: styles.input, label: styles.label },
                label: "hex",
                value: this.props.hex,
                onChange: this.handleChange
              })
            )
          );
        } else if (this.state.view === "rgb") {
          fields = import_react21.default.createElement(
            "div",
            { style: styles.fields, className: "flexbox-fix" },
            import_react21.default.createElement(
              "div",
              { style: styles.field },
              import_react21.default.createElement(EditableInput_default, {
                style: { input: styles.input, label: styles.label },
                label: "r",
                value: this.props.rgb.r,
                onChange: this.handleChange
              })
            ),
            import_react21.default.createElement(
              "div",
              { style: styles.field },
              import_react21.default.createElement(EditableInput_default, {
                style: { input: styles.input, label: styles.label },
                label: "g",
                value: this.props.rgb.g,
                onChange: this.handleChange
              })
            ),
            import_react21.default.createElement(
              "div",
              { style: styles.field },
              import_react21.default.createElement(EditableInput_default, {
                style: { input: styles.input, label: styles.label },
                label: "b",
                value: this.props.rgb.b,
                onChange: this.handleChange
              })
            ),
            import_react21.default.createElement(
              "div",
              { style: styles.alpha },
              import_react21.default.createElement(EditableInput_default, {
                style: { input: styles.input, label: styles.label },
                label: "a",
                value: this.props.rgb.a,
                arrowOffset: 0.01,
                onChange: this.handleChange
              })
            )
          );
        } else if (this.state.view === "hsl") {
          fields = import_react21.default.createElement(
            "div",
            { style: styles.fields, className: "flexbox-fix" },
            import_react21.default.createElement(
              "div",
              { style: styles.field },
              import_react21.default.createElement(EditableInput_default, {
                style: { input: styles.input, label: styles.label },
                label: "h",
                value: Math.round(this.props.hsl.h),
                onChange: this.handleChange
              })
            ),
            import_react21.default.createElement(
              "div",
              { style: styles.field },
              import_react21.default.createElement(EditableInput_default, {
                style: { input: styles.input, label: styles.label },
                label: "s",
                value: Math.round(this.props.hsl.s * 100) + "%",
                onChange: this.handleChange
              })
            ),
            import_react21.default.createElement(
              "div",
              { style: styles.field },
              import_react21.default.createElement(EditableInput_default, {
                style: { input: styles.input, label: styles.label },
                label: "l",
                value: Math.round(this.props.hsl.l * 100) + "%",
                onChange: this.handleChange
              })
            ),
            import_react21.default.createElement(
              "div",
              { style: styles.alpha },
              import_react21.default.createElement(EditableInput_default, {
                style: { input: styles.input, label: styles.label },
                label: "a",
                value: this.props.hsl.a,
                arrowOffset: 0.01,
                onChange: this.handleChange
              })
            )
          );
        }
        return import_react21.default.createElement(
          "div",
          { style: styles.wrap, className: "flexbox-fix" },
          fields,
          import_react21.default.createElement(
            "div",
            { style: styles.toggle },
            import_react21.default.createElement(
              "div",
              { style: styles.icon, onClick: this.toggleViews, ref: /* @__PURE__ */ __name(function ref(icon) {
                return _this2.icon = icon;
              }, "ref") },
              import_react21.default.createElement(import_UnfoldMoreHorizontalIcon.default, {
                style: styles.svg,
                onMouseOver: this.showHighlight,
                onMouseEnter: this.showHighlight,
                onMouseOut: this.hideHighlight
              })
            )
          )
        );
      }, "render")
    }], [{
      key: "getDerivedStateFromProps",
      value: /* @__PURE__ */ __name(function getDerivedStateFromProps(nextProps, state) {
        if (nextProps.hsl.a !== 1 && state.view === "hex") {
          return { view: "rgb" };
        }
        return null;
      }, "getDerivedStateFromProps")
    }]);
    return ChromeFields2;
  }(import_react21.default.Component);
  ChromeFields.defaultProps = {
    view: "hex"
  };
  var ChromeFields_default = ChromeFields;

  // ../boardzilla-core/node_modules/react-color/es/components/chrome/ChromePointer.js
  var import_react22 = __toESM(require_react());
  var import_reactcss15 = __toESM(require_lib());
  var ChromePointer = /* @__PURE__ */ __name(function ChromePointer2() {
    var styles = (0, import_reactcss15.default)({
      "default": {
        picker: {
          width: "12px",
          height: "12px",
          borderRadius: "6px",
          transform: "translate(-6px, -1px)",
          backgroundColor: "rgb(248, 248, 248)",
          boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
        }
      }
    });
    return import_react22.default.createElement("div", { style: styles.picker });
  }, "ChromePointer");
  var ChromePointer_default = ChromePointer;

  // ../boardzilla-core/node_modules/react-color/es/components/chrome/ChromePointerCircle.js
  var import_react23 = __toESM(require_react());
  var import_reactcss16 = __toESM(require_lib());
  var ChromePointerCircle = /* @__PURE__ */ __name(function ChromePointerCircle2() {
    var styles = (0, import_reactcss16.default)({
      "default": {
        picker: {
          width: "12px",
          height: "12px",
          borderRadius: "6px",
          boxShadow: "inset 0 0 0 1px #fff",
          transform: "translate(-6px, -6px)"
        }
      }
    });
    return import_react23.default.createElement("div", { style: styles.picker });
  }, "ChromePointerCircle");
  var ChromePointerCircle_default = ChromePointerCircle;

  // ../boardzilla-core/node_modules/react-color/es/components/chrome/Chrome.js
  var Chrome = /* @__PURE__ */ __name(function Chrome2(_ref) {
    var width = _ref.width, onChange = _ref.onChange, disableAlpha = _ref.disableAlpha, rgb = _ref.rgb, hsl = _ref.hsl, hsv = _ref.hsv, hex = _ref.hex, renderers = _ref.renderers, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className, defaultView = _ref.defaultView;
    var styles = (0, import_reactcss17.default)(merge_default({
      "default": {
        picker: {
          width,
          background: "#fff",
          borderRadius: "2px",
          boxShadow: "0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)",
          boxSizing: "initial",
          fontFamily: "Menlo"
        },
        saturation: {
          width: "100%",
          paddingBottom: "55%",
          position: "relative",
          borderRadius: "2px 2px 0 0",
          overflow: "hidden"
        },
        Saturation: {
          radius: "2px 2px 0 0"
        },
        body: {
          padding: "16px 16px 12px"
        },
        controls: {
          display: "flex"
        },
        color: {
          width: "32px"
        },
        swatch: {
          marginTop: "6px",
          width: "16px",
          height: "16px",
          borderRadius: "8px",
          position: "relative",
          overflow: "hidden"
        },
        active: {
          absolute: "0px 0px 0px 0px",
          borderRadius: "8px",
          boxShadow: "inset 0 0 0 1px rgba(0,0,0,.1)",
          background: "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", " + rgb.a + ")",
          zIndex: "2"
        },
        toggles: {
          flex: "1"
        },
        hue: {
          height: "10px",
          position: "relative",
          marginBottom: "8px"
        },
        Hue: {
          radius: "2px"
        },
        alpha: {
          height: "10px",
          position: "relative"
        },
        Alpha: {
          radius: "2px"
        }
      },
      "disableAlpha": {
        color: {
          width: "22px"
        },
        alpha: {
          display: "none"
        },
        hue: {
          marginBottom: "0px"
        },
        swatch: {
          width: "10px",
          height: "10px",
          marginTop: "0px"
        }
      }
    }, passedStyles), { disableAlpha });
    return import_react24.default.createElement(
      "div",
      { style: styles.picker, className: "chrome-picker " + className },
      import_react24.default.createElement(
        "div",
        { style: styles.saturation },
        import_react24.default.createElement(Saturation_default, {
          style: styles.Saturation,
          hsl,
          hsv,
          pointer: ChromePointerCircle_default,
          onChange
        })
      ),
      import_react24.default.createElement(
        "div",
        { style: styles.body },
        import_react24.default.createElement(
          "div",
          { style: styles.controls, className: "flexbox-fix" },
          import_react24.default.createElement(
            "div",
            { style: styles.color },
            import_react24.default.createElement(
              "div",
              { style: styles.swatch },
              import_react24.default.createElement("div", { style: styles.active }),
              import_react24.default.createElement(Checkboard_default, { renderers })
            )
          ),
          import_react24.default.createElement(
            "div",
            { style: styles.toggles },
            import_react24.default.createElement(
              "div",
              { style: styles.hue },
              import_react24.default.createElement(Hue_default, {
                style: styles.Hue,
                hsl,
                pointer: ChromePointer_default,
                onChange
              })
            ),
            import_react24.default.createElement(
              "div",
              { style: styles.alpha },
              import_react24.default.createElement(Alpha_default, {
                style: styles.Alpha,
                rgb,
                hsl,
                pointer: ChromePointer_default,
                renderers,
                onChange
              })
            )
          )
        ),
        import_react24.default.createElement(ChromeFields_default, {
          rgb,
          hsl,
          hex,
          view: defaultView,
          onChange,
          disableAlpha
        })
      )
    );
  }, "Chrome");
  Chrome.propTypes = {
    width: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number]),
    disableAlpha: import_prop_types4.default.bool,
    styles: import_prop_types4.default.object,
    defaultView: import_prop_types4.default.oneOf(["hex", "rgb", "hsl"])
  };
  Chrome.defaultProps = {
    width: 225,
    disableAlpha: false,
    styles: {}
  };
  var Chrome_default = ColorWrap_default(Chrome);

  // ../boardzilla-core/node_modules/react-color/es/components/compact/Compact.js
  var import_react27 = __toESM(require_react());
  var import_prop_types5 = __toESM(require_prop_types());
  var import_reactcss20 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/compact/CompactColor.js
  var import_react25 = __toESM(require_react());
  var import_reactcss18 = __toESM(require_lib());
  var CompactColor = /* @__PURE__ */ __name(function CompactColor2(_ref) {
    var color = _ref.color, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
    } : _ref$onClick, onSwatchHover = _ref.onSwatchHover, active = _ref.active;
    var styles = (0, import_reactcss18.default)({
      "default": {
        color: {
          background: color,
          width: "15px",
          height: "15px",
          float: "left",
          marginRight: "5px",
          marginBottom: "5px",
          position: "relative",
          cursor: "pointer"
        },
        dot: {
          absolute: "5px 5px 5px 5px",
          background: getContrastingColor(color),
          borderRadius: "50%",
          opacity: "0"
        }
      },
      "active": {
        dot: {
          opacity: "1"
        }
      },
      "color-#FFFFFF": {
        color: {
          boxShadow: "inset 0 0 0 1px #ddd"
        },
        dot: {
          background: "#000"
        }
      },
      "transparent": {
        dot: {
          background: "#000"
        }
      }
    }, { active, "color-#FFFFFF": color === "#FFFFFF", "transparent": color === "transparent" });
    return import_react25.default.createElement(
      Swatch_default,
      {
        style: styles.color,
        color,
        onClick,
        onHover: onSwatchHover,
        focusStyle: { boxShadow: "0 0 4px " + color }
      },
      import_react25.default.createElement("div", { style: styles.dot })
    );
  }, "CompactColor");
  var CompactColor_default = CompactColor;

  // ../boardzilla-core/node_modules/react-color/es/components/compact/CompactFields.js
  var import_react26 = __toESM(require_react());
  var import_reactcss19 = __toESM(require_lib());
  var CompactFields = /* @__PURE__ */ __name(function CompactFields2(_ref) {
    var hex = _ref.hex, rgb = _ref.rgb, onChange = _ref.onChange;
    var styles = (0, import_reactcss19.default)({
      "default": {
        fields: {
          display: "flex",
          paddingBottom: "6px",
          paddingRight: "5px",
          position: "relative"
        },
        active: {
          position: "absolute",
          top: "6px",
          left: "5px",
          height: "9px",
          width: "9px",
          background: hex
        },
        HEXwrap: {
          flex: "6",
          position: "relative"
        },
        HEXinput: {
          width: "80%",
          padding: "0px",
          paddingLeft: "20%",
          border: "none",
          outline: "none",
          background: "none",
          fontSize: "12px",
          color: "#333",
          height: "16px"
        },
        HEXlabel: {
          display: "none"
        },
        RGBwrap: {
          flex: "3",
          position: "relative"
        },
        RGBinput: {
          width: "70%",
          padding: "0px",
          paddingLeft: "30%",
          border: "none",
          outline: "none",
          background: "none",
          fontSize: "12px",
          color: "#333",
          height: "16px"
        },
        RGBlabel: {
          position: "absolute",
          top: "3px",
          left: "0px",
          lineHeight: "16px",
          textTransform: "uppercase",
          fontSize: "12px",
          color: "#999"
        }
      }
    });
    var handleChange = /* @__PURE__ */ __name(function handleChange2(data, e) {
      if (data.r || data.g || data.b) {
        onChange({
          r: data.r || rgb.r,
          g: data.g || rgb.g,
          b: data.b || rgb.b,
          source: "rgb"
        }, e);
      } else {
        onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      }
    }, "handleChange");
    return import_react26.default.createElement(
      "div",
      { style: styles.fields, className: "flexbox-fix" },
      import_react26.default.createElement("div", { style: styles.active }),
      import_react26.default.createElement(EditableInput_default, {
        style: { wrap: styles.HEXwrap, input: styles.HEXinput, label: styles.HEXlabel },
        label: "hex",
        value: hex,
        onChange: handleChange
      }),
      import_react26.default.createElement(EditableInput_default, {
        style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
        label: "r",
        value: rgb.r,
        onChange: handleChange
      }),
      import_react26.default.createElement(EditableInput_default, {
        style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
        label: "g",
        value: rgb.g,
        onChange: handleChange
      }),
      import_react26.default.createElement(EditableInput_default, {
        style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
        label: "b",
        value: rgb.b,
        onChange: handleChange
      })
    );
  }, "CompactFields");
  var CompactFields_default = CompactFields;

  // ../boardzilla-core/node_modules/react-color/es/components/compact/Compact.js
  var Compact = /* @__PURE__ */ __name(function Compact2(_ref) {
    var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors2 = _ref.colors, hex = _ref.hex, rgb = _ref.rgb, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss20.default)(merge_default({
      "default": {
        Compact: {
          background: "#f6f6f6",
          radius: "4px"
        },
        compact: {
          paddingTop: "5px",
          paddingLeft: "5px",
          boxSizing: "initial",
          width: "240px"
        },
        clear: {
          clear: "both"
        }
      }
    }, passedStyles));
    var handleChange = /* @__PURE__ */ __name(function handleChange2(data, e) {
      if (data.hex) {
        isValidHex(data.hex) && onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      } else {
        onChange(data, e);
      }
    }, "handleChange");
    return import_react27.default.createElement(
      Raised_default,
      { style: styles.Compact, styles: passedStyles },
      import_react27.default.createElement(
        "div",
        { style: styles.compact, className: "compact-picker " + className },
        import_react27.default.createElement(
          "div",
          null,
          map_default(colors2, function(c) {
            return import_react27.default.createElement(CompactColor_default, {
              key: c,
              color: c,
              active: c.toLowerCase() === hex,
              onClick: handleChange,
              onSwatchHover
            });
          }),
          import_react27.default.createElement("div", { style: styles.clear })
        ),
        import_react27.default.createElement(CompactFields_default, { hex, rgb, onChange: handleChange })
      )
    );
  }, "Compact");
  Compact.propTypes = {
    colors: import_prop_types5.default.arrayOf(import_prop_types5.default.string),
    styles: import_prop_types5.default.object
  };
  Compact.defaultProps = {
    colors: ["#4D4D4D", "#999999", "#FFFFFF", "#F44E3B", "#FE9200", "#FCDC00", "#DBDF00", "#A4DD00", "#68CCCA", "#73D8FF", "#AEA1FF", "#FDA1FF", "#333333", "#808080", "#cccccc", "#D33115", "#E27300", "#FCC400", "#B0BC00", "#68BC00", "#16A5A5", "#009CE0", "#7B64FF", "#FA28FF", "#000000", "#666666", "#B3B3B3", "#9F0500", "#C45100", "#FB9E00", "#808900", "#194D33", "#0C797D", "#0062B1", "#653294", "#AB149E"],
    styles: {}
  };
  var Compact_default = ColorWrap_default(Compact);

  // ../boardzilla-core/node_modules/react-color/es/components/github/Github.js
  var import_react29 = __toESM(require_react());
  var import_prop_types6 = __toESM(require_prop_types());
  var import_reactcss22 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/github/GithubSwatch.js
  var import_react28 = __toESM(require_react());
  var import_reactcss21 = __toESM(require_lib());
  var GithubSwatch = /* @__PURE__ */ __name(function GithubSwatch2(_ref) {
    var hover = _ref.hover, color = _ref.color, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover;
    var hoverSwatch = {
      position: "relative",
      zIndex: "2",
      outline: "2px solid #fff",
      boxShadow: "0 0 5px 2px rgba(0,0,0,0.25)"
    };
    var styles = (0, import_reactcss21.default)({
      "default": {
        swatch: {
          width: "25px",
          height: "25px",
          fontSize: "0"
        }
      },
      "hover": {
        swatch: hoverSwatch
      }
    }, { hover });
    return import_react28.default.createElement(
      "div",
      { style: styles.swatch },
      import_react28.default.createElement(Swatch_default, {
        color,
        onClick,
        onHover: onSwatchHover,
        focusStyle: hoverSwatch
      })
    );
  }, "GithubSwatch");
  var GithubSwatch_default = (0, import_reactcss21.handleHover)(GithubSwatch);

  // ../boardzilla-core/node_modules/react-color/es/components/github/Github.js
  var Github = /* @__PURE__ */ __name(function Github2(_ref) {
    var width = _ref.width, colors2 = _ref.colors, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss22.default)(merge_default({
      "default": {
        card: {
          width,
          background: "#fff",
          border: "1px solid rgba(0,0,0,0.2)",
          boxShadow: "0 3px 12px rgba(0,0,0,0.15)",
          borderRadius: "4px",
          position: "relative",
          padding: "5px",
          display: "flex",
          flexWrap: "wrap"
        },
        triangle: {
          position: "absolute",
          border: "7px solid transparent",
          borderBottomColor: "#fff"
        },
        triangleShadow: {
          position: "absolute",
          border: "8px solid transparent",
          borderBottomColor: "rgba(0,0,0,0.15)"
        }
      },
      "hide-triangle": {
        triangle: {
          display: "none"
        },
        triangleShadow: {
          display: "none"
        }
      },
      "top-left-triangle": {
        triangle: {
          top: "-14px",
          left: "10px"
        },
        triangleShadow: {
          top: "-16px",
          left: "9px"
        }
      },
      "top-right-triangle": {
        triangle: {
          top: "-14px",
          right: "10px"
        },
        triangleShadow: {
          top: "-16px",
          right: "9px"
        }
      },
      "bottom-left-triangle": {
        triangle: {
          top: "35px",
          left: "10px",
          transform: "rotate(180deg)"
        },
        triangleShadow: {
          top: "37px",
          left: "9px",
          transform: "rotate(180deg)"
        }
      },
      "bottom-right-triangle": {
        triangle: {
          top: "35px",
          right: "10px",
          transform: "rotate(180deg)"
        },
        triangleShadow: {
          top: "37px",
          right: "9px",
          transform: "rotate(180deg)"
        }
      }
    }, passedStyles), {
      "hide-triangle": triangle === "hide",
      "top-left-triangle": triangle === "top-left",
      "top-right-triangle": triangle === "top-right",
      "bottom-left-triangle": triangle === "bottom-left",
      "bottom-right-triangle": triangle === "bottom-right"
    });
    var handleChange = /* @__PURE__ */ __name(function handleChange2(hex, e) {
      return onChange({ hex, source: "hex" }, e);
    }, "handleChange");
    return import_react29.default.createElement(
      "div",
      { style: styles.card, className: "github-picker " + className },
      import_react29.default.createElement("div", { style: styles.triangleShadow }),
      import_react29.default.createElement("div", { style: styles.triangle }),
      map_default(colors2, function(c) {
        return import_react29.default.createElement(GithubSwatch_default, {
          color: c,
          key: c,
          onClick: handleChange,
          onSwatchHover
        });
      })
    );
  }, "Github");
  Github.propTypes = {
    width: import_prop_types6.default.oneOfType([import_prop_types6.default.string, import_prop_types6.default.number]),
    colors: import_prop_types6.default.arrayOf(import_prop_types6.default.string),
    triangle: import_prop_types6.default.oneOf(["hide", "top-left", "top-right", "bottom-left", "bottom-right"]),
    styles: import_prop_types6.default.object
  };
  Github.defaultProps = {
    width: 200,
    colors: ["#B80000", "#DB3E00", "#FCCB00", "#008B02", "#006B76", "#1273DE", "#004DCF", "#5300EB", "#EB9694", "#FAD0C3", "#FEF3BD", "#C1E1C5", "#BEDADC", "#C4DEF6", "#BED3F3", "#D4C4FB"],
    triangle: "top-left",
    styles: {}
  };
  var Github_default = ColorWrap_default(Github);

  // ../boardzilla-core/node_modules/react-color/es/components/hue/Hue.js
  var import_react31 = __toESM(require_react());
  var import_prop_types7 = __toESM(require_prop_types());
  var import_reactcss24 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/hue/HuePointer.js
  var import_react30 = __toESM(require_react());
  var import_reactcss23 = __toESM(require_lib());
  var SliderPointer = /* @__PURE__ */ __name(function SliderPointer2(_ref) {
    var direction = _ref.direction;
    var styles = (0, import_reactcss23.default)({
      "default": {
        picker: {
          width: "18px",
          height: "18px",
          borderRadius: "50%",
          transform: "translate(-9px, -1px)",
          backgroundColor: "rgb(248, 248, 248)",
          boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
        }
      },
      "vertical": {
        picker: {
          transform: "translate(-3px, -9px)"
        }
      }
    }, { vertical: direction === "vertical" });
    return import_react30.default.createElement("div", { style: styles.picker });
  }, "SliderPointer");
  var HuePointer_default = SliderPointer;

  // ../boardzilla-core/node_modules/react-color/es/components/hue/Hue.js
  var _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var HuePicker = /* @__PURE__ */ __name(function HuePicker2(_ref) {
    var width = _ref.width, height = _ref.height, onChange = _ref.onChange, hsl = _ref.hsl, direction = _ref.direction, pointer = _ref.pointer, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss24.default)(merge_default({
      "default": {
        picker: {
          position: "relative",
          width,
          height
        },
        hue: {
          radius: "2px"
        }
      }
    }, passedStyles));
    var handleChange = /* @__PURE__ */ __name(function handleChange2(data) {
      return onChange({ a: 1, h: data.h, l: 0.5, s: 1 });
    }, "handleChange");
    return import_react31.default.createElement(
      "div",
      { style: styles.picker, className: "hue-picker " + className },
      import_react31.default.createElement(Hue_default, _extends7({}, styles.hue, {
        hsl,
        pointer,
        onChange: handleChange,
        direction
      }))
    );
  }, "HuePicker");
  HuePicker.propTypes = {
    styles: import_prop_types7.default.object
  };
  HuePicker.defaultProps = {
    width: "316px",
    height: "16px",
    direction: "horizontal",
    pointer: HuePointer_default,
    styles: {}
  };
  var Hue_default2 = ColorWrap_default(HuePicker);

  // ../boardzilla-core/node_modules/react-color/es/components/material/Material.js
  var import_react32 = __toESM(require_react());
  var import_reactcss25 = __toESM(require_lib());
  var Material = /* @__PURE__ */ __name(function Material2(_ref) {
    var onChange = _ref.onChange, hex = _ref.hex, rgb = _ref.rgb, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss25.default)(merge_default({
      "default": {
        material: {
          width: "98px",
          height: "98px",
          padding: "16px",
          fontFamily: "Roboto"
        },
        HEXwrap: {
          position: "relative"
        },
        HEXinput: {
          width: "100%",
          marginTop: "12px",
          fontSize: "15px",
          color: "#333",
          padding: "0px",
          border: "0px",
          borderBottom: "2px solid " + hex,
          outline: "none",
          height: "30px"
        },
        HEXlabel: {
          position: "absolute",
          top: "0px",
          left: "0px",
          fontSize: "11px",
          color: "#999999",
          textTransform: "capitalize"
        },
        Hex: {
          style: {}
        },
        RGBwrap: {
          position: "relative"
        },
        RGBinput: {
          width: "100%",
          marginTop: "12px",
          fontSize: "15px",
          color: "#333",
          padding: "0px",
          border: "0px",
          borderBottom: "1px solid #eee",
          outline: "none",
          height: "30px"
        },
        RGBlabel: {
          position: "absolute",
          top: "0px",
          left: "0px",
          fontSize: "11px",
          color: "#999999",
          textTransform: "capitalize"
        },
        split: {
          display: "flex",
          marginRight: "-10px",
          paddingTop: "11px"
        },
        third: {
          flex: "1",
          paddingRight: "10px"
        }
      }
    }, passedStyles));
    var handleChange = /* @__PURE__ */ __name(function handleChange2(data, e) {
      if (data.hex) {
        isValidHex(data.hex) && onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      } else if (data.r || data.g || data.b) {
        onChange({
          r: data.r || rgb.r,
          g: data.g || rgb.g,
          b: data.b || rgb.b,
          source: "rgb"
        }, e);
      }
    }, "handleChange");
    return import_react32.default.createElement(
      Raised_default,
      { styles: passedStyles },
      import_react32.default.createElement(
        "div",
        { style: styles.material, className: "material-picker " + className },
        import_react32.default.createElement(EditableInput_default, {
          style: { wrap: styles.HEXwrap, input: styles.HEXinput, label: styles.HEXlabel },
          label: "hex",
          value: hex,
          onChange: handleChange
        }),
        import_react32.default.createElement(
          "div",
          { style: styles.split, className: "flexbox-fix" },
          import_react32.default.createElement(
            "div",
            { style: styles.third },
            import_react32.default.createElement(EditableInput_default, {
              style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
              label: "r",
              value: rgb.r,
              onChange: handleChange
            })
          ),
          import_react32.default.createElement(
            "div",
            { style: styles.third },
            import_react32.default.createElement(EditableInput_default, {
              style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
              label: "g",
              value: rgb.g,
              onChange: handleChange
            })
          ),
          import_react32.default.createElement(
            "div",
            { style: styles.third },
            import_react32.default.createElement(EditableInput_default, {
              style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
              label: "b",
              value: rgb.b,
              onChange: handleChange
            })
          )
        )
      )
    );
  }, "Material");
  var Material_default = ColorWrap_default(Material);

  // ../boardzilla-core/node_modules/react-color/es/components/photoshop/Photoshop.js
  var import_react38 = __toESM(require_react());
  var import_prop_types8 = __toESM(require_prop_types());
  var import_reactcss31 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/photoshop/PhotoshopFields.js
  var import_react33 = __toESM(require_react());
  var import_reactcss26 = __toESM(require_lib());
  var PhotoshopPicker = /* @__PURE__ */ __name(function PhotoshopPicker2(_ref) {
    var onChange = _ref.onChange, rgb = _ref.rgb, hsv = _ref.hsv, hex = _ref.hex;
    var styles = (0, import_reactcss26.default)({
      "default": {
        fields: {
          paddingTop: "5px",
          paddingBottom: "9px",
          width: "80px",
          position: "relative"
        },
        divider: {
          height: "5px"
        },
        RGBwrap: {
          position: "relative"
        },
        RGBinput: {
          marginLeft: "40%",
          width: "40%",
          height: "18px",
          border: "1px solid #888888",
          boxShadow: "inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",
          marginBottom: "5px",
          fontSize: "13px",
          paddingLeft: "3px",
          marginRight: "10px"
        },
        RGBlabel: {
          left: "0px",
          top: "0px",
          width: "34px",
          textTransform: "uppercase",
          fontSize: "13px",
          height: "18px",
          lineHeight: "22px",
          position: "absolute"
        },
        HEXwrap: {
          position: "relative"
        },
        HEXinput: {
          marginLeft: "20%",
          width: "80%",
          height: "18px",
          border: "1px solid #888888",
          boxShadow: "inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",
          marginBottom: "6px",
          fontSize: "13px",
          paddingLeft: "3px"
        },
        HEXlabel: {
          position: "absolute",
          top: "0px",
          left: "0px",
          width: "14px",
          textTransform: "uppercase",
          fontSize: "13px",
          height: "18px",
          lineHeight: "22px"
        },
        fieldSymbols: {
          position: "absolute",
          top: "5px",
          right: "-7px",
          fontSize: "13px"
        },
        symbol: {
          height: "20px",
          lineHeight: "22px",
          paddingBottom: "7px"
        }
      }
    });
    var handleChange = /* @__PURE__ */ __name(function handleChange2(data, e) {
      if (data["#"]) {
        isValidHex(data["#"]) && onChange({
          hex: data["#"],
          source: "hex"
        }, e);
      } else if (data.r || data.g || data.b) {
        onChange({
          r: data.r || rgb.r,
          g: data.g || rgb.g,
          b: data.b || rgb.b,
          source: "rgb"
        }, e);
      } else if (data.h || data.s || data.v) {
        onChange({
          h: data.h || hsv.h,
          s: data.s || hsv.s,
          v: data.v || hsv.v,
          source: "hsv"
        }, e);
      }
    }, "handleChange");
    return import_react33.default.createElement(
      "div",
      { style: styles.fields },
      import_react33.default.createElement(EditableInput_default, {
        style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
        label: "h",
        value: Math.round(hsv.h),
        onChange: handleChange
      }),
      import_react33.default.createElement(EditableInput_default, {
        style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
        label: "s",
        value: Math.round(hsv.s * 100),
        onChange: handleChange
      }),
      import_react33.default.createElement(EditableInput_default, {
        style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
        label: "v",
        value: Math.round(hsv.v * 100),
        onChange: handleChange
      }),
      import_react33.default.createElement("div", { style: styles.divider }),
      import_react33.default.createElement(EditableInput_default, {
        style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
        label: "r",
        value: rgb.r,
        onChange: handleChange
      }),
      import_react33.default.createElement(EditableInput_default, {
        style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
        label: "g",
        value: rgb.g,
        onChange: handleChange
      }),
      import_react33.default.createElement(EditableInput_default, {
        style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
        label: "b",
        value: rgb.b,
        onChange: handleChange
      }),
      import_react33.default.createElement("div", { style: styles.divider }),
      import_react33.default.createElement(EditableInput_default, {
        style: { wrap: styles.HEXwrap, input: styles.HEXinput, label: styles.HEXlabel },
        label: "#",
        value: hex.replace("#", ""),
        onChange: handleChange
      }),
      import_react33.default.createElement(
        "div",
        { style: styles.fieldSymbols },
        import_react33.default.createElement(
          "div",
          { style: styles.symbol },
          "\xB0"
        ),
        import_react33.default.createElement(
          "div",
          { style: styles.symbol },
          "%"
        ),
        import_react33.default.createElement(
          "div",
          { style: styles.symbol },
          "%"
        )
      )
    );
  }, "PhotoshopPicker");
  var PhotoshopFields_default = PhotoshopPicker;

  // ../boardzilla-core/node_modules/react-color/es/components/photoshop/PhotoshopPointerCircle.js
  var import_react34 = __toESM(require_react());
  var import_reactcss27 = __toESM(require_lib());
  var PhotoshopPointerCircle = /* @__PURE__ */ __name(function PhotoshopPointerCircle2(_ref) {
    var hsl = _ref.hsl;
    var styles = (0, import_reactcss27.default)({
      "default": {
        picker: {
          width: "12px",
          height: "12px",
          borderRadius: "6px",
          boxShadow: "inset 0 0 0 1px #fff",
          transform: "translate(-6px, -6px)"
        }
      },
      "black-outline": {
        picker: {
          boxShadow: "inset 0 0 0 1px #000"
        }
      }
    }, { "black-outline": hsl.l > 0.5 });
    return import_react34.default.createElement("div", { style: styles.picker });
  }, "PhotoshopPointerCircle");
  var PhotoshopPointerCircle_default = PhotoshopPointerCircle;

  // ../boardzilla-core/node_modules/react-color/es/components/photoshop/PhotoshopPointer.js
  var import_react35 = __toESM(require_react());
  var import_reactcss28 = __toESM(require_lib());
  var PhotoshopPointerCircle3 = /* @__PURE__ */ __name(function PhotoshopPointerCircle4() {
    var styles = (0, import_reactcss28.default)({
      "default": {
        triangle: {
          width: 0,
          height: 0,
          borderStyle: "solid",
          borderWidth: "4px 0 4px 6px",
          borderColor: "transparent transparent transparent #fff",
          position: "absolute",
          top: "1px",
          left: "1px"
        },
        triangleBorder: {
          width: 0,
          height: 0,
          borderStyle: "solid",
          borderWidth: "5px 0 5px 8px",
          borderColor: "transparent transparent transparent #555"
        },
        left: {
          Extend: "triangleBorder",
          transform: "translate(-13px, -4px)"
        },
        leftInside: {
          Extend: "triangle",
          transform: "translate(-8px, -5px)"
        },
        right: {
          Extend: "triangleBorder",
          transform: "translate(20px, -14px) rotate(180deg)"
        },
        rightInside: {
          Extend: "triangle",
          transform: "translate(-8px, -5px)"
        }
      }
    });
    return import_react35.default.createElement(
      "div",
      { style: styles.pointer },
      import_react35.default.createElement(
        "div",
        { style: styles.left },
        import_react35.default.createElement("div", { style: styles.leftInside })
      ),
      import_react35.default.createElement(
        "div",
        { style: styles.right },
        import_react35.default.createElement("div", { style: styles.rightInside })
      )
    );
  }, "PhotoshopPointerCircle");
  var PhotoshopPointer_default = PhotoshopPointerCircle3;

  // ../boardzilla-core/node_modules/react-color/es/components/photoshop/PhotoshopButton.js
  var import_react36 = __toESM(require_react());
  var import_reactcss29 = __toESM(require_lib());
  var PhotoshopButton = /* @__PURE__ */ __name(function PhotoshopButton2(_ref) {
    var onClick = _ref.onClick, label = _ref.label, children = _ref.children, active = _ref.active;
    var styles = (0, import_reactcss29.default)({
      "default": {
        button: {
          backgroundImage: "linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)",
          border: "1px solid #878787",
          borderRadius: "2px",
          height: "20px",
          boxShadow: "0 1px 0 0 #EAEAEA",
          fontSize: "14px",
          color: "#000",
          lineHeight: "20px",
          textAlign: "center",
          marginBottom: "10px",
          cursor: "pointer"
        }
      },
      "active": {
        button: {
          boxShadow: "0 0 0 1px #878787"
        }
      }
    }, { active });
    return import_react36.default.createElement(
      "div",
      { style: styles.button, onClick },
      label || children
    );
  }, "PhotoshopButton");
  var PhotoshopButton_default = PhotoshopButton;

  // ../boardzilla-core/node_modules/react-color/es/components/photoshop/PhotoshopPreviews.js
  var import_react37 = __toESM(require_react());
  var import_reactcss30 = __toESM(require_lib());
  var PhotoshopPreviews = /* @__PURE__ */ __name(function PhotoshopPreviews2(_ref) {
    var rgb = _ref.rgb, currentColor = _ref.currentColor;
    var styles = (0, import_reactcss30.default)({
      "default": {
        swatches: {
          border: "1px solid #B3B3B3",
          borderBottom: "1px solid #F0F0F0",
          marginBottom: "2px",
          marginTop: "1px"
        },
        new: {
          height: "34px",
          background: "rgb(" + rgb.r + "," + rgb.g + ", " + rgb.b + ")",
          boxShadow: "inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000"
        },
        current: {
          height: "34px",
          background: currentColor,
          boxShadow: "inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000"
        },
        label: {
          fontSize: "14px",
          color: "#000",
          textAlign: "center"
        }
      }
    });
    return import_react37.default.createElement(
      "div",
      null,
      import_react37.default.createElement(
        "div",
        { style: styles.label },
        "new"
      ),
      import_react37.default.createElement(
        "div",
        { style: styles.swatches },
        import_react37.default.createElement("div", { style: styles.new }),
        import_react37.default.createElement("div", { style: styles.current })
      ),
      import_react37.default.createElement(
        "div",
        { style: styles.label },
        "current"
      )
    );
  }, "PhotoshopPreviews");
  var PhotoshopPreviews_default = PhotoshopPreviews;

  // ../boardzilla-core/node_modules/react-color/es/components/photoshop/Photoshop.js
  var _createClass8 = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    __name(defineProperties, "defineProperties");
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck8(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  __name(_classCallCheck8, "_classCallCheck");
  function _possibleConstructorReturn8(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  }
  __name(_possibleConstructorReturn8, "_possibleConstructorReturn");
  function _inherits8(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  __name(_inherits8, "_inherits");
  var Photoshop = function(_React$Component) {
    _inherits8(Photoshop2, _React$Component);
    function Photoshop2(props) {
      _classCallCheck8(this, Photoshop2);
      var _this = _possibleConstructorReturn8(this, (Photoshop2.__proto__ || Object.getPrototypeOf(Photoshop2)).call(this));
      _this.state = {
        currentColor: props.hex
      };
      return _this;
    }
    __name(Photoshop2, "Photoshop");
    _createClass8(Photoshop2, [{
      key: "render",
      value: /* @__PURE__ */ __name(function render3() {
        var _props = this.props, _props$styles = _props.styles, passedStyles = _props$styles === void 0 ? {} : _props$styles, _props$className = _props.className, className = _props$className === void 0 ? "" : _props$className;
        var styles = (0, import_reactcss31.default)(merge_default({
          "default": {
            picker: {
              background: "#DCDCDC",
              borderRadius: "4px",
              boxShadow: "0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)",
              boxSizing: "initial",
              width: "513px"
            },
            head: {
              backgroundImage: "linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)",
              borderBottom: "1px solid #B1B1B1",
              boxShadow: "inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)",
              height: "23px",
              lineHeight: "24px",
              borderRadius: "4px 4px 0 0",
              fontSize: "13px",
              color: "#4D4D4D",
              textAlign: "center"
            },
            body: {
              padding: "15px 15px 0",
              display: "flex"
            },
            saturation: {
              width: "256px",
              height: "256px",
              position: "relative",
              border: "2px solid #B3B3B3",
              borderBottom: "2px solid #F0F0F0",
              overflow: "hidden"
            },
            hue: {
              position: "relative",
              height: "256px",
              width: "19px",
              marginLeft: "10px",
              border: "2px solid #B3B3B3",
              borderBottom: "2px solid #F0F0F0"
            },
            controls: {
              width: "180px",
              marginLeft: "10px"
            },
            top: {
              display: "flex"
            },
            previews: {
              width: "60px"
            },
            actions: {
              flex: "1",
              marginLeft: "20px"
            }
          }
        }, passedStyles));
        return import_react38.default.createElement(
          "div",
          { style: styles.picker, className: "photoshop-picker " + className },
          import_react38.default.createElement(
            "div",
            { style: styles.head },
            this.props.header
          ),
          import_react38.default.createElement(
            "div",
            { style: styles.body, className: "flexbox-fix" },
            import_react38.default.createElement(
              "div",
              { style: styles.saturation },
              import_react38.default.createElement(Saturation_default, {
                hsl: this.props.hsl,
                hsv: this.props.hsv,
                pointer: PhotoshopPointerCircle_default,
                onChange: this.props.onChange
              })
            ),
            import_react38.default.createElement(
              "div",
              { style: styles.hue },
              import_react38.default.createElement(Hue_default, {
                direction: "vertical",
                hsl: this.props.hsl,
                pointer: PhotoshopPointer_default,
                onChange: this.props.onChange
              })
            ),
            import_react38.default.createElement(
              "div",
              { style: styles.controls },
              import_react38.default.createElement(
                "div",
                { style: styles.top, className: "flexbox-fix" },
                import_react38.default.createElement(
                  "div",
                  { style: styles.previews },
                  import_react38.default.createElement(PhotoshopPreviews_default, {
                    rgb: this.props.rgb,
                    currentColor: this.state.currentColor
                  })
                ),
                import_react38.default.createElement(
                  "div",
                  { style: styles.actions },
                  import_react38.default.createElement(PhotoshopButton_default, { label: "OK", onClick: this.props.onAccept, active: true }),
                  import_react38.default.createElement(PhotoshopButton_default, { label: "Cancel", onClick: this.props.onCancel }),
                  import_react38.default.createElement(PhotoshopFields_default, {
                    onChange: this.props.onChange,
                    rgb: this.props.rgb,
                    hsv: this.props.hsv,
                    hex: this.props.hex
                  })
                )
              )
            )
          )
        );
      }, "render")
    }]);
    return Photoshop2;
  }(import_react38.default.Component);
  Photoshop.propTypes = {
    header: import_prop_types8.default.string,
    styles: import_prop_types8.default.object
  };
  Photoshop.defaultProps = {
    header: "Color Picker",
    styles: {}
  };
  var Photoshop_default = ColorWrap_default(Photoshop);

  // ../boardzilla-core/node_modules/react-color/es/components/sketch/Sketch.js
  var import_react41 = __toESM(require_react());
  var import_prop_types10 = __toESM(require_prop_types());
  var import_reactcss34 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/sketch/SketchFields.js
  var import_react39 = __toESM(require_react());
  var import_reactcss32 = __toESM(require_lib());
  var SketchFields = /* @__PURE__ */ __name(function SketchFields2(_ref) {
    var onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hex = _ref.hex, disableAlpha = _ref.disableAlpha;
    var styles = (0, import_reactcss32.default)({
      "default": {
        fields: {
          display: "flex",
          paddingTop: "4px"
        },
        single: {
          flex: "1",
          paddingLeft: "6px"
        },
        alpha: {
          flex: "1",
          paddingLeft: "6px"
        },
        double: {
          flex: "2"
        },
        input: {
          width: "80%",
          padding: "4px 10% 3px",
          border: "none",
          boxShadow: "inset 0 0 0 1px #ccc",
          fontSize: "11px"
        },
        label: {
          display: "block",
          textAlign: "center",
          fontSize: "11px",
          color: "#222",
          paddingTop: "3px",
          paddingBottom: "4px",
          textTransform: "capitalize"
        }
      },
      "disableAlpha": {
        alpha: {
          display: "none"
        }
      }
    }, { disableAlpha });
    var handleChange = /* @__PURE__ */ __name(function handleChange2(data, e) {
      if (data.hex) {
        isValidHex(data.hex) && onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      } else if (data.r || data.g || data.b) {
        onChange({
          r: data.r || rgb.r,
          g: data.g || rgb.g,
          b: data.b || rgb.b,
          a: rgb.a,
          source: "rgb"
        }, e);
      } else if (data.a) {
        if (data.a < 0) {
          data.a = 0;
        } else if (data.a > 100) {
          data.a = 100;
        }
        data.a /= 100;
        onChange({
          h: hsl.h,
          s: hsl.s,
          l: hsl.l,
          a: data.a,
          source: "rgb"
        }, e);
      }
    }, "handleChange");
    return import_react39.default.createElement(
      "div",
      { style: styles.fields, className: "flexbox-fix" },
      import_react39.default.createElement(
        "div",
        { style: styles.double },
        import_react39.default.createElement(EditableInput_default, {
          style: { input: styles.input, label: styles.label },
          label: "hex",
          value: hex.replace("#", ""),
          onChange: handleChange
        })
      ),
      import_react39.default.createElement(
        "div",
        { style: styles.single },
        import_react39.default.createElement(EditableInput_default, {
          style: { input: styles.input, label: styles.label },
          label: "r",
          value: rgb.r,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })
      ),
      import_react39.default.createElement(
        "div",
        { style: styles.single },
        import_react39.default.createElement(EditableInput_default, {
          style: { input: styles.input, label: styles.label },
          label: "g",
          value: rgb.g,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })
      ),
      import_react39.default.createElement(
        "div",
        { style: styles.single },
        import_react39.default.createElement(EditableInput_default, {
          style: { input: styles.input, label: styles.label },
          label: "b",
          value: rgb.b,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })
      ),
      import_react39.default.createElement(
        "div",
        { style: styles.alpha },
        import_react39.default.createElement(EditableInput_default, {
          style: { input: styles.input, label: styles.label },
          label: "a",
          value: Math.round(rgb.a * 100),
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "100"
        })
      )
    );
  }, "SketchFields");
  var SketchFields_default = SketchFields;

  // ../boardzilla-core/node_modules/react-color/es/components/sketch/SketchPresetColors.js
  var import_react40 = __toESM(require_react());
  var import_prop_types9 = __toESM(require_prop_types());
  var import_reactcss33 = __toESM(require_lib());
  var _extends8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var SketchPresetColors = /* @__PURE__ */ __name(function SketchPresetColors2(_ref) {
    var colors2 = _ref.colors, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
    } : _ref$onClick, onSwatchHover = _ref.onSwatchHover;
    var styles = (0, import_reactcss33.default)({
      "default": {
        colors: {
          margin: "0 -10px",
          padding: "10px 0 0 10px",
          borderTop: "1px solid #eee",
          display: "flex",
          flexWrap: "wrap",
          position: "relative"
        },
        swatchWrap: {
          width: "16px",
          height: "16px",
          margin: "0 10px 10px 0"
        },
        swatch: {
          borderRadius: "3px",
          boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15)"
        }
      },
      "no-presets": {
        colors: {
          display: "none"
        }
      }
    }, {
      "no-presets": !colors2 || !colors2.length
    });
    var handleClick = /* @__PURE__ */ __name(function handleClick2(hex, e) {
      onClick({
        hex,
        source: "hex"
      }, e);
    }, "handleClick");
    return import_react40.default.createElement(
      "div",
      { style: styles.colors, className: "flexbox-fix" },
      colors2.map(function(colorObjOrString) {
        var c = typeof colorObjOrString === "string" ? { color: colorObjOrString } : colorObjOrString;
        var key = "" + c.color + (c.title || "");
        return import_react40.default.createElement(
          "div",
          { key, style: styles.swatchWrap },
          import_react40.default.createElement(Swatch_default, _extends8({}, c, {
            style: styles.swatch,
            onClick: handleClick,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px " + c.color
            }
          }))
        );
      })
    );
  }, "SketchPresetColors");
  SketchPresetColors.propTypes = {
    colors: import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.string, import_prop_types9.default.shape({
      color: import_prop_types9.default.string,
      title: import_prop_types9.default.string
    })])).isRequired
  };
  var SketchPresetColors_default = SketchPresetColors;

  // ../boardzilla-core/node_modules/react-color/es/components/sketch/Sketch.js
  var _extends9 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var Sketch = /* @__PURE__ */ __name(function Sketch2(_ref) {
    var width = _ref.width, rgb = _ref.rgb, hex = _ref.hex, hsv = _ref.hsv, hsl = _ref.hsl, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, disableAlpha = _ref.disableAlpha, presetColors = _ref.presetColors, renderers = _ref.renderers, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss34.default)(merge_default({
      "default": _extends9({
        picker: {
          width,
          padding: "10px 10px 0",
          boxSizing: "initial",
          background: "#fff",
          borderRadius: "4px",
          boxShadow: "0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)"
        },
        saturation: {
          width: "100%",
          paddingBottom: "75%",
          position: "relative",
          overflow: "hidden"
        },
        Saturation: {
          radius: "3px",
          shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
        },
        controls: {
          display: "flex"
        },
        sliders: {
          padding: "4px 0",
          flex: "1"
        },
        color: {
          width: "24px",
          height: "24px",
          position: "relative",
          marginTop: "4px",
          marginLeft: "4px",
          borderRadius: "3px"
        },
        activeColor: {
          absolute: "0px 0px 0px 0px",
          borderRadius: "2px",
          background: "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")",
          boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
        },
        hue: {
          position: "relative",
          height: "10px",
          overflow: "hidden"
        },
        Hue: {
          radius: "2px",
          shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
        },
        alpha: {
          position: "relative",
          height: "10px",
          marginTop: "4px",
          overflow: "hidden"
        },
        Alpha: {
          radius: "2px",
          shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
        }
      }, passedStyles),
      "disableAlpha": {
        color: {
          height: "10px"
        },
        hue: {
          height: "10px"
        },
        alpha: {
          display: "none"
        }
      }
    }, passedStyles), { disableAlpha });
    return import_react41.default.createElement(
      "div",
      { style: styles.picker, className: "sketch-picker " + className },
      import_react41.default.createElement(
        "div",
        { style: styles.saturation },
        import_react41.default.createElement(Saturation_default, {
          style: styles.Saturation,
          hsl,
          hsv,
          onChange
        })
      ),
      import_react41.default.createElement(
        "div",
        { style: styles.controls, className: "flexbox-fix" },
        import_react41.default.createElement(
          "div",
          { style: styles.sliders },
          import_react41.default.createElement(
            "div",
            { style: styles.hue },
            import_react41.default.createElement(Hue_default, {
              style: styles.Hue,
              hsl,
              onChange
            })
          ),
          import_react41.default.createElement(
            "div",
            { style: styles.alpha },
            import_react41.default.createElement(Alpha_default, {
              style: styles.Alpha,
              rgb,
              hsl,
              renderers,
              onChange
            })
          )
        ),
        import_react41.default.createElement(
          "div",
          { style: styles.color },
          import_react41.default.createElement(Checkboard_default, null),
          import_react41.default.createElement("div", { style: styles.activeColor })
        )
      ),
      import_react41.default.createElement(SketchFields_default, {
        rgb,
        hsl,
        hex,
        onChange,
        disableAlpha
      }),
      import_react41.default.createElement(SketchPresetColors_default, {
        colors: presetColors,
        onClick: onChange,
        onSwatchHover
      })
    );
  }, "Sketch");
  Sketch.propTypes = {
    disableAlpha: import_prop_types10.default.bool,
    width: import_prop_types10.default.oneOfType([import_prop_types10.default.string, import_prop_types10.default.number]),
    styles: import_prop_types10.default.object
  };
  Sketch.defaultProps = {
    disableAlpha: false,
    width: 200,
    styles: {},
    presetColors: ["#D0021B", "#F5A623", "#F8E71C", "#8B572A", "#7ED321", "#417505", "#BD10E0", "#9013FE", "#4A90E2", "#50E3C2", "#B8E986", "#000000", "#4A4A4A", "#9B9B9B", "#FFFFFF"]
  };
  var Sketch_default = ColorWrap_default(Sketch);

  // ../boardzilla-core/node_modules/react-color/es/components/slider/Slider.js
  var import_react45 = __toESM(require_react());
  var import_prop_types11 = __toESM(require_prop_types());
  var import_reactcss38 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/slider/SliderSwatches.js
  var import_react43 = __toESM(require_react());
  var import_reactcss36 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/slider/SliderSwatch.js
  var import_react42 = __toESM(require_react());
  var import_reactcss35 = __toESM(require_lib());
  var SliderSwatch = /* @__PURE__ */ __name(function SliderSwatch2(_ref) {
    var hsl = _ref.hsl, offset = _ref.offset, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
    } : _ref$onClick, active = _ref.active, first = _ref.first, last = _ref.last;
    var styles = (0, import_reactcss35.default)({
      "default": {
        swatch: {
          height: "12px",
          background: "hsl(" + hsl.h + ", 50%, " + offset * 100 + "%)",
          cursor: "pointer"
        }
      },
      "first": {
        swatch: {
          borderRadius: "2px 0 0 2px"
        }
      },
      "last": {
        swatch: {
          borderRadius: "0 2px 2px 0"
        }
      },
      "active": {
        swatch: {
          transform: "scaleY(1.8)",
          borderRadius: "3.6px/2px"
        }
      }
    }, { active, first, last });
    var handleClick = /* @__PURE__ */ __name(function handleClick2(e) {
      return onClick({
        h: hsl.h,
        s: 0.5,
        l: offset,
        source: "hsl"
      }, e);
    }, "handleClick");
    return import_react42.default.createElement("div", { style: styles.swatch, onClick: handleClick });
  }, "SliderSwatch");
  var SliderSwatch_default = SliderSwatch;

  // ../boardzilla-core/node_modules/react-color/es/components/slider/SliderSwatches.js
  var SliderSwatches = /* @__PURE__ */ __name(function SliderSwatches2(_ref) {
    var onClick = _ref.onClick, hsl = _ref.hsl;
    var styles = (0, import_reactcss36.default)({
      "default": {
        swatches: {
          marginTop: "20px"
        },
        swatch: {
          boxSizing: "border-box",
          width: "20%",
          paddingRight: "1px",
          float: "left"
        },
        clear: {
          clear: "both"
        }
      }
    });
    var epsilon = 0.1;
    return import_react43.default.createElement(
      "div",
      { style: styles.swatches },
      import_react43.default.createElement(
        "div",
        { style: styles.swatch },
        import_react43.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".80",
          active: Math.abs(hsl.l - 0.8) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick,
          first: true
        })
      ),
      import_react43.default.createElement(
        "div",
        { style: styles.swatch },
        import_react43.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".65",
          active: Math.abs(hsl.l - 0.65) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })
      ),
      import_react43.default.createElement(
        "div",
        { style: styles.swatch },
        import_react43.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".50",
          active: Math.abs(hsl.l - 0.5) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })
      ),
      import_react43.default.createElement(
        "div",
        { style: styles.swatch },
        import_react43.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".35",
          active: Math.abs(hsl.l - 0.35) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })
      ),
      import_react43.default.createElement(
        "div",
        { style: styles.swatch },
        import_react43.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".20",
          active: Math.abs(hsl.l - 0.2) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick,
          last: true
        })
      ),
      import_react43.default.createElement("div", { style: styles.clear })
    );
  }, "SliderSwatches");
  var SliderSwatches_default = SliderSwatches;

  // ../boardzilla-core/node_modules/react-color/es/components/slider/SliderPointer.js
  var import_react44 = __toESM(require_react());
  var import_reactcss37 = __toESM(require_lib());
  var SliderPointer3 = /* @__PURE__ */ __name(function SliderPointer4() {
    var styles = (0, import_reactcss37.default)({
      "default": {
        picker: {
          width: "14px",
          height: "14px",
          borderRadius: "6px",
          transform: "translate(-7px, -1px)",
          backgroundColor: "rgb(248, 248, 248)",
          boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
        }
      }
    });
    return import_react44.default.createElement("div", { style: styles.picker });
  }, "SliderPointer");
  var SliderPointer_default = SliderPointer3;

  // ../boardzilla-core/node_modules/react-color/es/components/slider/Slider.js
  var Slider = /* @__PURE__ */ __name(function Slider2(_ref) {
    var hsl = _ref.hsl, onChange = _ref.onChange, pointer = _ref.pointer, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss38.default)(merge_default({
      "default": {
        hue: {
          height: "12px",
          position: "relative"
        },
        Hue: {
          radius: "2px"
        }
      }
    }, passedStyles));
    return import_react45.default.createElement(
      "div",
      { style: styles.wrap || {}, className: "slider-picker " + className },
      import_react45.default.createElement(
        "div",
        { style: styles.hue },
        import_react45.default.createElement(Hue_default, {
          style: styles.Hue,
          hsl,
          pointer,
          onChange
        })
      ),
      import_react45.default.createElement(
        "div",
        { style: styles.swatches },
        import_react45.default.createElement(SliderSwatches_default, { hsl, onClick: onChange })
      )
    );
  }, "Slider");
  Slider.propTypes = {
    styles: import_prop_types11.default.object
  };
  Slider.defaultProps = {
    pointer: SliderPointer_default,
    styles: {}
  };
  var Slider_default = ColorWrap_default(Slider);

  // ../boardzilla-core/node_modules/react-color/es/components/swatches/Swatches.js
  var import_react48 = __toESM(require_react());
  var import_prop_types12 = __toESM(require_prop_types());
  var import_reactcss41 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/swatches/SwatchesGroup.js
  var import_react47 = __toESM(require_react());
  var import_reactcss40 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/swatches/SwatchesColor.js
  var import_react46 = __toESM(require_react());
  var import_reactcss39 = __toESM(require_lib());
  var import_CheckIcon = __toESM(require_CheckIcon());
  var SwatchesColor = /* @__PURE__ */ __name(function SwatchesColor2(_ref) {
    var color = _ref.color, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
    } : _ref$onClick, onSwatchHover = _ref.onSwatchHover, first = _ref.first, last = _ref.last, active = _ref.active;
    var styles = (0, import_reactcss39.default)({
      "default": {
        color: {
          width: "40px",
          height: "24px",
          cursor: "pointer",
          background: color,
          marginBottom: "1px"
        },
        check: {
          color: getContrastingColor(color),
          marginLeft: "8px",
          display: "none"
        }
      },
      "first": {
        color: {
          overflow: "hidden",
          borderRadius: "2px 2px 0 0"
        }
      },
      "last": {
        color: {
          overflow: "hidden",
          borderRadius: "0 0 2px 2px"
        }
      },
      "active": {
        check: {
          display: "block"
        }
      },
      "color-#FFFFFF": {
        color: {
          boxShadow: "inset 0 0 0 1px #ddd"
        },
        check: {
          color: "#333"
        }
      },
      "transparent": {
        check: {
          color: "#333"
        }
      }
    }, {
      first,
      last,
      active,
      "color-#FFFFFF": color === "#FFFFFF",
      "transparent": color === "transparent"
    });
    return import_react46.default.createElement(
      Swatch_default,
      {
        color,
        style: styles.color,
        onClick,
        onHover: onSwatchHover,
        focusStyle: { boxShadow: "0 0 4px " + color }
      },
      import_react46.default.createElement(
        "div",
        { style: styles.check },
        import_react46.default.createElement(import_CheckIcon.default, null)
      )
    );
  }, "SwatchesColor");
  var SwatchesColor_default = SwatchesColor;

  // ../boardzilla-core/node_modules/react-color/es/components/swatches/SwatchesGroup.js
  var SwatchesGroup = /* @__PURE__ */ __name(function SwatchesGroup2(_ref) {
    var onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover, group = _ref.group, active = _ref.active;
    var styles = (0, import_reactcss40.default)({
      "default": {
        group: {
          paddingBottom: "10px",
          width: "40px",
          float: "left",
          marginRight: "10px"
        }
      }
    });
    return import_react47.default.createElement(
      "div",
      { style: styles.group },
      map_default(group, function(color, i) {
        return import_react47.default.createElement(SwatchesColor_default, {
          key: color,
          color,
          active: color.toLowerCase() === active,
          first: i === 0,
          last: i === group.length - 1,
          onClick,
          onSwatchHover
        });
      })
    );
  }, "SwatchesGroup");
  var SwatchesGroup_default = SwatchesGroup;

  // ../boardzilla-core/node_modules/react-color/es/components/swatches/Swatches.js
  var Swatches = /* @__PURE__ */ __name(function Swatches2(_ref) {
    var width = _ref.width, height = _ref.height, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors2 = _ref.colors, hex = _ref.hex, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss41.default)(merge_default({
      "default": {
        picker: {
          width,
          height
        },
        overflow: {
          height,
          overflowY: "scroll"
        },
        body: {
          padding: "16px 0 6px 16px"
        },
        clear: {
          clear: "both"
        }
      }
    }, passedStyles));
    var handleChange = /* @__PURE__ */ __name(function handleChange2(data, e) {
      return onChange({ hex: data, source: "hex" }, e);
    }, "handleChange");
    return import_react48.default.createElement(
      "div",
      { style: styles.picker, className: "swatches-picker " + className },
      import_react48.default.createElement(
        Raised_default,
        null,
        import_react48.default.createElement(
          "div",
          { style: styles.overflow },
          import_react48.default.createElement(
            "div",
            { style: styles.body },
            map_default(colors2, function(group) {
              return import_react48.default.createElement(SwatchesGroup_default, {
                key: group.toString(),
                group,
                active: hex,
                onClick: handleChange,
                onSwatchHover
              });
            }),
            import_react48.default.createElement("div", { style: styles.clear })
          )
        )
      )
    );
  }, "Swatches");
  Swatches.propTypes = {
    width: import_prop_types12.default.oneOfType([import_prop_types12.default.string, import_prop_types12.default.number]),
    height: import_prop_types12.default.oneOfType([import_prop_types12.default.string, import_prop_types12.default.number]),
    colors: import_prop_types12.default.arrayOf(import_prop_types12.default.arrayOf(import_prop_types12.default.string)),
    styles: import_prop_types12.default.object
    /* eslint-disable max-len */
  };
  Swatches.defaultProps = {
    width: 320,
    height: 240,
    colors: [[red["900"], red["700"], red["500"], red["300"], red["100"]], [pink["900"], pink["700"], pink["500"], pink["300"], pink["100"]], [purple["900"], purple["700"], purple["500"], purple["300"], purple["100"]], [deepPurple["900"], deepPurple["700"], deepPurple["500"], deepPurple["300"], deepPurple["100"]], [indigo["900"], indigo["700"], indigo["500"], indigo["300"], indigo["100"]], [blue["900"], blue["700"], blue["500"], blue["300"], blue["100"]], [lightBlue["900"], lightBlue["700"], lightBlue["500"], lightBlue["300"], lightBlue["100"]], [cyan["900"], cyan["700"], cyan["500"], cyan["300"], cyan["100"]], [teal["900"], teal["700"], teal["500"], teal["300"], teal["100"]], ["#194D33", green["700"], green["500"], green["300"], green["100"]], [lightGreen["900"], lightGreen["700"], lightGreen["500"], lightGreen["300"], lightGreen["100"]], [lime["900"], lime["700"], lime["500"], lime["300"], lime["100"]], [yellow["900"], yellow["700"], yellow["500"], yellow["300"], yellow["100"]], [amber["900"], amber["700"], amber["500"], amber["300"], amber["100"]], [orange["900"], orange["700"], orange["500"], orange["300"], orange["100"]], [deepOrange["900"], deepOrange["700"], deepOrange["500"], deepOrange["300"], deepOrange["100"]], [brown["900"], brown["700"], brown["500"], brown["300"], brown["100"]], [blueGrey["900"], blueGrey["700"], blueGrey["500"], blueGrey["300"], blueGrey["100"]], ["#000000", "#525252", "#969696", "#D9D9D9", "#FFFFFF"]],
    styles: {}
  };
  var Swatches_default = ColorWrap_default(Swatches);

  // ../boardzilla-core/node_modules/react-color/es/components/twitter/Twitter.js
  var import_react49 = __toESM(require_react());
  var import_prop_types13 = __toESM(require_prop_types());
  var import_reactcss42 = __toESM(require_lib());
  var Twitter = /* @__PURE__ */ __name(function Twitter2(_ref) {
    var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, hex = _ref.hex, colors2 = _ref.colors, width = _ref.width, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss42.default)(merge_default({
      "default": {
        card: {
          width,
          background: "#fff",
          border: "0 solid rgba(0,0,0,0.25)",
          boxShadow: "0 1px 4px rgba(0,0,0,0.25)",
          borderRadius: "4px",
          position: "relative"
        },
        body: {
          padding: "15px 9px 9px 15px"
        },
        label: {
          fontSize: "18px",
          color: "#fff"
        },
        triangle: {
          width: "0px",
          height: "0px",
          borderStyle: "solid",
          borderWidth: "0 9px 10px 9px",
          borderColor: "transparent transparent #fff transparent",
          position: "absolute"
        },
        triangleShadow: {
          width: "0px",
          height: "0px",
          borderStyle: "solid",
          borderWidth: "0 9px 10px 9px",
          borderColor: "transparent transparent rgba(0,0,0,.1) transparent",
          position: "absolute"
        },
        hash: {
          background: "#F0F0F0",
          height: "30px",
          width: "30px",
          borderRadius: "4px 0 0 4px",
          float: "left",
          color: "#98A1A4",
          display: "flex",
          alignItems: "center",
          justifyContent: "center"
        },
        input: {
          width: "100px",
          fontSize: "14px",
          color: "#666",
          border: "0px",
          outline: "none",
          height: "28px",
          boxShadow: "inset 0 0 0 1px #F0F0F0",
          boxSizing: "content-box",
          borderRadius: "0 4px 4px 0",
          float: "left",
          paddingLeft: "8px"
        },
        swatch: {
          width: "30px",
          height: "30px",
          float: "left",
          borderRadius: "4px",
          margin: "0 6px 6px 0"
        },
        clear: {
          clear: "both"
        }
      },
      "hide-triangle": {
        triangle: {
          display: "none"
        },
        triangleShadow: {
          display: "none"
        }
      },
      "top-left-triangle": {
        triangle: {
          top: "-10px",
          left: "12px"
        },
        triangleShadow: {
          top: "-11px",
          left: "12px"
        }
      },
      "top-right-triangle": {
        triangle: {
          top: "-10px",
          right: "12px"
        },
        triangleShadow: {
          top: "-11px",
          right: "12px"
        }
      }
    }, passedStyles), {
      "hide-triangle": triangle === "hide",
      "top-left-triangle": triangle === "top-left",
      "top-right-triangle": triangle === "top-right"
    });
    var handleChange = /* @__PURE__ */ __name(function handleChange2(hexcode, e) {
      isValidHex(hexcode) && onChange({
        hex: hexcode,
        source: "hex"
      }, e);
    }, "handleChange");
    return import_react49.default.createElement(
      "div",
      { style: styles.card, className: "twitter-picker " + className },
      import_react49.default.createElement("div", { style: styles.triangleShadow }),
      import_react49.default.createElement("div", { style: styles.triangle }),
      import_react49.default.createElement(
        "div",
        { style: styles.body },
        map_default(colors2, function(c, i) {
          return import_react49.default.createElement(Swatch_default, {
            key: i,
            color: c,
            hex: c,
            style: styles.swatch,
            onClick: handleChange,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: "0 0 4px " + c
            }
          });
        }),
        import_react49.default.createElement(
          "div",
          { style: styles.hash },
          "#"
        ),
        import_react49.default.createElement(EditableInput_default, {
          label: null,
          style: { input: styles.input },
          value: hex.replace("#", ""),
          onChange: handleChange
        }),
        import_react49.default.createElement("div", { style: styles.clear })
      )
    );
  }, "Twitter");
  Twitter.propTypes = {
    width: import_prop_types13.default.oneOfType([import_prop_types13.default.string, import_prop_types13.default.number]),
    triangle: import_prop_types13.default.oneOf(["hide", "top-left", "top-right"]),
    colors: import_prop_types13.default.arrayOf(import_prop_types13.default.string),
    styles: import_prop_types13.default.object
  };
  Twitter.defaultProps = {
    width: 276,
    colors: ["#FF6900", "#FCB900", "#7BDCB5", "#00D084", "#8ED1FC", "#0693E3", "#ABB8C3", "#EB144C", "#F78DA7", "#9900EF"],
    triangle: "top-left",
    styles: {}
  };
  var Twitter_default = ColorWrap_default(Twitter);

  // ../boardzilla-core/node_modules/react-color/es/components/google/Google.js
  var import_react53 = __toESM(require_react());
  var import_prop_types16 = __toESM(require_prop_types());
  var import_reactcss46 = __toESM(require_lib());

  // ../boardzilla-core/node_modules/react-color/es/components/google/GooglePointerCircle.js
  var import_react50 = __toESM(require_react());
  var import_reactcss43 = __toESM(require_lib());
  var import_prop_types14 = __toESM(require_prop_types());
  var GooglePointerCircle = /* @__PURE__ */ __name(function GooglePointerCircle2(props) {
    var styles = (0, import_reactcss43.default)({
      "default": {
        picker: {
          width: "20px",
          height: "20px",
          borderRadius: "22px",
          border: "2px #fff solid",
          transform: "translate(-12px, -13px)",
          background: "hsl(" + Math.round(props.hsl.h) + ", " + Math.round(props.hsl.s * 100) + "%, " + Math.round(props.hsl.l * 100) + "%)"
        }
      }
    });
    return import_react50.default.createElement("div", { style: styles.picker });
  }, "GooglePointerCircle");
  GooglePointerCircle.propTypes = {
    hsl: import_prop_types14.default.shape({
      h: import_prop_types14.default.number,
      s: import_prop_types14.default.number,
      l: import_prop_types14.default.number,
      a: import_prop_types14.default.number
    })
  };
  GooglePointerCircle.defaultProps = {
    hsl: { a: 1, h: 249.94, l: 0.2, s: 0.5 }
  };
  var GooglePointerCircle_default = GooglePointerCircle;

  // ../boardzilla-core/node_modules/react-color/es/components/google/GooglePointer.js
  var import_react51 = __toESM(require_react());
  var import_reactcss44 = __toESM(require_lib());
  var import_prop_types15 = __toESM(require_prop_types());
  var GooglePointer = /* @__PURE__ */ __name(function GooglePointer2(props) {
    var styles = (0, import_reactcss44.default)({
      "default": {
        picker: {
          width: "20px",
          height: "20px",
          borderRadius: "22px",
          transform: "translate(-10px, -7px)",
          background: "hsl(" + Math.round(props.hsl.h) + ", 100%, 50%)",
          border: "2px white solid"
        }
      }
    });
    return import_react51.default.createElement("div", { style: styles.picker });
  }, "GooglePointer");
  GooglePointer.propTypes = {
    hsl: import_prop_types15.default.shape({
      h: import_prop_types15.default.number,
      s: import_prop_types15.default.number,
      l: import_prop_types15.default.number,
      a: import_prop_types15.default.number
    })
  };
  GooglePointer.defaultProps = {
    hsl: { a: 1, h: 249.94, l: 0.2, s: 0.5 }
  };
  var GooglePointer_default = GooglePointer;

  // ../boardzilla-core/node_modules/react-color/es/components/google/GoogleFields.js
  var import_react52 = __toESM(require_react());
  var import_reactcss45 = __toESM(require_lib());
  var GoogleFields = /* @__PURE__ */ __name(function GoogleFields2(_ref) {
    var onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hex = _ref.hex, hsv = _ref.hsv;
    var handleChange = /* @__PURE__ */ __name(function handleChange2(data, e) {
      if (data.hex) {
        isValidHex(data.hex) && onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      } else if (data.rgb) {
        var values = data.rgb.split(",");
        isvalidColorString(data.rgb, "rgb") && onChange({
          r: values[0],
          g: values[1],
          b: values[2],
          a: 1,
          source: "rgb"
        }, e);
      } else if (data.hsv) {
        var _values = data.hsv.split(",");
        if (isvalidColorString(data.hsv, "hsv")) {
          _values[2] = _values[2].replace("%", "");
          _values[1] = _values[1].replace("%", "");
          _values[0] = _values[0].replace("\xB0", "");
          if (_values[1] == 1) {
            _values[1] = 0.01;
          } else if (_values[2] == 1) {
            _values[2] = 0.01;
          }
          onChange({
            h: Number(_values[0]),
            s: Number(_values[1]),
            v: Number(_values[2]),
            source: "hsv"
          }, e);
        }
      } else if (data.hsl) {
        var _values2 = data.hsl.split(",");
        if (isvalidColorString(data.hsl, "hsl")) {
          _values2[2] = _values2[2].replace("%", "");
          _values2[1] = _values2[1].replace("%", "");
          _values2[0] = _values2[0].replace("\xB0", "");
          if (hsvValue[1] == 1) {
            hsvValue[1] = 0.01;
          } else if (hsvValue[2] == 1) {
            hsvValue[2] = 0.01;
          }
          onChange({
            h: Number(_values2[0]),
            s: Number(_values2[1]),
            v: Number(_values2[2]),
            source: "hsl"
          }, e);
        }
      }
    }, "handleChange");
    var styles = (0, import_reactcss45.default)({
      "default": {
        wrap: {
          display: "flex",
          height: "100px",
          marginTop: "4px"
        },
        fields: {
          width: "100%"
        },
        column: {
          paddingTop: "10px",
          display: "flex",
          justifyContent: "space-between"
        },
        double: {
          padding: "0px 4.4px",
          boxSizing: "border-box"
        },
        input: {
          width: "100%",
          height: "38px",
          boxSizing: "border-box",
          padding: "4px 10% 3px",
          textAlign: "center",
          border: "1px solid #dadce0",
          fontSize: "11px",
          textTransform: "lowercase",
          borderRadius: "5px",
          outline: "none",
          fontFamily: "Roboto,Arial,sans-serif"
        },
        input2: {
          height: "38px",
          width: "100%",
          border: "1px solid #dadce0",
          boxSizing: "border-box",
          fontSize: "11px",
          textTransform: "lowercase",
          borderRadius: "5px",
          outline: "none",
          paddingLeft: "10px",
          fontFamily: "Roboto,Arial,sans-serif"
        },
        label: {
          textAlign: "center",
          fontSize: "12px",
          background: "#fff",
          position: "absolute",
          textTransform: "uppercase",
          color: "#3c4043",
          width: "35px",
          top: "-6px",
          left: "0",
          right: "0",
          marginLeft: "auto",
          marginRight: "auto",
          fontFamily: "Roboto,Arial,sans-serif"
        },
        label2: {
          left: "10px",
          textAlign: "center",
          fontSize: "12px",
          background: "#fff",
          position: "absolute",
          textTransform: "uppercase",
          color: "#3c4043",
          width: "32px",
          top: "-6px",
          fontFamily: "Roboto,Arial,sans-serif"
        },
        single: {
          flexGrow: "1",
          margin: "0px 4.4px"
        }
      }
    });
    var rgbValue = rgb.r + ", " + rgb.g + ", " + rgb.b;
    var hslValue = Math.round(hsl.h) + "\xB0, " + Math.round(hsl.s * 100) + "%, " + Math.round(hsl.l * 100) + "%";
    var hsvValue = Math.round(hsv.h) + "\xB0, " + Math.round(hsv.s * 100) + "%, " + Math.round(hsv.v * 100) + "%";
    return import_react52.default.createElement(
      "div",
      { style: styles.wrap, className: "flexbox-fix" },
      import_react52.default.createElement(
        "div",
        { style: styles.fields },
        import_react52.default.createElement(
          "div",
          { style: styles.double },
          import_react52.default.createElement(EditableInput_default, {
            style: { input: styles.input, label: styles.label },
            label: "hex",
            value: hex,
            onChange: handleChange
          })
        ),
        import_react52.default.createElement(
          "div",
          { style: styles.column },
          import_react52.default.createElement(
            "div",
            { style: styles.single },
            import_react52.default.createElement(EditableInput_default, {
              style: { input: styles.input2, label: styles.label2 },
              label: "rgb",
              value: rgbValue,
              onChange: handleChange
            })
          ),
          import_react52.default.createElement(
            "div",
            { style: styles.single },
            import_react52.default.createElement(EditableInput_default, {
              style: { input: styles.input2, label: styles.label2 },
              label: "hsv",
              value: hsvValue,
              onChange: handleChange
            })
          ),
          import_react52.default.createElement(
            "div",
            { style: styles.single },
            import_react52.default.createElement(EditableInput_default, {
              style: { input: styles.input2, label: styles.label2 },
              label: "hsl",
              value: hslValue,
              onChange: handleChange
            })
          )
        )
      )
    );
  }, "GoogleFields");
  var GoogleFields_default = GoogleFields;

  // ../boardzilla-core/node_modules/react-color/es/components/google/Google.js
  var Google = /* @__PURE__ */ __name(function Google2(_ref) {
    var width = _ref.width, onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hsv = _ref.hsv, hex = _ref.hex, header = _ref.header, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
    var styles = (0, import_reactcss46.default)(merge_default({
      "default": {
        picker: {
          width,
          background: "#fff",
          border: "1px solid #dfe1e5",
          boxSizing: "initial",
          display: "flex",
          flexWrap: "wrap",
          borderRadius: "8px 8px 0px 0px"
        },
        head: {
          height: "57px",
          width: "100%",
          paddingTop: "16px",
          paddingBottom: "16px",
          paddingLeft: "16px",
          fontSize: "20px",
          boxSizing: "border-box",
          fontFamily: "Roboto-Regular,HelveticaNeue,Arial,sans-serif"
        },
        saturation: {
          width: "70%",
          padding: "0px",
          position: "relative",
          overflow: "hidden"
        },
        swatch: {
          width: "30%",
          height: "228px",
          padding: "0px",
          background: "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", 1)",
          position: "relative",
          overflow: "hidden"
        },
        body: {
          margin: "auto",
          width: "95%"
        },
        controls: {
          display: "flex",
          boxSizing: "border-box",
          height: "52px",
          paddingTop: "22px"
        },
        color: {
          width: "32px"
        },
        hue: {
          height: "8px",
          position: "relative",
          margin: "0px 16px 0px 16px",
          width: "100%"
        },
        Hue: {
          radius: "2px"
        }
      }
    }, passedStyles));
    return import_react53.default.createElement(
      "div",
      { style: styles.picker, className: "google-picker " + className },
      import_react53.default.createElement(
        "div",
        { style: styles.head },
        header
      ),
      import_react53.default.createElement("div", { style: styles.swatch }),
      import_react53.default.createElement(
        "div",
        { style: styles.saturation },
        import_react53.default.createElement(Saturation_default, {
          hsl,
          hsv,
          pointer: GooglePointerCircle_default,
          onChange
        })
      ),
      import_react53.default.createElement(
        "div",
        { style: styles.body },
        import_react53.default.createElement(
          "div",
          { style: styles.controls, className: "flexbox-fix" },
          import_react53.default.createElement(
            "div",
            { style: styles.hue },
            import_react53.default.createElement(Hue_default, {
              style: styles.Hue,
              hsl,
              radius: "4px",
              pointer: GooglePointer_default,
              onChange
            })
          )
        ),
        import_react53.default.createElement(GoogleFields_default, {
          rgb,
          hsl,
          hex,
          hsv,
          onChange
        })
      )
    );
  }, "Google");
  Google.propTypes = {
    width: import_prop_types16.default.oneOfType([import_prop_types16.default.string, import_prop_types16.default.number]),
    styles: import_prop_types16.default.object,
    header: import_prop_types16.default.string
  };
  Google.defaultProps = {
    width: 652,
    styles: {},
    header: "Color picker"
  };
  var Google_default = ColorWrap_default(Google);

  // ../boardzilla-core/ui/setup/components/Seating.tsx
  var colors = ["#ff0000", "#0000cc", "#006000", "#006b6b", "#aa8500", "#200080", "#4b0082", "#800080", "#600020", "#603000"];
  var Seating = /* @__PURE__ */ __name(({ users, players, minPlayers: minPlayers2, maxPlayers: maxPlayers2, onUpdatePlayers }) => {
    const [pickingColor, setPickingColor] = (0, import_react54.useState)();
    const seatPlayer = /* @__PURE__ */ __name((position, userID2) => {
      const user = users.find((u) => u.id === userID2);
      const unseats = players.filter((p) => p.userID === userID2 && p.position !== position || p.userID !== userID2 && p.position === position);
      const usedColors = players.filter((p) => p.userID !== userID2 && p.position !== position).map((p) => p.color);
      const color = colors.find((c) => !usedColors.includes(c));
      const operations = unseats.map((u) => ({ type: "unseat", position: u.position }));
      if (user)
        operations.push({
          type: "seat",
          position,
          userID: userID2,
          color,
          name: user.name,
          settings: {}
        });
      onUpdatePlayers(operations);
    }, "seatPlayer");
    const updateColor = /* @__PURE__ */ __name((position, color) => {
      setPickingColor(void 0);
      const operation = {
        type: "update",
        position,
        color
      };
      onUpdatePlayers([operation]);
    }, "updateColor");
    const playerAt = /* @__PURE__ */ __name((position) => players.find((p) => p.position === position), "playerAt");
    return /* @__PURE__ */ import_react54.default.createElement("div", null, times(maxPlayers2, (p) => {
      const player = playerAt(p);
      return /* @__PURE__ */ import_react54.default.createElement("div", { key: p }, "Seat ", p, ":", /* @__PURE__ */ import_react54.default.createElement("select", { value: player?.userID || "", onChange: (e) => seatPlayer(p, e.target.value) }, /* @__PURE__ */ import_react54.default.createElement("option", { key: "", value: "" }, "[empty]"), users.filter((u) => player?.userID === u.id || !players.find((player2) => player2.userID === u.id)).map((u) => /* @__PURE__ */ import_react54.default.createElement("option", { key: u.id, value: u.id }, u.name))), player && /* @__PURE__ */ import_react54.default.createElement(import_react54.default.Fragment, null, /* @__PURE__ */ import_react54.default.createElement(
        "div",
        {
          style: { display: "inline-block", width: "12px", height: "12px", border: "1px solid #666", backgroundColor: player.color },
          onClick: () => setPickingColor((picking) => picking === p ? void 0 : p)
        }
      ), pickingColor === p && /* @__PURE__ */ import_react54.default.createElement(
        Github_default,
        {
          color: player.color,
          colors: colors.filter((c) => c === player.color || !players.map((p2) => p2.color).includes(c)),
          onChange: (c) => updateColor(p, c.hex)
        }
      )));
    }));
  }, "Seating");
  var Seating_default = Seating;

  // ../boardzilla-core/ui/setup/Setup.tsx
  var Setup_default = /* @__PURE__ */ __name(({ users, players, minPlayers: minPlayers2, maxPlayers: maxPlayers2, settings, onUpdatePlayers, onUpdateSettings, onStart }) => {
    const [game] = gameStore((s) => [s.game]);
    const updateSettingsKey = /* @__PURE__ */ __name((key, value) => {
      const newSettings = Object.assign(settings || {}, { [key]: value });
      console.log("postMessage", newSettings);
      onUpdateSettings(newSettings);
    }, "updateSettingsKey");
    const settingsComponents = game.setupComponents ? Object.entries(game.setupComponents).map(([name, component]) => import_react55.default.createElement(
      component,
      {
        name,
        key: name,
        settings: settings || {},
        players,
        updateKey: updateSettingsKey
      }
    )) : null;
    return /* @__PURE__ */ import_react55.default.createElement(import_react55.default.Fragment, null, /* @__PURE__ */ import_react55.default.createElement(
      Seating_default,
      {
        users,
        players,
        minPlayers: minPlayers2,
        maxPlayers: maxPlayers2,
        onUpdatePlayers
      }
    ), settingsComponents, /* @__PURE__ */ import_react55.default.createElement("input", { type: "button", disabled: (players?.length || 0) < minPlayers2, value: "Start", onClick: onStart }));
  }, "default");

  // ../boardzilla-core/ui/Main.tsx
  var Main_default = /* @__PURE__ */ __name(({ userID: userID2, minPlayers: minPlayers2, maxPlayers: maxPlayers2 }) => {
    const [game, move, selectMove, pendingMoves, position, updateBoard, updateState] = gameStore((s) => [s.game, s.move, s.selectMove, s.pendingMoves, s.position, s.updateBoard, s.updateState]);
    const [players, setPlayers] = (0, import_react56.useState)([]);
    const [settings, setSettings] = (0, import_react56.useState)();
    const [users, setUsers] = (0, import_react56.useState)([]);
    const [readySent, setReadySent] = (0, import_react56.useState)(false);
    const [error, setError] = (0, import_react56.useState)();
    const moves = (0, import_react56.useMemo)(() => [], []);
    const listener = (0, import_react56.useCallback)((event) => {
      const data = event.data;
      console.log("message", data);
      switch (data.type) {
        case "settingsUpdate":
          setSettings(data.settings);
          break;
        case "players":
          setPlayers(data.players);
          setUsers(data.users);
          break;
        case "gameUpdate":
        case "gameFinished":
          updateState(data);
          break;
        case "messageProcessed":
          if (data.error)
            catchError(data.error);
          const move2 = moves[parseInt(data.id)];
          if (move2 && data.error)
            move2(data.error);
          delete moves[parseInt(data.id)];
          break;
      }
    }, []);
    (0, import_react56.useEffect)(() => {
      window.addEventListener("message", listener, false);
      const message = { type: "ready" };
      if (!readySent) {
        window.top.postMessage(message, "*");
        setReadySent(true);
      }
      return () => window.removeEventListener("message", listener);
    }, [listener]);
    (0, import_react56.useEffect)(() => {
      if (position && (pendingMoves?.length === 0 || pendingMoves?.length === 1 && pendingMoves[0].selection.skipIfOnlyOne)) {
        if (pendingMoves.length === 1) {
          const arg = pendingMoves[0].selection.isForced();
          if (arg === void 0)
            return;
          if (move) {
            return selectMove(pendingMoves[0], arg);
          } else {
            return selectMove(pendingMoves[0]);
          }
        }
        if (!move)
          return;
        const player = game.players.atPosition(position);
        if (!player)
          return;
        const serializedMove = {
          action: move.action,
          args: move.args.map((a) => serializeArg(a))
        };
        const error2 = game.processMove({ player, ...move });
        game.play();
        selectMove();
        if (error2) {
          console.error(error2);
          setError(error2);
        } else {
          console.log("success, submitting to server", move);
          moves.push((error3) => console.error(`move ${move} failed: ${error3}`));
          const message = {
            type: "move",
            id: String(moves.length),
            data: serializedMove
          };
          window.top.postMessage(message, "*");
        }
        ;
        updateBoard();
      }
    }, [game, position, move, pendingMoves]);
    const updateSettings = (0, import_react56.useCallback)((settings2) => {
      setSettings(settings2);
      const message = { type: "updateSettings", id: "settings", settings: settings2 };
      window.top.postMessage(message, "*");
    }, []);
    const updatePlayers = (0, import_react56.useCallback)((operations) => {
      const message = {
        type: "updatePlayers",
        id: "updatePlayers",
        operations
      };
      window.top.postMessage(message, "*");
    }, []);
    const start = (0, import_react56.useCallback)(() => {
      const message = { type: "start", id: "start" };
      window.top.postMessage(message, "*");
    }, []);
    const catchError = (0, import_react56.useCallback)((error2) => {
      if (!error2)
        return;
      alert(error2);
      setError(error2);
    }, []);
    console.log("render MAIN", game.phase);
    return /* @__PURE__ */ import_react56.default.createElement(import_react56.default.Fragment, null, game.phase === "new" && /* @__PURE__ */ import_react56.default.createElement(
      Setup_default,
      {
        users,
        minPlayers: minPlayers2,
        maxPlayers: maxPlayers2,
        players,
        settings,
        onUpdatePlayers: updatePlayers,
        onUpdateSettings: updateSettings,
        onStart: start
      }
    ), game.phase !== "new" && /* @__PURE__ */ import_react56.default.createElement(Game_default, null), error && /* @__PURE__ */ import_react56.default.createElement("div", { className: "error" }, error));
  }, "default");

  // ../boardzilla-core/ui/index.tsx
  var boostrap = JSON.parse(document.body.getAttribute("data-bootstrap-json") || "{}");
  var userID = boostrap.userID;
  var minPlayers = boostrap.minPlayers;
  var maxPlayers = boostrap.maxPlayers;
  var gameStore = createWithEqualityFn()((set) => ({
    setSetup: (setup) => set({ setup }),
    game: new Game(),
    setGame: (game) => set({ game }),
    boardJSON: [],
    updateState: (update) => set((s) => {
      let game = s.game;
      if (game.phase === "new" && s.setup) {
        game = s.setup(update.state.state, { start: true });
        window.game = game;
        window.board = game.board;
        for (const className of game.board._ctx.classRegistry)
          window[className.name] = className;
      } else {
        game.setState(update.state.state);
      }
      if (update.type === "gameUpdate")
        game.players.currentPosition = update.currentPlayers.length === 1 ? update.currentPlayers[0] : void 0;
      if (update.type === "gameFinished") {
        game.winner = update.winners.map((p) => game.players.atPosition(p));
        game.phase = "finished";
      }
      game.board.applyLayouts();
      const position = s.position || update.state.position;
      if (game.phase === "finished") {
        return {
          game,
          position,
          boardJSON: update.state.state.board
        };
      }
      return {
        game,
        position,
        boardJSON: update.state.state.board,
        ...updateSelections(game, position)
      };
    }),
    // function to ensure react detects a change. must be called immediately after any function that alters board state
    updateBoard: (boardJSON) => set((s) => {
      if (!s.position)
        return {};
      s.game.contextualizeBoardToPlayer(s.game.players.atPosition(s.position));
      s.game.board.applyLayouts();
      return {
        boardJSON: boardJSON || s.game.board.allJSON()
      };
    }),
    selectMove: (pendingMove, ...args) => set((s) => {
      const move = pendingMove ? {
        action: pendingMove.action,
        args: args ? [...pendingMove.args, ...args] : pendingMove.args
      } : void 0;
      return updateSelections(s.game, s.position, move);
    }),
    setPosition: (position) => set({ position }),
    actions: [],
    boardSelections: {},
    pendingMoves: [],
    selected: [],
    setSelected: (sel) => set({ selected: [...new Set(sel)] }),
    setAspectRatio: (aspectRatio) => set((s) => {
      const breakpoint = s.game.board.getBreakpoint(aspectRatio);
      if (breakpoint !== s.game.board._ui.breakpoint) {
        s.game.board.setBreakpoint(breakpoint);
        s.updateBoard();
      }
      return {};
    }),
    setDragElement: (dragElement) => set((s) => {
      if (!dragElement)
        return { dragElement: void 0, dropElements: [] };
      const moves = s.boardSelections[dragElement].dragMoves;
      let dropElements = [];
      if (moves)
        for (let { move, drag } of moves) {
          if (typeof drag === "function")
            drag = drag(...s.move?.args || [], s.game.board.atBranch(dragElement));
          if (drag) {
            if (typeof drag === "string")
              throw Error("unsupported");
            if (!(drag instanceof Array))
              drag = [drag];
            dropElements = dropElements.concat(drag.map((e) => ({ element: e.branch(), move })));
          }
        }
      return { dragElement, dropElements };
    }),
    dropElements: [],
    setCurrentDrop: (currentDrop) => set({ currentDrop })
  }), shallow$1);
  var updateSelections = /* @__PURE__ */ __name((game, position, move) => {
    const player = game.players.atPosition(position);
    if (!player)
      return {};
    let resolvedSelections = game.getResolvedSelections(player, move?.action, ...move?.args || []);
    if (move && !resolvedSelections?.moves) {
      console.log("move may no longer be valid. retrying getResolvedSelections", move, resolvedSelections);
      move = void 0;
      resolvedSelections = game.getResolvedSelections(player);
    }
    const boardSelections = {};
    if (resolvedSelections) {
      resolvedSelections.moves = resolvedSelections.moves.filter((m) => !move || m.action === move.action);
      for (const p of resolvedSelections.moves) {
        if (p.selection.boardChoices) {
          for (const el of p.selection.boardChoices) {
            boardSelections[el.branch()] ??= { clickMoves: [], dragMoves: [] };
            boardSelections[el.branch()].clickMoves.push(p);
          }
          if (p.selection.clientContext?.dragInto) {
            for (const el of p.selection.boardChoices) {
              boardSelections[el.branch()] ??= { clickMoves: [], dragMoves: [] };
              boardSelections[el.branch()].dragMoves.push({ move: p, drag: p.selection.clientContext?.dragInto });
            }
          }
          if (p.selection.clientContext?.dragFrom) {
            const dragFrom = typeof p.selection.clientContext?.dragFrom === "function" ? p.selection.clientContext?.dragFrom(...move?.args || []) : p.selection.clientContext?.dragFrom;
            for (const el of dragFrom instanceof Array ? dragFrom : [dragFrom]) {
              boardSelections[el.branch()] ??= { clickMoves: [], dragMoves: [] };
              boardSelections[el.branch()].dragMoves.push({ move: p, drag: p.selection.boardChoices });
            }
          }
        }
      }
    }
    return {
      move,
      step: resolvedSelections?.step,
      prompt: resolvedSelections?.prompt,
      boardSelections,
      pendingMoves: resolvedSelections?.moves
    };
  }, "updateSelections");
  var ui_default = /* @__PURE__ */ __name((setup) => {
    const state = gameStore.getState();
    state.setSetup(setup);
    state.setGame(setup());
    const root2 = (0, import_client.createRoot)(document.getElementById("root"));
    root2.render(
      /* @__PURE__ */ import_react57.default.createElement(
        Main_default,
        {
          userID,
          minPlayers,
          maxPlayers
        }
      )
    );
  }, "default");

  // src/game/index.tsx
  var import_react64 = __toESM(require_react2());

  // src/ui/components/elektro-svg.tsx
  var import_react58 = __toESM(require_react2());
  var elektro_svg_default = /* @__PURE__ */ __name(({ amount }) => /* @__PURE__ */ import_react58.default.createElement(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "100",
      height: "100.1",
      x: "0",
      y: "0",
      className: "elektro",
      version: "1.1",
      viewBox: "0 0 100 100.1",
      xmlSpace: "preserve"
    },
    /* @__PURE__ */ import_react58.default.createElement("defs", null, /* @__PURE__ */ import_react58.default.createElement("path", { id: "rect1", d: "M145.075 80.331H336.71V268.461H145.075z" })),
    /* @__PURE__ */ import_react58.default.createElement("g", { fillOpacity: "1", transform: "translate(-40.605)" }, /* @__PURE__ */ import_react58.default.createElement("g", { fill: "#25275e", transform: "translate(40.605)" }, /* @__PURE__ */ import_react58.default.createElement(
      "path",
      {
        fill: "#25275e",
        fillOpacity: "1",
        d: "M98.3 63c.1-.5.2-.9.3-1.4.1-.3.1-.6.2-.8l.3-1.2c.1-.4.1-.7.2-1.1.1-.4.1-.7.2-1.1.1-.5.1-.9.2-1.4 0-.3.1-.6.1-.8.2-1.6.2-3.3.2-5 0-1.7-.1-3.4-.2-5 0-.3-.1-.6-.1-.8-.1-.5-.1-1-.2-1.4-.1-.4-.1-.7-.2-1.1-.1-.4-.1-.7-.2-1.1l-.3-1.2c-.1-.3-.1-.6-.2-.8-.1-.5-.2-.9-.3-1.4 0-.1-.1-.2-.1-.3-1.8-6.4-4.8-12.4-8.8-17.5l-.1-.1c-2.5-3.2-5.3-6-8.5-8.5l-.1-.1c-5.1-4-11-7-17.5-8.8-.1 0-.2-.1-.3-.1-.5-.1-.9-.2-1.4-.3-.3-.1-.6-.1-.8-.2l-1.2-.3c-.4-.1-.7-.1-1.1-.2-.4-.1-.7-.1-1.1-.2-.5-.1-.9-.1-1.4-.2-.3 0-.6-.1-.8-.1C53.4.1 51.7 0 50 0c-1.7 0-3.4.1-5 .2-.3 0-.6.1-.8.1-.5.1-1 .1-1.4.2-.4.1-.7.1-1.1.2-.4.1-.7.1-1.1.2l-1.2.3c-.3.1-.6.1-.8.2-.6.1-1.1.2-1.6.3-.1 0-.2.1-.3.1-2.5.7-4.9 1.6-7.3 2.6-3.7 1.7-7.1 3.7-10.2 6.2l-.1.1c-3.2 2.5-6 5.3-8.5 8.5l-.1.1c-.4.5-.8 1-1.2 1.6-3.4 4.8-6 10.1-7.6 15.9 0 .1-.1.2-.1.3-.1.5-.2.9-.3 1.4-.1.3-.1.6-.2.8l-.3 1.2c-.1.4-.1.7-.2 1.1-.1.4-.1.7-.2 1.1-.1.5-.1.9-.2 1.4 0 .3-.1.6-.1.8 0 1.7-.1 3.4-.1 5.1 0 1.7.1 3.4.2 5 0 .3.1.6.1.8.1.5.1 1 .2 1.4.1.4.1.7.2 1.1.1.4.1.7.2 1.1l.3 1.2c.1.3.1.6.2.8.1.6.2 1.1.3 1.6 0 .1.1.2.1.3.7 2.5 1.6 4.9 2.6 7.3 1.7 3.7 3.7 7.1 6.2 10.2l.1.1c2.5 3.2 5.3 6 8.5 8.5l.1.1c3.1 2.5 6.6 4.5 10.2 6.2 2.3 1.1 4.8 1.9 7.3 2.6.1 0 .2.1.3.1.5.1.9.2 1.4.3.3.1.6.1.8.2l1.2.3c.4.1.7.1 1.1.2.4.1.7.1 1.1.2.5.1.9.1 1.4.2.3 0 .6.1.8.1 1.6.2 3.3.2 5 .2 1.7 0 3.4-.1 5-.2.3 0 .6-.1.8-.1.5-.1 1-.1 1.4-.2.4-.1.7-.1 1.1-.2.4-.1.7-.1 1.1-.2l1.2-.3c.3-.1.6-.1.8-.2.5-.1.9-.2 1.4-.3.1 0 .2-.1.3-.1 6.5-1.8 12.4-4.8 17.5-8.8l.1-.1c3.2-2.5 6-5.3 8.5-8.5l.1-.1c2.5-3.1 4.5-6.6 6.2-10.2 1.1-2.3 1.9-4.8 2.6-7.3.2-.1.3-.2.3-.3zm.7-13c0 1.7-.1 3.4-.3 5h-9.1c.2-1.6.3-3.3.3-5 0-1.7-.1-3.4-.3-5h9.1c.2 1.6.3 3.3.3 5zM65.5 86.9c3.1-1.3 6-3 8.7-5l4.5 7.8c-2.7 2-5.6 3.6-8.7 5zM50 89c-21.5 0-39-17.5-39-39s17.5-39 39-39 39 17.5 39 39-17.5 39-39 39zM70 5.3c3.1 1.4 6 3.1 8.7 5l-4.5 7.8c-2.6-2-5.6-3.7-8.7-5zm19.7 16c2 2.7 3.6 5.6 5 8.7l-7.8 4.5c-1.3-3.1-3-6-5-8.7zM50 1c1.7 0 3.4.1 5 .3v9.1c-1.6-.2-3.3-.3-5-.3-1.7 0-3.4.1-5 .3V1.3c1.6-.2 3.3-.3 5-.3zM34.5 13.1c-3.1 1.3-6 3-8.7 5l-4.5-7.8c2.7-2 5.6-3.6 8.7-5zM18.1 25.8c-2 2.6-3.7 5.5-5 8.7L5.3 30c1.4-3.1 3.1-6 5-8.7zM1 50c0-1.7.1-3.4.3-5h9.1c-.2 1.6-.3 3.3-.3 5 0 1.7.1 3.4.3 5H1.3c-.2-1.6-.3-3.3-.3-5zm12.1 15.5c1.3 3.1 3 6 5 8.7l-7.8 4.5c-2-2.7-3.6-5.6-5-8.7zm8.2 24.2l4.5-7.8c2.6 2 5.6 3.7 8.7 5L30 94.7c-3.1-1.4-6-3.1-8.7-5zM50 99c-1.7 0-3.4-.1-5-.3v-9.1c1.6.2 3.3.3 5 .3 1.7 0 3.4-.1 5-.3v9.1c-1.6.2-3.3.3-5 .3zm39.7-20.3l-7.8-4.5c2-2.6 3.7-5.6 5-8.7l7.8 4.5c-1.4 3.1-3.1 6-5 8.7z"
      }
    )), /* @__PURE__ */ import_react58.default.createElement("g", { transform: "matrix(.97512 0 0 .97512 41.7 -.007)" }, /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "15.067",
        cy: "51.034",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "28.515",
        cy: "33.04",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(18)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "35.744",
        cy: "11.771",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(36)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "36.047",
        cy: "-10.69",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(54)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "29.394",
        cy: "-32.146",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(72)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "16.249",
        cy: "-50.454",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(90)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-1.723",
        cy: "-63.846",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(108)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-22.953",
        cy: "-71.029",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(126)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-45.364",
        cy: "-71.299",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(144)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-66.762",
        cy: "-64.631",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(162)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-85.239",
        cy: "-51.636",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "scale(-1)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-98.609",
        cy: "-33.608",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(-162)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-105.753",
        cy: "-12.331",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(-144)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-105.973",
        cy: "10.112",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(-126)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-99.247",
        cy: "31.524",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(-108)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-86.421",
        cy: "49.852",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(-90)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-68.371",
        cy: "63.278",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(-72)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-47.056",
        cy: "70.469",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(-54)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-24.562",
        cy: "70.721",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(-36)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "circle",
      {
        cx: "-3.091",
        cy: "64.01",
        r: "2.862",
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeDasharray: "none",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        transform: "rotate(-18)"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "path",
      {
        fill: "none",
        fillRule: "evenodd",
        stroke: "#25275e",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "2.217",
        d: "M79.722 51.354a29.559 29.559 0 01-29.559 29.558 29.559 29.559 0 01-29.558-29.558 29.559 29.559 0 0129.558-29.56 29.559 29.559 0 0129.559 29.56z"
      }
    ), /* @__PURE__ */ import_react58.default.createElement(
      "text",
      {
        x: "24.32",
        y: "0",
        textAnchor: "middle",
        fill: "#000",
        stroke: "none",
        strokeWidth: "10.56",
        display: "inline",
        fontFamily: "Din Condensed Web",
        fontSize: "58.083",
        fontStretch: "condensed",
        fontWeight: "bold",
        transform: "matrix(.38041 0 0 .38504 -41.963 -5.243)",
        xmlSpace: "preserve"
      },
      /* @__PURE__ */ import_react58.default.createElement("tspan", { x: "242", y: "195.032" }, /* @__PURE__ */ import_react58.default.createElement("tspan", { fontSize: "134.956" }, amount))
    )))
  ), "default");

  // src/ui/components/lightning-svg.tsx
  var import_react59 = __toESM(require_react2());
  var lightning_svg_default = /* @__PURE__ */ __name(({ amount }) => /* @__PURE__ */ import_react59.default.createElement(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "539.335",
      height: "684.46",
      className: "lightning",
      version: "1.1",
      viewBox: "0 0 142.699 181.097"
    },
    /* @__PURE__ */ import_react59.default.createElement("defs", null, /* @__PURE__ */ import_react59.default.createElement("path", { id: "rect1", d: "M145.075 80.331H336.71V268.461H145.075z" })),
    /* @__PURE__ */ import_react59.default.createElement("g", { fillOpacity: "1", transform: "translate(-37.764 -54.286)" }, /* @__PURE__ */ import_react59.default.createElement(
      "path",
      {
        fill: "#f1ff20",
        stroke: "#000",
        strokeDasharray: "none",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeOpacity: "1",
        strokeWidth: "5.08",
        d: "M62.21 70.893l-21.906 36.983 21.225-5.59-11.366 41.934 20.771-6.662-11.984 37.931 36.777-9.364-17.65 43.503 18.607-7.75-6.946 17.757 16.564-5.506-6.351 18.714 49.715-48.925-32.237 8.73 52.801-72.726-25.639 8.313 27.454-46.327-15.284 3.527 21.163-28.61z"
      }
    ), /* @__PURE__ */ import_react59.default.createElement(
      "text",
      {
        x: "24.32",
        y: "0",
        fill: "#000",
        textAnchor: "middle",
        stroke: "none",
        strokeWidth: "10.56",
        display: "inline",
        fontFamily: "Din Condensed Web",
        fontSize: "58.083",
        fontStretch: "condensed",
        fontWeight: "bold",
        transform: "matrix(.68696 0 0 .69532 -61.273 15.655)",
        xmlSpace: "preserve",
        style: {
          textAlign: "center",
          whiteSpace: "pre"
        }
      },
      /* @__PURE__ */ import_react59.default.createElement("tspan", { x: "242", y: "195.032" }, /* @__PURE__ */ import_react59.default.createElement("tspan", { fontSize: "134.956" }, amount))
    ))
  ), "default");

  // src/ui/assets/gavel.svg
  var gavel_default = "./assets/gavel-GPRUFX2F.svg";

  // src/ui/assets/germany2.svg
  var germany2_default = "./assets/germany2-PYIVH6AU.svg";

  // src/ui/components/city-svg.tsx
  var import_react60 = __toESM(require_react2());
  var city_svg_default = /* @__PURE__ */ __name(({ name }) => /* @__PURE__ */ import_react60.default.createElement(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "100%",
      height: "100%",
      x: "0",
      y: "0",
      version: "1.1",
      viewBox: "0 0 737.302 682.142",
      xmlSpace: "preserve"
    },
    /* @__PURE__ */ import_react60.default.createElement("defs", null, /* @__PURE__ */ import_react60.default.createElement("path", { d: "M-32.542 689.898H640V820.067H-32.542z" }), /* @__PURE__ */ import_react60.default.createElement("clipPath", { id: "clipPath40", clipPathUnits: "userSpaceOnUse" }, /* @__PURE__ */ import_react60.default.createElement(
      "circle",
      {
        cx: "251.746",
        cy: "208.356",
        r: "304.065",
        fill: "#000",
        fillOpacity: "1",
        stroke: "none",
        strokeDasharray: "none",
        strokeOpacity: "1",
        strokeWidth: "16.32"
      }
    ))),
    /* @__PURE__ */ import_react60.default.createElement(
      "circle",
      {
        cx: "358.725",
        cy: "312.244",
        r: "304.065",
        fill: "white",
        stroke: "#000",
        strokeDasharray: "none",
        strokeOpacity: "1",
        strokeWidth: "16.358"
      }
    ),
    /* @__PURE__ */ import_react60.default.createElement("g", { clipPath: "url(#clipPath40)", transform: "translate(106.98 103.888)" }, /* @__PURE__ */ import_react60.default.createElement("g", null, /* @__PURE__ */ import_react60.default.createElement("g", null, /* @__PURE__ */ import_react60.default.createElement("path", { d: "M493.933 92.867h-17.067v-25.6c0-5.12-3.413-8.533-8.533-8.533h-51.2c-5.12 0-8.533 3.413-8.533 8.533v25.6h-17.067c-5.12 0-8.533 3.413-8.533 8.533v136.533h-8.533v-25.6c0-5.12-3.413-8.533-8.533-8.533H357.4v-8.533c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v8.533H331.8c-5.12 0-8.533 3.413-8.533 8.533v25.6h-25.6V67.267c0-5.12-3.413-8.533-8.533-8.533h-25.6v-51.2C263.533 2.413 260.12-1 255-1H152.6c-5.12 0-8.533 3.413-8.533 8.533v51.2h-25.6c-5.12 0-8.533 3.413-8.533 8.533v221.867H92.867v-25.6c0-5.12-3.413-8.533-8.533-8.533h-51.2c-5.12 0-8.533 3.413-8.533 8.533v25.6h-8.533c-5.12 0-8.533 3.413-8.533 8.533v204.8c0 5.12 3.413 8.533 8.533 8.533H493.935c5.12 0 8.533-3.413 8.533-8.533V101.4c-.001-5.12-3.415-8.533-8.535-8.533zM425.667 75.8H459.8v17.067h-34.133zm-85.334 145.067H357.4v17.067h-17.067zM127 75.8h25.6c5.12 0 8.533-3.413 8.533-8.533v-51.2h85.333v51.2c0 5.12 3.413 8.533 8.533 8.533h25.6v162.133h-17.067V101.4c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v136.533H229.4V101.4c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v136.533h-17.067V101.4c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.534 3.413-8.534 8.533v187.734h-17.067V101.4c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v187.733H127zM41.667 272.067H75.8v17.067H41.667zM24.6 306.2H178.2v17.067h-59.733c-5.12 0-8.533 3.413-8.533 8.533v162.133H24.6zM127 340.333h51.2V357.4h-25.6c-5.12 0-8.533 3.413-8.533 8.533 0 5.12 3.413 8.533 8.533 8.533h25.6v17.067h-25.6c-5.12 0-8.533 3.413-8.533 8.533 0 5.12 3.413 8.533 8.533 8.533h25.6v17.067h-25.6c-5.12 0-8.533 3.413-8.533 8.533 0 5.12 3.413 8.533 8.533 8.533h25.6V459.8h-25.6c-5.12 0-8.533 3.413-8.533 8.533 0 5.12 3.413 8.533 8.533 8.533h25.6v17.067H127zm68.267-8.533V255H383v238.933h-17.067V280.6c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v213.333H331.8V280.6c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v213.333h-17.067V280.6c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v213.333h-17.067V280.6c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v213.333H229.4V280.6c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v213.333h-17.067zM485.4 493.933h-85.333v-384H485.4z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M425.667 331.8c-5.12 0-8.533 3.413-8.533 8.533V357.4c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M425.667 383c-5.12 0-8.533 3.413-8.533 8.533V408.6c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M425.667 434.2c-5.12 0-8.533 3.413-8.533 8.533V459.8c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M425.667 280.6c-5.12 0-8.533 3.413-8.533 8.533V306.2c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M425.667 127c-5.12 0-8.533 3.413-8.533 8.533V152.6c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M425.667 178.2c-5.12 0-8.533 3.413-8.533 8.533V203.8c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M425.667 229.4c-5.12 0-8.533 3.413-8.533 8.533V255c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M459.8 331.8c-5.12 0-8.533 3.413-8.533 8.533V357.4c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M459.8 434.2c-5.12 0-8.533 3.413-8.533 8.533V459.8c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M459.8 178.2c-5.12 0-8.533 3.413-8.533 8.533V203.8c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M459.8 127c-5.12 0-8.533 3.413-8.533 8.533V152.6c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M459.8 280.6c-5.12 0-8.533 3.413-8.533 8.533V306.2c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M459.8 383c-5.12 0-8.533 3.413-8.533 8.533V408.6c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M459.8 229.4c-5.12 0-8.533 3.413-8.533 8.533V255c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533v-17.067c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M50.2 425.667c-5.12 0-8.533 3.413-8.533 8.533v17.067c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533V434.2c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M50.2 323.267c-5.12 0-8.533 3.413-8.533 8.533v17.067c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533V331.8c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M50.2 374.467c-5.12 0-8.533 3.413-8.533 8.533v17.067c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533V383c0-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M84.333 374.467c-5.12 0-8.533 3.413-8.533 8.533v17.067c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533V383c.001-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M84.333 425.667c-5.12 0-8.533 3.413-8.533 8.533v17.067c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533V434.2c.001-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M84.333 323.267c-5.12 0-8.533 3.413-8.533 8.533v17.067c0 5.12 3.413 8.533 8.533 8.533 5.12 0 8.533-3.413 8.533-8.533V331.8c.001-5.12-3.413-8.533-8.533-8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M186.733 75.8c5.12 0 8.533-3.413 8.533-8.533v-25.6c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v25.6c0 5.12 3.413 8.533 8.533 8.533z" }), /* @__PURE__ */ import_react60.default.createElement("path", { d: "M220.867 75.8c5.12 0 8.533-3.413 8.533-8.533v-25.6c0-5.12-3.413-8.533-8.533-8.533-5.12 0-8.533 3.413-8.533 8.533v25.6c-.001 5.12 3.413 8.533 8.533 8.533z" })))),
    /* @__PURE__ */ import_react60.default.createElement(
      "path",
      {
        fill: "#fcfcfc",
        fillOpacity: "1",
        stroke: "#000",
        strokeDasharray: "none",
        strokeOpacity: "1",
        strokeWidth: "19.2",
        d: "M9.6 494.644H727.702V672.542H9.6z"
      }
    ),
    /* @__PURE__ */ import_react60.default.createElement(
      "text",
      {
        xmlSpace: "preserve",
        style: {
          fontVariantLigatures: "normal",
          fontVariantCaps: "normal",
          fontVariantNumeric: "normal",
          fontVariantEastAsian: "normal"
        },
        x: "76.242",
        y: "610.659",
        fill: "#000",
        fillOpacity: "1",
        stroke: "none",
        strokeDasharray: "none",
        strokeOpacity: "1",
        strokeWidth: "249.395",
        fontFamily: "Din Condensed Web",
        fontSize: "155.873",
        fontStretch: "condensed",
        fontStyle: "normal",
        fontVariant: "normal",
        fontWeight: "bold",
        transform: "scale(.95786 1.044)",
        textAnchor: "middle"
      },
      /* @__PURE__ */ import_react60.default.createElement("tspan", { x: "385", y: "610.659", strokeWidth: "249.395" }, name)
    )
  ), "default");

  // src/ui/components/building-svg.tsx
  var import_react61 = __toESM(require_react2());
  var building_svg_default = /* @__PURE__ */ __name((building) => /* @__PURE__ */ import_react61.default.createElement(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "100%",
      height: "100%",
      version: "1.1",
      viewBox: "0 0 431.37 326.937",
      className: building.board.firstN(building.player?.cities || 0, Building, { player: building.player }).includes(building) ? "powered" : ""
    },
    /* @__PURE__ */ import_react61.default.createElement(
      "path",
      {
        fill: "#fff",
        fillOpacity: "1",
        stroke: "#000",
        strokeDasharray: "none",
        strokeOpacity: "1",
        strokeWidth: "10.56",
        d: "M6.307 249.454l-1.006-44.98 16.422-45.783 23.35-2.031 2.03-38.163 53.342-15.229-.701-48.172L218.058 5.714l115.994 47.533-.296 51.299 52.702 10.757 2.67 39.44 23.349 1.393 13.246 47.253.339 45.182-208.536 72.78z"
      }
    ),
    /* @__PURE__ */ import_react61.default.createElement(
      "path",
      {
        fill: building.player?.color,
        d: "M116.751 277.589l-98.735-34.174-.946-37.722 11.235-40.255 26.75-1.297 1.309-39.106 54.94-14.18-.058-49.617 105.809-44.795 105.428 44.858.322 49.554 54.94 14.18 1.31 39.106 26.75 1.297 11.25 40.434-1.482 37.91-199.018 66.585zm86.413-93.39l-77.11-1.053.366 39.575 72.885 10.625 3.75.097zm56.64 45.711l3.25-.558v-44.96l-31.5.551-.535 48.5h2.525zm-203.25-20.967l-31-4v14.962l31.556 8.345zm243 15.186l8-1.191.543-39.557-24.542.562-.047 41.238 4.271.717 11.776-1.769zm94.916-1.292l.317-15.891-12.232 1.01-.586 16.773zM110.735 182.72l-18.726-.276.292 34.989 19.254 2.511zm257.07 31.25l-.271-17.78-44.714 4.623-.099 18.964zm44.472 4.652l.278-14.678-11.36 1.545-.14 15.234zM81.102 182.706l-15.201-.509-.346 31.746 16.028 2.054zm-24.547-.763l-26.177-.804-4.573 15.386 30.77 3.29zm337.29 15.86l.189-15.86h-11.48l-.08 17.179zm16.692-.898l-3.784-15.223-5.698.021.654 15.06zm-43.064-11.069l.332-17.882-44.5-1.219-.077 22.337 44.245-3.236zM80.068 137.208l-15.013 2.44v31.88l15.5-.585zm30.566 32.477l-.027-36.86-18.052 2.157-.546 35.461zm92.055-3.113l.366-49.129-77 12.159.736 39.244zm105.137-37.136l-24.011-3.153-.26 41.66 20 1.09 4-.09zm-45.271-7.493l-31.536-4.5.536 48.5 31 1zm105.938 17.5l-44.968-6.627-.474 21.418 46.004 3.21zM202.173 97.87l-.188-47.97-75.93 25.824.677 39.063zm105.923-22.137L284.305 68.7l.273 41.39 23.016 3.657zm-45.041-16.02l-30.956-9.797.706 48.264 30.25 6.263z"
      }
    )
  ), "default");

  // src/ui/assets/coal.svg
  var coal_default = "./assets/coal-W2XYPMMW.svg";

  // src/ui/assets/oil.svg
  var oil_default = "./assets/oil-RTOX7JRE.svg";

  // src/ui/assets/garbage.svg
  var garbage_default = "./assets/garbage-N2YKN4EO.svg";

  // src/ui/assets/uranium.svg
  var uranium_default = "./assets/uranium-RFWEI4N6.svg";

  // src/ui/components/building-outline-svg.tsx
  var import_react62 = __toESM(require_react2());
  var building_outline_svg_default = /* @__PURE__ */ __name(({ number }) => /* @__PURE__ */ import_react62.default.createElement(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "100%",
      height: "100%",
      version: "1.1",
      viewBox: "0 0 431.376 326.937"
    },
    /* @__PURE__ */ import_react62.default.createElement(
      "path",
      {
        fill: "#fff",
        fillOpacity: "1",
        stroke: "#000",
        strokeDasharray: "none",
        strokeOpacity: "1",
        strokeWidth: "10.56",
        d: "M6.307 249.454l-1.006-44.98 16.422-45.783 23.35-2.031 2.03-38.163 53.342-15.229-.701-48.172L218.058 5.714l115.994 47.533-.296 51.299 52.702 10.757 2.67 39.44 23.349 1.393 13.246 47.253.339 45.182-208.536 72.78z"
      }
    ),
    /* @__PURE__ */ import_react62.default.createElement(
      "text",
      {
        x: "24.32",
        y: "0",
        fill: "#000",
        fillOpacity: "1",
        stroke: "none",
        strokeWidth: "10.56",
        display: "inline",
        fontFamily: "Din Condensed Web",
        fontSize: "58.083",
        fontStretch: "condensed",
        fontWeight: "bold",
        transform: "matrix(2 0 0 2 -217.615 -149.722)",
        xmlSpace: "preserve",
        style: {
          textAlign: "center",
          whiteSpace: "pre"
        }
      },
      /* @__PURE__ */ import_react62.default.createElement("tspan", { x: "188.452", y: "214.25" }, /* @__PURE__ */ import_react62.default.createElement("tspan", { display: "inline", fontSize: "160" }, number))
    )
  ), "default");

  // src/ui/assets/coal-outline.svg
  var coal_outline_default = "./assets/coal-outline-ZJOE3CDE.svg";

  // src/ui/assets/oil-outline.svg
  var oil_outline_default = "./assets/oil-outline-WFWSP2JO.svg";

  // src/ui/assets/garbage-outline.svg
  var garbage_outline_default = "./assets/garbage-outline-MVW3VFQD.svg";

  // src/ui/assets/uranium-outline.svg
  var uranium_outline_default = "./assets/uranium-outline-PTIAH4I3.svg";

  // src/ui/assets/hybrid-outline.svg
  var hybrid_outline_default = "./assets/hybrid-outline-YF6RFO75.svg";

  // src/ui/assets/arrow.svg
  var arrow_default = "./assets/arrow-2UMRVL3J.svg";

  // src/ui/assets/powerplant.svg
  var powerplant_default = "./assets/powerplant-L3AYLGYJ.svg";

  // src/ui/components/power-label-svg.tsx
  var import_react63 = __toESM(require_react2());
  var power_label_svg_default = /* @__PURE__ */ __name((cost) => {
    const color = cost >= 10 ? "#fbff89" : "white";
    if (cost === 0)
      return null;
    return /* @__PURE__ */ import_react63.default.createElement(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        version: "1.1",
        viewBox: "0 0 139.729 139.729"
      },
      /* @__PURE__ */ import_react63.default.createElement("defs", null, /* @__PURE__ */ import_react63.default.createElement("path", { id: "rect1", d: "M145.075 80.331H336.71V268.461H145.075z" })),
      /* @__PURE__ */ import_react63.default.createElement("g", { fillOpacity: "1", transform: "translate(-63.678 -67.174)" }, /* @__PURE__ */ import_react63.default.createElement(
        "path",
        {
          fill: color,
          fillRule: "evenodd",
          stroke: "#000",
          strokeLinejoin: "round",
          strokeWidth: "3",
          d: "M188.466 137.064a54.91 54.91 0 01-54.91 54.91 54.91 54.91 0 01-54.91-54.91 54.91 54.91 0 0154.91-54.91 54.91 54.91 0 0154.91 54.91z"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "path",
        {
          fill: color,
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          d: "M78.949 130.176l-13.77 2.797v7.531l13.555 3.443"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "86.067",
          cy: "136.631",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "121.931",
          cy: "88.68",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(18)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "141.222",
          cy: "31.993",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(36)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "142.051",
          cy: "-27.88",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(54)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "124.339",
          cy: "-85.08",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(72)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "path",
        {
          fill: color,
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          d: "M140.405 82.445l-2.797-13.771h-7.53l-3.444 13.555"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "89.563",
          cy: "-133.95",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(90)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "41.641",
          cy: "-169.738",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(108)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-14.994",
          cy: "-188.966",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(126)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-74.799",
          cy: "-189.752",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(144)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-131.919",
          cy: "-172.019",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(162)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "path",
        {
          fill: color,
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          d: "M188.137 143.9l13.77-2.796v-7.531l-13.555-3.443"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-181.019",
          cy: "-137.446",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "scale(-1)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-216.777",
          cy: "-89.449",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(-162)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-235.953",
          cy: "-32.751",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(-144)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-236.67",
          cy: "27.098",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(-126)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-218.858",
          cy: "84.239",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(-108)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "path",
        {
          fill: color,
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          d: "M126.68 191.632l2.798 13.771h7.53l3.443-13.555"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-184.514",
          cy: "133.135",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(-90)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-136.487",
          cy: "168.97",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(-72)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-79.738",
          cy: "188.209",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(-54)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "-19.82",
          cy: "188.97",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(-36)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "circle",
        {
          cx: "37.4",
          cy: "171.178",
          r: "3.873",
          fill: "none",
          fillRule: "evenodd",
          stroke: "#000",
          strokeDasharray: "none",
          strokeLinejoin: "round",
          strokeOpacity: "1",
          strokeWidth: "3",
          transform: "rotate(-18)"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "path",
        {
          fill: "#fff",
          fillRule: "evenodd",
          stroke: "#000",
          strokeLinejoin: "round",
          strokeWidth: "3",
          d: "M173.553 137.064a39.996 39.996 0 01-39.997 39.996 39.996 39.996 0 01-39.996-39.996 39.996 39.996 0 0139.996-39.997 39.996 39.996 0 0139.997 39.997z"
        }
      ), /* @__PURE__ */ import_react63.default.createElement(
        "text",
        {
          x: "24.32",
          y: "0",
          textAnchor: "middle",
          fill: "#000",
          stroke: "none",
          strokeWidth: "10.56",
          display: "inline",
          fontFamily: "Din Condensed Web",
          fontSize: "58.083",
          fontStretch: "condensed",
          fontWeight: "bold",
          transform: "matrix(.51475 0 0 .521 8.898 60.482)",
          xmlSpace: "preserve",
          style: {
            textAlign: "center",
            whiteSpace: "pre"
          }
        },
        /* @__PURE__ */ import_react63.default.createElement("tspan", { x: "240.688", y: "195.032" }, /* @__PURE__ */ import_react63.default.createElement("tspan", { fontSize: "134.956" }, cost))
      ))
    );
  }, "default");

  // src/game/cards.ts
  var cards = {
    "oil-03": {
      cost: 3,
      resourceType: "oil",
      resources: 2,
      power: 1
    },
    "oil-07": {
      cost: 7,
      resourceType: "oil",
      resources: 3,
      power: 2
    },
    "oil-09": {
      cost: 9,
      resourceType: "oil",
      resources: 1,
      power: 1
    },
    "oil-16": {
      cost: 16,
      resourceType: "oil",
      resources: 2,
      power: 3
    },
    "oil-26": {
      cost: 26,
      resourceType: "oil",
      resources: 2,
      power: 5
    },
    "oil-32": {
      cost: 32,
      resourceType: "oil",
      resources: 3,
      power: 6
    },
    "oil-35": {
      cost: 35,
      resourceType: "oil",
      resources: 1,
      power: 5
    },
    "oil-40": {
      cost: 40,
      resourceType: "oil",
      resources: 2,
      power: 6
    },
    "clean-50": {
      cost: 50,
      resourceType: "clean",
      resources: 0,
      power: 6
    },
    "coal-04": {
      cost: 4,
      resourceType: "coal",
      resources: 2,
      power: 1
    },
    "coal-08": {
      cost: 8,
      resourceType: "coal",
      resources: 3,
      power: 2
    },
    "coal-10": {
      cost: 10,
      resourceType: "coal",
      resources: 2,
      power: 2
    },
    "coal-15": {
      cost: 15,
      resourceType: "coal",
      resources: 2,
      power: 3
    },
    "coal-20": {
      cost: 20,
      resourceType: "coal",
      resources: 3,
      power: 5
    },
    "coal-25": {
      cost: 25,
      resourceType: "coal",
      resources: 2,
      power: 5
    },
    "coal-31": {
      cost: 31,
      resourceType: "coal",
      resources: 3,
      power: 6
    },
    "coal-36": {
      cost: 36,
      resourceType: "coal",
      resources: 3,
      power: 7
    },
    "coal-42": {
      cost: 42,
      resourceType: "coal",
      resources: 2,
      power: 6
    },
    "garbage-06": {
      cost: 6,
      resourceType: "garbage",
      resources: 1,
      power: 1
    },
    "garbage-14": {
      cost: 14,
      resourceType: "garbage",
      resources: 2,
      power: 2
    },
    "garbage-19": {
      cost: 19,
      resourceType: "garbage",
      resources: 2,
      power: 3
    },
    "garbage-24": {
      cost: 24,
      resourceType: "garbage",
      resources: 2,
      power: 4
    },
    "garbage-30": {
      cost: 30,
      resourceType: "garbage",
      resources: 3,
      power: 6
    },
    "garbage-38": {
      cost: 38,
      resourceType: "garbage",
      resources: 3,
      power: 7
    },
    "hybrid-05": {
      cost: 5,
      resourceType: "hybrid",
      resources: 2,
      power: 1
    },
    "hybrid-12": {
      cost: 12,
      resourceType: "hybrid",
      resources: 2,
      power: 2
    },
    "hybrid-29": {
      cost: 29,
      resourceType: "hybrid",
      resources: 1,
      power: 4
    },
    "hybrid-46": {
      cost: 46,
      resourceType: "hybrid",
      resources: 3,
      power: 7
    },
    "hybrid-21": {
      cost: 21,
      resourceType: "hybrid",
      resources: 2,
      power: 4
    },
    "nuclear-11": {
      cost: 11,
      resourceType: "uranium",
      resources: 1,
      power: 2
    },
    "nuclear-17": {
      cost: 17,
      resourceType: "uranium",
      resources: 1,
      power: 2
    },
    "nuclear-23": {
      cost: 23,
      resourceType: "uranium",
      resources: 1,
      power: 3
    },
    "nuclear-28": {
      cost: 28,
      resourceType: "uranium",
      resources: 1,
      power: 4
    },
    "nuclear-34": {
      cost: 34,
      resourceType: "uranium",
      resources: 1,
      power: 5
    },
    "nuclear-39": {
      cost: 39,
      resourceType: "uranium",
      resources: 1,
      power: 6
    },
    "step-3": {
      cost: 99
    },
    "wind-13": {
      cost: 13,
      resourceType: "clean",
      resources: 0,
      power: 1
    },
    "wind-18": {
      cost: 18,
      resourceType: "clean",
      resources: 0,
      power: 2
    },
    "wind-22": {
      cost: 22,
      resourceType: "clean",
      resources: 0,
      power: 2
    },
    "wind-27": {
      cost: 27,
      resourceType: "clean",
      resources: 0,
      power: 3
    },
    "wind-33": {
      cost: 33,
      resourceType: "clean",
      resources: 0,
      power: 4
    },
    "wind-37": {
      cost: 37,
      resourceType: "clean",
      resources: 0,
      power: 4
    },
    "wind-44": {
      cost: 44,
      resourceType: "clean",
      resources: 0,
      power: 5
    }
  };

  // src/game/index.tsx
  var PowergridPlayer = class extends Player {
    constructor() {
      super(...arguments);
      this.score = 0;
      this.elektro = 50;
      this.cities = 0;
      this.passedThisAuction = false;
      this.havePassedAuctionPhase = false;
    }
    static {
      __name(this, "PowergridPlayer");
    }
  };
  var {
    Board: Board3,
    Space: Space2,
    Piece: Piece2
  } = boardClasses(PowergridPlayer);
  var resourceTypes = ["coal", "oil", "garbage", "uranium"];
  var PowergridBoard = class extends Board3 {
    constructor() {
      super(...arguments);
      this.step = 1;
      this.turn = 0;
      this.noMoreUranium = false;
    }
    static {
      __name(this, "PowergridBoard");
    }
    checkStepTriggers() {
      let advanceToStep2 = false;
      let advanceToStep3 = false;
      const powerplants = this.first("powerplants");
      const step2Score = this.players.length < 6 ? 7 : 6;
      if (this.step === 1 && this.players.max("score") >= step2Score)
        advanceToStep2 = true;
      if (powerplants.has("step-3"))
        advanceToStep3 = true;
      if (advanceToStep2) {
        this.message("Now in step 2");
        this.step = 2;
        powerplants.first(Card)?.remove();
        this.first("deck").top(Card)?.putInto(powerplants);
      }
      if (advanceToStep3) {
        this.message("Now in step 3");
        this.step = 3;
      }
    }
    sortPlayers(direction) {
      this.players.sortBy([
        "score",
        (player) => this.all(Card, { player }).max("cost") || 0
      ], direction);
    }
    applyMinimumRule() {
      const powerplants = this.first("powerplants");
      for (const card of powerplants.all(Card)) {
        if (card.cost <= this.players.max("score")) {
          card.remove();
          this.first("deck").top(Card)?.putInto(powerplants);
        }
      }
    }
    refillResources(resource, amount) {
      if (resource === "uranium" && this.noMoreUranium)
        return;
      for (const space of this.lastN(amount, ResourceSpace, { resource, empty: true })) {
        this.pile.first(Resource, resource)?.putInto(space);
      }
      ;
    }
  };
  var Card = class extends Piece2 {
    constructor() {
      super(...arguments);
      this.auction = false;
      this.discount = false;
      this.powered = false;
      this.purchaseCost = () => this.discount ? 1 : this.cost;
    }
    static {
      __name(this, "Card");
    }
    spaceFor(resource) {
      if (this.resourceType === resource || this.resourceType === "hybrid" && ["oil", "coal"].includes(resource)) {
        return this.resources * 2 - this.all(Resource).length;
      }
      return 0;
    }
    resourcesAvailableToPower() {
      const availableResources = this.all(Resource);
      if (availableResources.length >= this.resources)
        return availableResources;
    }
  };
  Card.hide("name", "cost", "resourceType", "resources", "power");
  var Resource = class extends Piece2 {
    static {
      __name(this, "Resource");
    }
  };
  var ResourceSpace = class extends Space2 {
    static {
      __name(this, "ResourceSpace");
    }
  };
  var City = class _City extends Space2 {
    constructor() {
      super(...arguments);
      this.owners = [];
    }
    static {
      __name(this, "City");
    }
    costToBuild() {
      const closestCity = this.closest(_City, (city) => !!city.first(Building, { mine: true }));
      return [10, 15, 20][this.owners.length] + (closestCity ? this.distanceTo(closestCity) : 0);
    }
    canBuild() {
      return this.owners.length < this.board.step;
    }
    canBuildFor(elektro) {
      return this.canBuild() && elektro >= this.costToBuild();
    }
  };
  var PlayerMat = class extends Space2 {
    static {
      __name(this, "PlayerMat");
    }
  };
  var Building = class extends Piece2 {
    static {
      __name(this, "Building");
    }
  };
  var refill = {
    coal: [
      [3, 4, 3],
      [3, 4, 3],
      [4, 5, 3],
      [5, 6, 4],
      [5, 7, 5],
      [7, 9, 6]
    ],
    oil: [
      [2, 2, 4],
      [2, 2, 4],
      [2, 3, 4],
      [3, 4, 5],
      [4, 5, 6],
      [5, 6, 7]
    ],
    garbage: [
      [1, 2, 3],
      [1, 2, 3],
      [1, 2, 3],
      [2, 3, 4],
      [3, 3, 5],
      [3, 5, 6]
    ],
    uranium: [
      [1, 1, 1],
      [1, 1, 1],
      [1, 1, 1],
      [1, 2, 2],
      [2, 3, 2],
      [2, 3, 3]
    ]
  };
  var income = [10, 22, 33, 44, 54, 64, 73, 82, 90, 98, 105, 112, 118, 124, 129, 134, 138, 142, 145, 148, 150];
  var victory = [18, 17, 17, 15, 14];
  var game_default = createGame({
    playerClass: PowergridPlayer,
    boardClass: PowergridBoard,
    elementClasses: [
      Card,
      Resource,
      ResourceSpace,
      City,
      Building,
      PlayerMat
    ],
    settings: {
      a: textSetting("a value"),
      d: choiceSetting("pick one", { a: "type a", b: "type b" }),
      b: numberSetting("a number", 1, 5),
      c: toggleSetting("a toggle")
    },
    setup: (board) => {
      const map2 = board.create(Space2, "germany");
      const cuxhaven = map2.create(City, "Cuxhaven", { zone: "green" });
      const bremen = map2.create(City, "Bremen", { zone: "green" }).connectTo(cuxhaven, 8);
      const hannover = map2.create(City, "Hannover", { zone: "green" }).connectTo(bremen, 10);
      const hamburg = map2.create(City, "Hamburg", { zone: "green" }).connectTo(cuxhaven, 11).connectTo(bremen, 11).connectTo(hannover, 17);
      const kiel = map2.create(City, "Kiel", { zone: "green" }).connectTo(hamburg, 8);
      map2.create(City, "Flensburg", { zone: "green" }).connectTo(kiel, 4);
      const wilhelmshaven = map2.create(City, "Wilhelmshaven", { zone: "green" }).connectTo(bremen, 11);
      const osnabruck = map2.create(City, "Osnabruck", { zone: "red" }).connectTo(wilhelmshaven, 14).connectTo(bremen, 11).connectTo(hannover, 16);
      const munster = map2.create(City, "M\xFCnster", { zone: "red" }).connectTo(osnabruck, 7);
      const essen = map2.create(City, "Essen", { zone: "red" }).connectTo(munster, 6);
      map2.create(City, "Duisberg", { zone: "red" }).connectTo(essen, 0);
      const dusseldorf = map2.create(City, "Dusseldorf", { zone: "red" }).connectTo(essen, 2);
      const dortmund = map2.create(City, "Dortmund", { zone: "red" }).connectTo(essen, 4).connectTo(munster, 2);
      const kassel = map2.create(City, "Kassel", { zone: "red" }).connectTo(hannover, 15).connectTo(osnabruck, 20).connectTo(dortmund, 18);
      const lubeck = map2.create(City, "L\xFCbeck", { zone: "brown" }).connectTo(kiel, 4).connectTo(hamburg, 6);
      const schwerin = map2.create(City, "Schwerin", { zone: "brown" }).connectTo(lubeck, 6).connectTo(hamburg, 8).connectTo(hannover, 19);
      const rostock = map2.create(City, "Rostock", { zone: "brown" }).connectTo(schwerin, 6);
      const torgelow = map2.create(City, "Torgelow", { zone: "brown" }).connectTo(rostock, 19).connectTo(schwerin, 19);
      const berlin = map2.create(City, "Berlin", { zone: "brown" }).connectTo(schwerin, 18).connectTo(torgelow, 15);
      const magdeburg = map2.create(City, "Magdeburg", { zone: "brown" }).connectTo(schwerin, 16).connectTo(hannover, 15).connectTo(berlin, 10);
      const frankfurto = map2.create(City, "Frankfurt-O", { zone: "brown" }).connectTo(berlin, 6);
      const halle = map2.create(City, "Halle", { zone: "yellow" }).connectTo(magdeburg, 11).connectTo(berlin, 17);
      const leipzig = map2.create(City, "Leipzig", { zone: "yellow" }).connectTo(halle, 0).connectTo(frankfurto, 21);
      const dresden = map2.create(City, "Dresden", { zone: "yellow" }).connectTo(leipzig, 13).connectTo(frankfurto, 16);
      const erfurt = map2.create(City, "Erfurt", { zone: "yellow" }).connectTo(halle, 6).connectTo(hannover, 19).connectTo(kassel, 15).connectTo(dresden, 19);
      const fulda = map2.create(City, "Fulda", { zone: "yellow" }).connectTo(kassel, 8).connectTo(erfurt, 13);
      const wurzburg = map2.create(City, "Wurzburg", { zone: "yellow" }).connectTo(fulda, 11);
      const nurnberg = map2.create(City, "Nurnberg", { zone: "yellow" }).connectTo(wurzburg, 8).connectTo(erfurt, 21);
      const koln = map2.create(City, "Koln", { zone: "blue" }).connectTo(dusseldorf, 4).connectTo(dortmund, 10);
      const aachen = map2.create(City, "Aachen", { zone: "blue" }).connectTo(dusseldorf, 9).connectTo(koln, 7);
      const trier = map2.create(City, "Trier", { zone: "blue" }).connectTo(aachen, 19).connectTo(koln, 20);
      const wiesbaden = map2.create(City, "Wiesbaden", { zone: "blue" }).connectTo(koln, 21).connectTo(trier, 18);
      map2.create(City, "Frankfurt-M", { zone: "blue" }).connectTo(dortmund, 20).connectTo(kassel, 13).connectTo(fulda, 8).connectTo(wiesbaden, 0).connectTo(wurzburg, 13);
      const saarbrucken = map2.create(City, "Saarbrucken", { zone: "blue" }).connectTo(trier, 11).connectTo(wiesbaden, 10);
      const mannheim = map2.create(City, "Mannheim", { zone: "blue" }).connectTo(wiesbaden, 11).connectTo(saarbrucken, 11).connectTo(wurzburg, 10);
      const stuttgart = map2.create(City, "Stuttgart", { zone: "purple" }).connectTo(saarbrucken, 17).connectTo(mannheim, 6).connectTo(wurzburg, 12);
      const freiburg = map2.create(City, "Freiburg", { zone: "purple" }).connectTo(stuttgart, 16);
      const konstanz = map2.create(City, "Konstanz", { zone: "purple" }).connectTo(freiburg, 14).connectTo(stuttgart, 16);
      const augsburg = map2.create(City, "Augsburg", { zone: "purple" }).connectTo(stuttgart, 15).connectTo(konstanz, 17).connectTo(wurzburg, 19).connectTo(nurnberg, 18);
      const regensburg = map2.create(City, "Regensburg", { zone: "purple" }).connectTo(nurnberg, 12).connectTo(augsburg, 13);
      const munchen = map2.create(City, "Munchen", { zone: "purple" }).connectTo(augsburg, 6).connectTo(regensburg, 10);
      map2.create(City, "Passau", { zone: "purple" }).connectTo(regensburg, 12).connectTo(munchen, 14);
      const resources = board.create(Space2, "resources");
      for (let cost = 1; cost <= 8; cost++) {
        resources.createMany(3, ResourceSpace, `coal-${cost}`, { cost, resource: "coal" });
        resources.createMany(3, ResourceSpace, `oil-${cost}`, { cost, resource: "oil" });
        resources.createMany(3, ResourceSpace, `garbage-${cost}`, { cost, resource: "garbage" });
        resources.create(ResourceSpace, `uranium-${cost}`, { cost, resource: "uranium" });
      }
      ;
      resources.create(ResourceSpace, "uranium-10", { cost: 10, resource: "uranium" });
      resources.create(ResourceSpace, "uranium-12", { cost: 12, resource: "uranium" });
      resources.create(ResourceSpace, "uranium-14", { cost: 14, resource: "uranium" });
      resources.create(ResourceSpace, "uranium-16", { cost: 16, resource: "uranium" });
      const powerplants = board.create(Space2, "powerplants");
      powerplants.onEnter(Card, (c) => {
        c.showToAll();
        board.applyMinimumRule();
        powerplants.sortBy("cost");
        const discount = powerplants.first(Card, { discount: true });
        if (discount && powerplants.first(Card) !== discount) {
          powerplants.first(Card).remove();
          discount.discount = false;
          deck.top(Card)?.putInto(powerplants);
        }
      });
      const deck = board.create(Space2, "deck");
      deck.setOrder("stacking");
      deck.onEnter(Card, (c) => c.hideFromAll());
      for (const [name, attrs] of Object.entries(cards))
        deck.create(Card, name, attrs);
      board.pile.createMany(24, Resource, "coal", { type: "coal" });
      board.pile.createMany(24, Resource, "oil", { type: "oil" });
      board.pile.createMany(24, Resource, "garbage", { type: "garbage" });
      board.pile.createMany(12, Resource, "uranium", { type: "uranium" });
      for (const player of board.players) {
        const mat = board.create(PlayerMat, "player-mat", { player });
        mat.createMany(22, Building, "building", { player });
        mat.onEnter(Card, (c) => {
          c.auction = false;
          c.discount = false;
          if (c.name === "nuclear-39" && map2.name === "germany")
            board.noMoreUranium = true;
        });
      }
      ;
      deck.shuffle();
      deck.topN(8, Card, (card) => card.cost <= 15).putInto(powerplants);
      let removals = 0;
      if (board.players.length === 4)
        removals = 1;
      if (board.players.length === 3)
        removals = 2;
      if (board.players.length === 2)
        removals = 1;
      deck.topN(removals, Card, (card) => card.cost <= 15).remove();
      removals = 0;
      if (board.players.length === 4)
        removals = 3;
      if (board.players.length === 3)
        removals = 6;
      if (board.players.length === 2)
        removals = 5;
      deck.topN(removals, Card, (card) => !!card.resourceType && card.cost > 15).remove();
      deck.top(Card, (card) => card.cost <= 15).putInto(deck);
      deck.first(Card, "step-3")?.putInto(deck, { fromBottom: 0 });
      board.refillResources("coal", 24);
      board.refillResources("oil", 18);
      board.refillResources("garbage", 9);
      board.refillResources("uranium", 2);
      board.players.shuffle();
    },
    actions: (board, action2, player) => {
      const map2 = board.first(Space2);
      const powerplants = board.first(Space2, "powerplants");
      const resources = board.first(Space2, "resources");
      const costOf = /* @__PURE__ */ __name((resource, amount) => {
        if (amount > resources.all(resource).length)
          return Infinity;
        return resources.firstN(amount, resource).sum((resource2) => resource2.container(ResourceSpace).cost);
      }, "costOf");
      return {
        auction: action2({
          prompt: "Choose a factory for auction",
          condition: !board.first(Card, { auction: true })
        }).chooseOnBoard({
          choices: powerplants.firstN(board.step === 3 ? 8 : 4, Card)
        }).do(
          (card) => card.auction = true
        ).message(
          (card) => `${player} put ${card} up for auction`
        ),
        bid: action2({
          prompt: "Bid",
          condition: !player.passedThisAuction
        }).chooseNumber({
          min: board.lastBid ? board.lastBid + 1 : board.first(Card, { auction: true })?.purchaseCost(),
          max: player.elektro
        }).do((bid) => {
          board.lastBid = bid;
          board.playerWithHighestBid = player;
        }),
        passAuction: action2({
          prompt: "Pass",
          condition: board.turn > 1
        }).do(
          () => player.havePassedAuctionPhase = true
        ),
        passBid: action2({
          prompt: "Pass",
          condition: board.lastBid !== void 0
        }).do(
          () => player.passedThisAuction = true
        ),
        scrap: action2({
          prompt: "You must scrap one of your powerplants"
        }).chooseOnBoard({
          choices: board.first(PlayerMat, { player }).all(Card)
        }).do(
          (card) => {
            for (const resource of card.all(Resource)) {
              const other = resource.container(Card).first(Card, (other2) => other2 !== card && other2.spaceFor(resource.type) > 0);
              if (other)
                resource.putInto(other);
            }
            card.remove();
          }
        ),
        pass: action2({ prompt: "Pass" }),
        build: action2({
          prompt: "Select cities for building"
        }).move({
          piece: board.first(PlayerMat, { mine: true }).first(Building),
          chooseInto: map2.all(City, (city) => city.canBuildFor(player.elektro))
        }).do((city) => {
          player.elektro -= city.costToBuild();
          city.owners.push(player);
          player.score = map2.all(Building, { mine: true }).length;
          board.checkStepTriggers();
          board.applyMinimumRule();
        }),
        arrangeResources: action2({
          prompt: "Arrange resources"
        }).move({
          promptInto: "to where",
          choosePiece: board.first(PlayerMat, { mine: true }).all(Resource),
          chooseInto: (resource) => resource.container(Card).others(Card, (card) => card.spaceFor(resource.type) > 0)
        }),
        power: action2({
          prompt: "Power your plants",
          condition: !!map2.first(Building, { player })
        }).chooseOnBoard({
          prompt: "Select plant to power",
          choices: board.all(Card, { mine: true, powered: false }, (c) => !!c.resourcesAvailableToPower())
        }).chooseOnBoard({
          prompt: "Select resources for power",
          skipIf: (card) => card.resourcesAvailableToPower().areAllEqual("type") || card.resourcesAvailableToPower().length === card.resources,
          choices: (card) => card.resourcesAvailableToPower(),
          number: (card) => card.resources
        }).do(
          (card, resources2) => {
            card.powered = true;
            if (!resources2)
              resources2 = card.firstN(card.resources, Resource);
            for (const resource of resources2)
              resource.remove();
          }
        ),
        buyResource: action2({
          prompt: "Buy resources"
        }).chooseFrom({
          expand: true,
          choices: resourceTypes.filter((type) => costOf(type, 1) <= player.elektro && !!board.first(Card, { mine: true }, (card) => card.spaceFor(type) > 0))
        }).chooseNumber({
          prompt: (resource) => `Buy ${resource}`,
          skipIfOnlyOne: false,
          min: 1,
          max: (type) => {
            let max = 0;
            while (costOf(type, max) <= player.elektro)
              max++;
            const plants = board.all(Card, { mine: true }, (c) => c.resources !== 0);
            let totalSpace = plants.sum((card) => card.spaceFor(type));
            return Math.min(max, totalSpace);
          }
        }).confirm(
          (type, amount) => `Buy ${amount} ${type} for ${costOf(type, amount)} Elektro?`
        ).do((type, amount) => {
          player.elektro -= costOf(type, amount);
          const plants = board.all(Card, { mine: true }, (c) => c.resources !== 0);
          for (const resource of resources.firstN(amount, Resource, { type })) {
            resource.putInto(plants.first(Card, (card) => card.spaceFor(resource.type) > 0));
          }
        })
      };
    },
    flow: (board) => {
      const map2 = board.first(Space2);
      const deck = board.first(Space2, "deck");
      const powerplants = board.first(Space2, "powerplants");
      return whileLoop({
        while: () => true,
        do: [
          () => {
            board.players.sortBy("score", "desc");
            board.turn += 1;
            for (const player of board.players)
              player.havePassedAuctionPhase = false;
            powerplants.first(Card).discount = true;
          },
          eachPlayer({
            name: "auctionPlayer",
            startingPlayer: () => board.players[0],
            continueUntil: () => board.players.every((p) => p.havePassedAuctionPhase),
            do: ifElse({
              name: "mayAuction",
              if: ({ auctionPlayer }) => !auctionPlayer.havePassedAuctionPhase,
              do: playerActions({
                name: "auction",
                actions: {
                  auction: [
                    ({ auctionPlayer }) => {
                      for (const player of board.players)
                        player.passedThisAuction = player.havePassedAuctionPhase;
                      board.playerWithHighestBid = auctionPlayer;
                    },
                    eachPlayer({
                      name: "biddingPlayer",
                      startingPlayer: ({ auctionPlayer }) => auctionPlayer,
                      continueUntil: () => board.lastBid !== void 0 && board.players.filter((p) => !p.passedThisAuction).length === 1,
                      do: ifElse({
                        name: "mayBid",
                        if: ({ biddingPlayer }) => !biddingPlayer.passedThisAuction,
                        do: playerActions({ name: "bid", actions: { bid: null, passBid: null } })
                      })
                    }),
                    ifElse({
                      if: () => board.first(PlayerMat, { player: board.playerWithHighestBid }).all(Card).length >= 3,
                      do: playerActions({
                        player: () => board.playerWithHighestBid,
                        name: "scrap",
                        actions: { scrap: null }
                      })
                    }),
                    ({ auctionPlayer }) => {
                      const winner = board.playerWithHighestBid;
                      board.message("$1 won the bid with $2", winner.name, board.lastBid);
                      winner.elektro -= board.lastBid;
                      board.lastBid = void 0;
                      powerplants.first(Card, { auction: true }).putInto(board.first(PlayerMat, { player: winner }));
                      deck.top(Card)?.putInto(powerplants);
                      winner.havePassedAuctionPhase = true;
                      if (winner !== auctionPlayer)
                        return "REPEAT" /* repeat */;
                    }
                  ],
                  passAuction: null
                }
              })
            })
          }),
          () => {
            board.players.sortBy("score", "asc");
            const discount = powerplants.first(Card, { discount: true });
            if (discount) {
              discount.remove();
              deck.top(Card)?.putInto(powerplants);
            }
          },
          eachPlayer({
            name: "purchasePlayer",
            do: playerActions({
              name: "purchaseResources",
              actions: {
                buyResource: "REPEAT" /* repeat */,
                pass: null
              }
            })
          }),
          eachPlayer({
            name: "buildPlayer",
            do: playerActions({
              name: "build",
              skipIfOnlyOne: true,
              actions: {
                build: "REPEAT" /* repeat */,
                pass: null
              }
            })
          }),
          () => {
            if (board.players.max("score") >= victory[board.players.length - 2]) {
              board.message("Final power phase!");
            }
          },
          eachPlayer({
            name: "powerPlayer",
            do: [
              playerActions({
                name: "power",
                prompt: "Arrange resources and power your plants",
                skipIfOnlyOne: true,
                actions: {
                  power: "REPEAT" /* repeat */,
                  arrangeResources: "REPEAT" /* repeat */,
                  pass: null
                }
              }),
              ({ powerPlayer }) => {
                for (const building of map2.all(Building, { mine: true, powered: true }))
                  building.powered = false;
                powerPlayer.cities = Math.min(
                  board.all(Card, { mine: true, powered: true }).sum("power"),
                  map2.all(Building, { mine: true }).length,
                  income.length - 1
                );
                if (board.players.max("score") < victory[board.players.length - 2]) {
                  const rev = income[powerPlayer.cities];
                  powerPlayer.elektro += rev;
                  board.message(`${powerPlayer.name} earned ${rev} elektro for ${powerPlayer.cities} ${powerPlayer.cities === 1 ? "city" : "cities"}`);
                  powerPlayer.cities = 0;
                  for (const card of board.all(Card, { mine: true, powered: true })) {
                    card.powered = false;
                  }
                }
              }
            ]
          }),
          () => {
            if (board.players.max("score") >= victory[board.players.length - 2]) {
              const winner = board.players.withHighest("cities", "elektro");
              board.message("$1 wins with $2 cities!", winner, winner.cities);
              board.finish(winner);
            } else {
              for (const r of resourceTypes) {
                board.refillResources(r, refill[r][board.players.length - 1][board.step - 1]);
              }
              if (board.step === 3) {
                powerplants.first(Card)?.remove();
              } else {
                powerplants.last(Card)?.putInto(deck, { fromBottom: 0 });
              }
              deck.top(Card)?.putInto(powerplants);
            }
          }
        ]
      });
    },
    breakpoints: (aspectRatio) => aspectRatio < 4 / 5 ? "vertical" : "default",
    layout: (board, breakpoint) => {
      const map2 = board.first(Space2);
      const deck = board.first(Space2, "deck");
      const resources = board.first(Space2, "resources");
      const powerplants = board.first(Space2, "powerplants");
      const resourceSvgs = {
        coal: coal_outline_default,
        oil: oil_outline_default,
        garbage: garbage_outline_default,
        uranium: uranium_outline_default,
        hybrid: hybrid_outline_default,
        clean: null
      };
      if (breakpoint !== "vertical") {
        board.appearance({ aspectRatio: 8 / 5 });
        board.layout(map2, {
          area: { left: 3, top: -10, width: 45, height: 120 }
        });
        board.layout(board.all(PlayerMat, { mine: false }), {
          area: { left: 50, top: 0, width: 50, height: 20 }
        });
        board.layout(powerplants, {
          area: { left: 50, top: 20, width: 40, height: 20 }
        });
        board.layout(deck, {
          area: { left: 90, top: 20, width: 10, height: 20 }
        });
        board.layout(resources, {
          area: { left: 50, top: 40, width: 50, height: 40 }
        });
        board.layout(board.all(PlayerMat, { mine: true }), {
          area: { left: 50, top: 80, width: 50, height: 20 }
        });
      } else {
        board.appearance({ aspectRatio: 1 / 2 });
        board.layout(map2, {
          area: { left: 0, top: 9, width: 100, height: 76 }
        });
        board.layout(board.all(PlayerMat, { mine: false }), {
          area: { left: 0, top: 0, width: 100, height: 15 }
        });
        board.layout(powerplants, {
          area: { left: 0, top: 15, width: 30, height: 8 }
        });
        board.layout(deck, {
          area: { left: 90, top: 15, width: 10, height: 5 }
        });
        board.layout(resources, {
          area: { left: 0, top: 78, width: 100, height: 7 }
        });
        board.layout(board.all(PlayerMat, { mine: true }), {
          area: { left: 0, top: 85, width: 100, height: 15 }
        });
      }
      map2.layout(City, {
        slots: [
          { top: 20, left: 28, width: 8, height: 8 },
          { top: 27, left: 31, width: 8, height: 8 },
          { top: 34, left: 43, width: 8, height: 8 },
          { top: 22, left: 41, width: 8, height: 8 },
          { top: 14.5, left: 40, width: 8, height: 8 },
          { top: 8, left: 35, width: 8, height: 8 },
          { top: 24, left: 18, width: 8, height: 8 },
          { top: 32, left: 24, width: 8, height: 8 },
          { top: 39.5, left: 22, width: 8, height: 8 },
          { top: 41, left: 11, width: 8, height: 8 },
          { top: 40, left: 4, width: 8, height: 8 },
          { top: 47, left: 6, width: 8, height: 8 },
          { top: 47, left: 24, width: 8, height: 8 },
          { top: 44.5, left: 36, width: 8, height: 8 },
          { top: 17, left: 51, width: 8, height: 8 },
          { top: 23, left: 58, width: 8, height: 8 },
          { top: 16, left: 63, width: 8, height: 8 },
          { top: 23, left: 80, width: 8, height: 8 },
          { top: 33, left: 76, width: 8, height: 8 },
          { top: 35.5, left: 60, width: 8, height: 8 },
          { top: 35, left: 87, width: 8, height: 8 },
          { top: 43, left: 63, width: 8, height: 8 },
          { top: 45, left: 70, width: 8, height: 8 },
          { top: 49, left: 85, width: 8, height: 8 },
          { top: 51.5, left: 57, width: 8, height: 8 },
          { top: 54, left: 44, width: 8, height: 8 },
          { top: 62, left: 45, width: 8, height: 8 },
          { top: 65, left: 57, width: 8, height: 8 },
          { top: 52.5, left: 13, width: 8, height: 8 },
          { top: 53.5, left: 2.5, width: 8, height: 8 },
          { top: 62, left: 6, width: 8, height: 8 },
          { top: 58, left: 22, width: 8, height: 8 },
          { top: 57, left: 28.4, width: 8, height: 8 },
          { top: 69, left: 14, width: 8, height: 8 },
          { top: 68, left: 27, width: 8, height: 8 },
          { top: 74, left: 31, width: 8, height: 8 },
          { top: 79, left: 20, width: 8, height: 8 },
          { top: 83, left: 31, width: 8, height: 8 },
          { top: 77, left: 47, width: 8, height: 8 },
          { top: 71, left: 63, width: 8, height: 8 },
          { top: 81, left: 60, width: 8, height: 8 },
          { top: 74, left: 78, width: 8, height: 8 }
        ]
      });
      board.all(City).layout(Building, {
        slots: [
          { top: 5, left: 30, width: 40, height: 40 },
          { top: 50, left: 5, width: 40, height: 40 },
          { top: 50, left: 55, width: 40, height: 40 }
        ]
      });
      if (breakpoint !== "vertical") {
        powerplants.layout(Card, {
          direction: "ltr",
          rows: 2,
          columns: 4,
          gap: 0.5,
          margin: { left: 18, right: 1, top: 1, bottom: 1 },
          alignment: "left"
        });
        resources.layout(ResourceSpace, {
          gap: 0.5,
          margin: { left: 18, right: 1, top: 1, bottom: 1 },
          alignment: "left",
          rows: 10,
          direction: "ttb"
        });
      } else {
        powerplants.layout(Card, {
          direction: "ltr",
          rows: 2,
          columns: 4,
          alignment: "top right"
        });
        resources.layout(resources.all(ResourceSpace, { resource: "oil" }), {
          area: { left: 0, top: 0, width: 100, height: 25 },
          alignment: "left",
          columns: 24,
          direction: "ltr",
          gap: 0.5
        });
        resources.layout(resources.all(ResourceSpace, { resource: "coal" }), {
          area: { left: 0, top: 25, width: 100, height: 25 },
          alignment: "left",
          columns: 24,
          direction: "ltr",
          gap: 0.5
        });
        resources.layout(resources.all(ResourceSpace, { resource: "garbage" }), {
          area: { left: 0, top: 50, width: 100, height: 25 },
          alignment: "left",
          columns: 24,
          direction: "ltr",
          gap: 0.5
        });
        resources.layout(resources.all(ResourceSpace, { resource: "uranium" }), {
          area: { left: 0, top: 75, width: 100, height: 25 },
          alignment: "left",
          columns: 24,
          direction: "ltr",
          gap: 0.5
        });
      }
      board.all(PlayerMat, { mine: false }).layout(Card, {
        area: { top: 10, left: 22, width: 85, height: 64 },
        gap: 0.5,
        columns: 4,
        direction: "ltr"
      });
      board.all(PlayerMat, { mine: true }).layout(Card, {
        area: { top: 22, left: 22, width: 85, height: 64 },
        gap: 0.5,
        columns: 4,
        direction: "ltr"
      });
      deck.layout(Card, {
        direction: "ltr",
        offsetColumn: { x: 10, y: 10 },
        alignment: "top right",
        margin: 1,
        rows: 1,
        limit: 3
      });
      board.all(Card).layout(Resource, {
        area: { left: 10, top: 25, width: 80, height: 50 },
        gap: 0.5
      });
      board.disableDefaultAppearance();
      board.all(PlayerMat).appearance({
        render: (mat) => /* @__PURE__ */ import_react64.default.createElement(import_react64.default.Fragment, null, /* @__PURE__ */ import_react64.default.createElement(elektro_svg_default, { amount: mat.player.elektro }), /* @__PURE__ */ import_react64.default.createElement(lightning_svg_default, { amount: mat.player.score }), /* @__PURE__ */ import_react64.default.createElement("div", { className: "name", style: { background: mat.player.color } }, mat.player.name, /* @__PURE__ */ import_react64.default.createElement("br", null)), mat.mine || /* @__PURE__ */ import_react64.default.createElement("div", { className: "divider", style: { background: mat.player.color } }))
      });
      map2.appearance({
        render: () => /* @__PURE__ */ import_react64.default.createElement("img", { id: "germany", src: germany2_default }),
        connections: {
          thickness: 0.2,
          color: "black",
          style: "double",
          fill: "white",
          label: power_label_svg_default,
          labelScale: 0.045
        }
      });
      board.all(ResourceSpace).appearance({
        render: (s) => /* @__PURE__ */ import_react64.default.createElement("div", { className: "cost" + (s.isEmpty() ? " empty" : "") }, s.cost)
      });
      board.all(Resource).appearance({ aspectRatio: 1 });
      board.all(Resource, { type: "coal" }).appearance({ render: () => /* @__PURE__ */ import_react64.default.createElement("img", { src: coal_default }) });
      board.all(Resource, { type: "oil" }).appearance({ render: () => /* @__PURE__ */ import_react64.default.createElement("img", { src: oil_default }) });
      board.all(Resource, { type: "garbage" }).appearance({ render: () => /* @__PURE__ */ import_react64.default.createElement("img", { src: garbage_default }) });
      board.all(Resource, { type: "uranium" }).appearance({ render: () => /* @__PURE__ */ import_react64.default.createElement("img", { src: uranium_default }) });
      board.all(City).appearance({ aspectRatio: 1, zoomable: true, render: city_svg_default });
      board.all(Building).appearance({ aspectRatio: 1, render: building_svg_default });
      board.all(PlayerMat).all(Building).appearance({ render: false });
      deck.appearance({
        render: (deck2) => /* @__PURE__ */ import_react64.default.createElement("div", { className: "count" }, deck2.all(Card).length)
      });
      board.all(Card).appearance({
        aspectRatio: 1,
        zoomable: (card) => card.isVisible(),
        render: (card) => /* @__PURE__ */ import_react64.default.createElement("div", { className: "outer" }, card.isVisible() && /* @__PURE__ */ import_react64.default.createElement(import_react64.default.Fragment, null, /* @__PURE__ */ import_react64.default.createElement("img", { className: "background", src: powerplant_default }), /* @__PURE__ */ import_react64.default.createElement("div", { className: "inner" }, card.name === "step-3" && /* @__PURE__ */ import_react64.default.createElement("div", { className: "step-3" }, "PHASE 3"), card.cost && card.name !== "step-3" && /* @__PURE__ */ import_react64.default.createElement(import_react64.default.Fragment, null, /* @__PURE__ */ import_react64.default.createElement("div", { className: "cost" }, card.discount ? /* @__PURE__ */ import_react64.default.createElement("span", null, /* @__PURE__ */ import_react64.default.createElement("span", { className: "old-cost" }, String(card.cost + 100).slice(-2)), /* @__PURE__ */ import_react64.default.createElement("span", { className: "new-cost" }, " 01")) : String(card.cost + 100).slice(-2)), /* @__PURE__ */ import_react64.default.createElement("div", { className: "production " + card.resourceType }, card.resourceType === "hybrid" && /* @__PURE__ */ import_react64.default.createElement("div", { className: "hybrid2" }), times(card.resources, (i) => /* @__PURE__ */ import_react64.default.createElement("img", { key: i, src: resourceSvgs[card.resourceType] })), /* @__PURE__ */ import_react64.default.createElement("img", { src: arrow_default }), /* @__PURE__ */ import_react64.default.createElement(building_outline_svg_default, { number: card.resources }))), card.auction && /* @__PURE__ */ import_react64.default.createElement("img", { src: gavel_default }))))
      });
      if (breakpoint !== "vertical") {
        board.layoutStep("auction", {
          element: powerplants,
          right: 60,
          top: 10,
          width: 35
        });
        board.layoutStep("bid", {
          element: powerplants,
          right: 60,
          top: 10,
          width: 35
        });
        board.layoutStep("purchaseResources", {
          element: resources,
          right: 66.6,
          top: 6,
          width: 30
        });
        board.layoutStep("build", {
          element: board,
          top: 2,
          left: 1.25
        });
        board.layoutStep("power", {
          element: board.first(PlayerMat, { mine: true }),
          bottom: 100,
          left: 2,
          width: 32
        });
        board.layoutStep("scrap", {
          element: board.first(PlayerMat, { mine: true }),
          bottom: 100,
          left: 2,
          width: 32
        });
        board.layoutStep("out-of-turn", {
          element: board,
          top: 2,
          left: 1.25
        });
      } else {
        board.layoutStep("auction", {
          element: powerplants,
          left: 0,
          top: 100,
          width: 100
        });
      }
    }
  });

  // src/ui/index.tsx
  ui_default(game_default);
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
